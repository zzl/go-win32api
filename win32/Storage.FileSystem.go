package win32

import "unsafe"
import "syscall"

type FindFileHandle = uintptr
type FindFileNameHandle = uintptr
type FindStreamHandle = uintptr
type FindChangeNotificationHandle = uintptr
type FindVolumeHandle = uintptr
type FindVolumeMointPointHandle = uintptr

const (
	EA_CONTAINER_NAME string = "ContainerName"
	EA_CONTAINER_SIZE string = "ContainerSize"
	CLFS_BASELOG_EXTENSION string = ".blf"
	CLFS_FLAG_REENTRANT_FILE_SYSTEM uint32 = 8
	CLFS_FLAG_NON_REENTRANT_FILTER uint32 = 16
	CLFS_FLAG_REENTRANT_FILTER uint32 = 32
	CLFS_FLAG_IGNORE_SHARE_ACCESS uint32 = 64
	CLFS_FLAG_READ_IN_PROGRESS uint32 = 128
	CLFS_FLAG_MINIFILTER_LEVEL uint32 = 256
	CLFS_FLAG_HIDDEN_SYSTEM_LOG uint32 = 512
	CLFS_MARSHALLING_FLAG_NONE uint32 = 0
	CLFS_MARSHALLING_FLAG_DISABLE_BUFF_INIT uint32 = 1
	CLFS_FLAG_FILTER_INTERMEDIATE_LEVEL uint32 = 16
	CLFS_FLAG_FILTER_TOP_LEVEL uint32 = 32
	CLFS_CONTAINER_STREAM_PREFIX string = "%BLF%:"
	CLFS_CONTAINER_RELATIVE_PREFIX string = "%BLF%\\"
	TRANSACTION_MANAGER_VOLATILE uint32 = 1
	TRANSACTION_MANAGER_COMMIT_DEFAULT uint32 = 0
	TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME uint32 = 2
	TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES uint32 = 4
	TRANSACTION_MANAGER_COMMIT_LOWEST uint32 = 8
	TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY uint32 = 16
	TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS uint32 = 32
	TRANSACTION_MANAGER_MAXIMUM_OPTION uint32 = 63
	TRANSACTION_DO_NOT_PROMOTE uint32 = 1
	TRANSACTION_MAXIMUM_OPTION uint32 = 1
	RESOURCE_MANAGER_VOLATILE uint32 = 1
	RESOURCE_MANAGER_COMMUNICATION uint32 = 2
	RESOURCE_MANAGER_MAXIMUM_OPTION uint32 = 3
	CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY uint32 = 1
	CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO uint32 = 2
	CRM_PROTOCOL_MAXIMUM_OPTION uint32 = 3
	ENLISTMENT_SUPERIOR uint32 = 1
	ENLISTMENT_MAXIMUM_OPTION uint32 = 1
	TRANSACTION_NOTIFY_MASK uint32 = 1073741823
	TRANSACTION_NOTIFY_PREPREPARE uint32 = 1
	TRANSACTION_NOTIFY_PREPARE uint32 = 2
	TRANSACTION_NOTIFY_COMMIT uint32 = 4
	TRANSACTION_NOTIFY_ROLLBACK uint32 = 8
	TRANSACTION_NOTIFY_PREPREPARE_COMPLETE uint32 = 16
	TRANSACTION_NOTIFY_PREPARE_COMPLETE uint32 = 32
	TRANSACTION_NOTIFY_COMMIT_COMPLETE uint32 = 64
	TRANSACTION_NOTIFY_ROLLBACK_COMPLETE uint32 = 128
	TRANSACTION_NOTIFY_RECOVER uint32 = 256
	TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT uint32 = 512
	TRANSACTION_NOTIFY_DELEGATE_COMMIT uint32 = 1024
	TRANSACTION_NOTIFY_RECOVER_QUERY uint32 = 2048
	TRANSACTION_NOTIFY_ENLIST_PREPREPARE uint32 = 4096
	TRANSACTION_NOTIFY_LAST_RECOVER uint32 = 8192
	TRANSACTION_NOTIFY_INDOUBT uint32 = 16384
	TRANSACTION_NOTIFY_PROPAGATE_PULL uint32 = 32768
	TRANSACTION_NOTIFY_PROPAGATE_PUSH uint32 = 65536
	TRANSACTION_NOTIFY_MARSHAL uint32 = 131072
	TRANSACTION_NOTIFY_ENLIST_MASK uint32 = 262144
	TRANSACTION_NOTIFY_RM_DISCONNECTED uint32 = 16777216
	TRANSACTION_NOTIFY_TM_ONLINE uint32 = 33554432
	TRANSACTION_NOTIFY_COMMIT_REQUEST uint32 = 67108864
	TRANSACTION_NOTIFY_PROMOTE uint32 = 134217728
	TRANSACTION_NOTIFY_PROMOTE_NEW uint32 = 268435456
	TRANSACTION_NOTIFY_REQUEST_OUTCOME uint32 = 536870912
	TRANSACTION_NOTIFY_COMMIT_FINALIZE uint32 = 1073741824
	TRANSACTIONMANAGER_OBJECT_PATH string = "\\TransactionManager\\"
	TRANSACTION_OBJECT_PATH string = "\\Transaction\\"
	ENLISTMENT_OBJECT_PATH string = "\\Enlistment\\"
	RESOURCE_MANAGER_OBJECT_PATH string = "\\ResourceManager\\"
	TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED uint32 = 1
	KTM_MARSHAL_BLOB_VERSION_MAJOR uint32 = 1
	KTM_MARSHAL_BLOB_VERSION_MINOR uint32 = 1
	MAX_TRANSACTION_DESCRIPTION_LENGTH uint32 = 64
	MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH uint32 = 64
	IOCTL_VOLUME_BASE uint32 = 86
	IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS uint32 = 5636096
	IOCTL_VOLUME_ONLINE uint32 = 5685256
	IOCTL_VOLUME_OFFLINE uint32 = 5685260
	IOCTL_VOLUME_IS_CLUSTERED uint32 = 5636144
	IOCTL_VOLUME_GET_GPT_ATTRIBUTES uint32 = 5636152
	IOCTL_VOLUME_SUPPORTS_ONLINE_OFFLINE uint32 = 5636100
	IOCTL_VOLUME_IS_OFFLINE uint32 = 5636112
	IOCTL_VOLUME_IS_IO_CAPABLE uint32 = 5636116
	IOCTL_VOLUME_QUERY_FAILOVER_SET uint32 = 5636120
	IOCTL_VOLUME_QUERY_VOLUME_NUMBER uint32 = 5636124
	IOCTL_VOLUME_LOGICAL_TO_PHYSICAL uint32 = 5636128
	IOCTL_VOLUME_PHYSICAL_TO_LOGICAL uint32 = 5636132
	IOCTL_VOLUME_IS_PARTITION uint32 = 5636136
	IOCTL_VOLUME_READ_PLEX uint32 = 5652526
	IOCTL_VOLUME_SET_GPT_ATTRIBUTES uint32 = 5636148
	IOCTL_VOLUME_GET_BC_PROPERTIES uint32 = 5652540
	IOCTL_VOLUME_ALLOCATE_BC_STREAM uint32 = 5685312
	IOCTL_VOLUME_FREE_BC_STREAM uint32 = 5685316
	IOCTL_VOLUME_BC_VERSION uint32 = 1
	IOCTL_VOLUME_IS_DYNAMIC uint32 = 5636168
	IOCTL_VOLUME_PREPARE_FOR_CRITICAL_IO uint32 = 5685324
	IOCTL_VOLUME_QUERY_ALLOCATION_HINT uint32 = 5652562
	IOCTL_VOLUME_UPDATE_PROPERTIES uint32 = 5636180
	IOCTL_VOLUME_QUERY_MINIMUM_SHRINK_SIZE uint32 = 5652568
	IOCTL_VOLUME_PREPARE_FOR_SHRINK uint32 = 5685340
	IOCTL_VOLUME_IS_CSV uint32 = 5636192
	IOCTL_VOLUME_POST_ONLINE uint32 = 5685348
	IOCTL_VOLUME_GET_CSVBLOCKCACHE_CALLBACK uint32 = 5685352
	CSV_BLOCK_CACHE_CALLBACK_VERSION uint32 = 1
	CSV_BLOCK_AND_FILE_CACHE_CALLBACK_VERSION uint32 = 2
	FT_TYPES_DEFINITION__ uint32 = 1
	CLFS_MGMT_POLICY_VERSION uint32 = 1
	LOG_POLICY_OVERWRITE uint32 = 1
	LOG_POLICY_PERSIST uint32 = 2
	CLFS_MGMT_CLIENT_REGISTRATION_VERSION uint32 = 1
	DISKQUOTA_STATE_DISABLED uint32 = 0
	DISKQUOTA_STATE_TRACK uint32 = 1
	DISKQUOTA_STATE_ENFORCE uint32 = 2
	DISKQUOTA_STATE_MASK uint32 = 3
	DISKQUOTA_FILESTATE_INCOMPLETE uint32 = 256
	DISKQUOTA_FILESTATE_REBUILDING uint32 = 512
	DISKQUOTA_FILESTATE_MASK uint32 = 768
	DISKQUOTA_LOGFLAG_USER_THRESHOLD uint32 = 1
	DISKQUOTA_LOGFLAG_USER_LIMIT uint32 = 2
	DISKQUOTA_USER_ACCOUNT_RESOLVED uint32 = 0
	DISKQUOTA_USER_ACCOUNT_UNAVAILABLE uint32 = 1
	DISKQUOTA_USER_ACCOUNT_DELETED uint32 = 2
	DISKQUOTA_USER_ACCOUNT_INVALID uint32 = 3
	DISKQUOTA_USER_ACCOUNT_UNKNOWN uint32 = 4
	DISKQUOTA_USER_ACCOUNT_UNRESOLVED uint32 = 5
	INVALID_SET_FILE_POINTER uint32 = 4294967295
	INVALID_FILE_ATTRIBUTES uint32 = 4294967295
	SHARE_NETNAME_PARMNUM uint32 = 1
	SHARE_TYPE_PARMNUM uint32 = 3
	SHARE_REMARK_PARMNUM uint32 = 4
	SHARE_PERMISSIONS_PARMNUM uint32 = 5
	SHARE_MAX_USES_PARMNUM uint32 = 6
	SHARE_CURRENT_USES_PARMNUM uint32 = 7
	SHARE_PATH_PARMNUM uint32 = 8
	SHARE_PASSWD_PARMNUM uint32 = 9
	SHARE_FILE_SD_PARMNUM uint32 = 501
	SHARE_SERVER_PARMNUM uint32 = 503
	SHI1_NUM_ELEMENTS uint32 = 4
	SHI2_NUM_ELEMENTS uint32 = 10
	STYPE_RESERVED1 uint32 = 16777216
	STYPE_RESERVED2 uint32 = 33554432
	STYPE_RESERVED3 uint32 = 67108864
	STYPE_RESERVED4 uint32 = 134217728
	STYPE_RESERVED5 uint32 = 1048576
	STYPE_RESERVED_ALL uint32 = 1073741568
	SHI_USES_UNLIMITED uint32 = 4294967295
	SHI1005_FLAGS_DFS uint32 = 1
	SHI1005_FLAGS_DFS_ROOT uint32 = 2
	CSC_MASK_EXT uint32 = 8240
	CSC_MASK uint32 = 48
	CSC_CACHE_MANUAL_REINT uint32 = 0
	CSC_CACHE_AUTO_REINT uint32 = 16
	CSC_CACHE_VDO uint32 = 32
	CSC_CACHE_NONE uint32 = 48
	SHI1005_FLAGS_RESTRICT_EXCLUSIVE_OPENS uint32 = 256
	SHI1005_FLAGS_FORCE_SHARED_DELETE uint32 = 512
	SHI1005_FLAGS_ALLOW_NAMESPACE_CACHING uint32 = 1024
	SHI1005_FLAGS_ACCESS_BASED_DIRECTORY_ENUM uint32 = 2048
	SHI1005_FLAGS_FORCE_LEVELII_OPLOCK uint32 = 4096
	SHI1005_FLAGS_ENABLE_HASH uint32 = 8192
	SHI1005_FLAGS_ENABLE_CA uint32 = 16384
	SHI1005_FLAGS_ENCRYPT_DATA uint32 = 32768
	SHI1005_FLAGS_RESERVED uint32 = 65536
	SHI1005_FLAGS_DISABLE_CLIENT_BUFFERING uint32 = 131072
	SHI1005_FLAGS_IDENTITY_REMOTING uint32 = 262144
	SHI1005_FLAGS_CLUSTER_MANAGED uint32 = 524288
	SHI1005_FLAGS_COMPRESS_DATA uint32 = 1048576
	SESI1_NUM_ELEMENTS uint32 = 8
	SESI2_NUM_ELEMENTS uint32 = 9
	STATSOPT_CLR uint32 = 1
	LZERROR_BADINHANDLE int32 = -1
	LZERROR_BADOUTHANDLE int32 = -2
	LZERROR_READ int32 = -3
	LZERROR_WRITE int32 = -4
	LZERROR_GLOBALLOC int32 = -5
	LZERROR_GLOBLOCK int32 = -6
	LZERROR_BADVALUE int32 = -7
	LZERROR_UNKNOWNALG int32 = -8
	NTMS_OBJECTNAME_LENGTH uint32 = 64
	NTMS_DESCRIPTION_LENGTH uint32 = 127
	NTMS_DEVICENAME_LENGTH uint32 = 64
	NTMS_SERIALNUMBER_LENGTH uint32 = 32
	NTMS_REVISION_LENGTH uint32 = 32
	NTMS_BARCODE_LENGTH uint32 = 64
	NTMS_SEQUENCE_LENGTH uint32 = 32
	NTMS_VENDORNAME_LENGTH uint32 = 128
	NTMS_PRODUCTNAME_LENGTH uint32 = 128
	NTMS_USERNAME_LENGTH uint32 = 64
	NTMS_APPLICATIONNAME_LENGTH uint32 = 64
	NTMS_COMPUTERNAME_LENGTH uint32 = 64
	NTMS_I1_MESSAGE_LENGTH uint32 = 127
	NTMS_MESSAGE_LENGTH uint32 = 256
	NTMS_POOLHIERARCHY_LENGTH uint32 = 512
	NTMS_OMIDLABELID_LENGTH uint32 = 255
	NTMS_OMIDLABELTYPE_LENGTH uint32 = 64
	NTMS_OMIDLABELINFO_LENGTH uint32 = 256
	NTMS_MAXATTR_LENGTH uint32 = 65536
	NTMS_MAXATTR_NAMELEN uint32 = 32
	NTMSMLI_MAXTYPE uint32 = 64
	NTMSMLI_MAXIDSIZE uint32 = 256
	NTMSMLI_MAXAPPDESCR uint32 = 256
	TXF_LOG_RECORD_GENERIC_TYPE_COMMIT uint32 = 1
	TXF_LOG_RECORD_GENERIC_TYPE_ABORT uint32 = 2
	TXF_LOG_RECORD_GENERIC_TYPE_PREPARE uint32 = 4
	TXF_LOG_RECORD_GENERIC_TYPE_DATA uint32 = 8
	VS_VERSION_INFO uint32 = 1
	VS_USER_DEFINED uint32 = 100
	VS_FFI_SIGNATURE int32 = -17890115
	VS_FFI_STRUCVERSION int32 = 65536
	VS_FFI_FILEFLAGSMASK int32 = 63
	WINEFS_SETUSERKEY_SET_CAPABILITIES uint32 = 1
	EFS_COMPATIBILITY_VERSION_NCRYPT_PROTECTOR uint32 = 5
	EFS_COMPATIBILITY_VERSION_PFILE_PROTECTOR uint32 = 6
	EFS_SUBVER_UNKNOWN uint32 = 0
	EFS_EFS_SUBVER_EFS_CERT uint32 = 1
	EFS_PFILE_SUBVER_RMS uint32 = 2
	EFS_PFILE_SUBVER_APPX uint32 = 3
	MAX_SID_SIZE uint32 = 256
	EFS_METADATA_ADD_USER uint32 = 1
	EFS_METADATA_REMOVE_USER uint32 = 2
	EFS_METADATA_REPLACE_USER uint32 = 4
	EFS_METADATA_GENERAL_OP uint32 = 8
	WOF_PROVIDER_WIM uint32 = 1
	WOF_PROVIDER_FILE uint32 = 2
	WIM_PROVIDER_HASH_SIZE uint32 = 20
	WIM_BOOT_OS_WIM uint32 = 1
	WIM_BOOT_NOT_OS_WIM uint32 = 0
	WIM_ENTRY_FLAG_NOT_ACTIVE uint32 = 1
	WIM_ENTRY_FLAG_SUSPENDED uint32 = 2
	WIM_EXTERNAL_FILE_INFO_FLAG_NOT_ACTIVE uint32 = 1
	WIM_EXTERNAL_FILE_INFO_FLAG_SUSPENDED uint32 = 2
	FILE_PROVIDER_COMPRESSION_XPRESS4K uint32 = 0
	FILE_PROVIDER_COMPRESSION_LZX uint32 = 1
	FILE_PROVIDER_COMPRESSION_XPRESS8K uint32 = 2
	FILE_PROVIDER_COMPRESSION_XPRESS16K uint32 = 3
	ClfsNullRecord uint8 = 0
	ClfsDataRecord uint8 = 1
	ClfsRestartRecord uint8 = 2
	ClfsClientRecord uint8 = 3
	ClsContainerInitializing uint32 = 1
	ClsContainerInactive uint32 = 2
	ClsContainerActive uint32 = 4
	ClsContainerActivePendingDelete uint32 = 8
	ClsContainerPendingArchive uint32 = 16
	ClsContainerPendingArchiveAndDelete uint32 = 32
	ClfsContainerInitializing uint32 = 1
	ClfsContainerInactive uint32 = 2
	ClfsContainerActive uint32 = 4
	ClfsContainerActivePendingDelete uint32 = 8
	ClfsContainerPendingArchive uint32 = 16
	ClfsContainerPendingArchiveAndDelete uint32 = 32
	CLFS_MAX_CONTAINER_INFO uint32 = 256
	CLFS_SCAN_INIT uint8 = 1
	CLFS_SCAN_FORWARD uint8 = 2
	CLFS_SCAN_BACKWARD uint8 = 4
	CLFS_SCAN_CLOSE uint8 = 8
	CLFS_SCAN_INITIALIZED uint8 = 16
	CLFS_SCAN_BUFFERED uint8 = 32
)

var (
	PARTITION_BASIC_DATA_GUID syscall.GUID = syscall.GUID{0xebd0a0a2, 0xb9e5, 0x4433, 
	[8]byte{0x87, 0xc0, 0x68, 0xb6, 0xb7, 0x26, 0x99, 0xc7}}
	PARTITION_BSP_GUID syscall.GUID = syscall.GUID{0x57434f53, 0x4df9, 0x45b9, 
	[8]byte{0x8e, 0x9e, 0x23, 0x70, 0xf0, 0x06, 0x45, 0x7c}}
	PARTITION_CLUSTER_GUID syscall.GUID = syscall.GUID{0xdb97dba9, 0x0840, 0x4bae, 
	[8]byte{0x97, 0xf0, 0xff, 0xb9, 0xa3, 0x27, 0xc7, 0xe1}}
	PARTITION_DPP_GUID syscall.GUID = syscall.GUID{0x57434f53, 0x94cb, 0x43f0, 
	[8]byte{0xa5, 0x33, 0xd7, 0x3c, 0x10, 0xcf, 0xa5, 0x7d}}
	PARTITION_ENTRY_UNUSED_GUID syscall.GUID = syscall.GUID{0x00000000, 0x0000, 0x0000, 
	[8]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}
	PARTITION_LDM_DATA_GUID syscall.GUID = syscall.GUID{0xaf9b60a0, 0x1431, 0x4f62, 
	[8]byte{0xbc, 0x68, 0x33, 0x11, 0x71, 0x4a, 0x69, 0xad}}
	PARTITION_LDM_METADATA_GUID syscall.GUID = syscall.GUID{0x5808c8aa, 0x7e8f, 0x42e0, 
	[8]byte{0x85, 0xd2, 0xe1, 0xe9, 0x04, 0x34, 0xcf, 0xb3}}
	PARTITION_LEGACY_BL_GUID syscall.GUID = syscall.GUID{0x424ca0e2, 0x7cb2, 0x4fb9, 
	[8]byte{0x81, 0x43, 0xc5, 0x2a, 0x99, 0x39, 0x8b, 0xc6}}
	PARTITION_LEGACY_BL_GUID_BACKUP syscall.GUID = syscall.GUID{0x424c3e6c, 0xd79f, 0x49cb, 
	[8]byte{0x93, 0x5d, 0x36, 0xd7, 0x14, 0x67, 0xa2, 0x88}}
	PARTITION_MAIN_OS_GUID syscall.GUID = syscall.GUID{0x57434f53, 0x8f45, 0x405e, 
	[8]byte{0x8a, 0x23, 0x18, 0x6d, 0x8a, 0x43, 0x30, 0xd3}}
	PARTITION_MSFT_RECOVERY_GUID syscall.GUID = syscall.GUID{0xde94bba4, 0x06d1, 0x4d40, 
	[8]byte{0xa1, 0x6a, 0xbf, 0xd5, 0x01, 0x79, 0xd6, 0xac}}
	PARTITION_MSFT_RESERVED_GUID syscall.GUID = syscall.GUID{0xe3c9e316, 0x0b5c, 0x4db8, 
	[8]byte{0x81, 0x7d, 0xf9, 0x2d, 0xf0, 0x02, 0x15, 0xae}}
	PARTITION_MSFT_SNAPSHOT_GUID syscall.GUID = syscall.GUID{0xcaddebf1, 0x4400, 0x4de8, 
	[8]byte{0xb1, 0x03, 0x12, 0x11, 0x7d, 0xcf, 0x3c, 0xcf}}
	PARTITION_OS_DATA_GUID syscall.GUID = syscall.GUID{0x57434f53, 0x23f2, 0x44d5, 
	[8]byte{0xa8, 0x30, 0x67, 0xbb, 0xda, 0xa6, 0x09, 0xf9}}
	PARTITION_PATCH_GUID syscall.GUID = syscall.GUID{0x8967a686, 0x96aa, 0x6aa8, 
	[8]byte{0x95, 0x89, 0xa8, 0x42, 0x56, 0x54, 0x10, 0x90}}
	PARTITION_PRE_INSTALLED_GUID syscall.GUID = syscall.GUID{0x57434f53, 0x7fe0, 0x4196, 
	[8]byte{0x9b, 0x42, 0x42, 0x7b, 0x51, 0x64, 0x34, 0x84}}
	PARTITION_SERVICING_FILES_GUID syscall.GUID = syscall.GUID{0x57434f53, 0x432e, 0x4014, 
	[8]byte{0xae, 0x4c, 0x8d, 0xea, 0xa9, 0xc0, 0x00, 0x6a}}
	PARTITION_SERVICING_METADATA_GUID syscall.GUID = syscall.GUID{0x57434f53, 0xc691, 0x4a05, 
	[8]byte{0xbb, 0x4e, 0x70, 0x3d, 0xaf, 0xd2, 0x29, 0xce}}
	PARTITION_SERVICING_RESERVE_GUID syscall.GUID = syscall.GUID{0x57434f53, 0x4b81, 0x460b, 
	[8]byte{0xa3, 0x19, 0xff, 0xb6, 0xfe, 0x13, 0x6d, 0x14}}
	PARTITION_SERVICING_STAGING_ROOT_GUID syscall.GUID = syscall.GUID{0x57434f53, 0xe84d, 0x4e84, 
	[8]byte{0xaa, 0xf3, 0xec, 0xbb, 0xbd, 0x04, 0xb9, 0xdf}}
	PARTITION_SPACES_GUID syscall.GUID = syscall.GUID{0xe75caf8f, 0xf680, 0x4cee, 
	[8]byte{0xaf, 0xa3, 0xb0, 0x01, 0xe5, 0x6e, 0xfc, 0x2d}}
	PARTITION_SPACES_DATA_GUID syscall.GUID = syscall.GUID{0xe7addcb4, 0xdc34, 0x4539, 
	[8]byte{0x9a, 0x76, 0xeb, 0xbd, 0x07, 0xbe, 0x6f, 0x7e}}
	PARTITION_SYSTEM_GUID syscall.GUID = syscall.GUID{0xc12a7328, 0xf81f, 0x11d2, 
	[8]byte{0xba, 0x4b, 0x00, 0xa0, 0xc9, 0x3e, 0xc9, 0x3b}}
	PARTITION_WINDOWS_SYSTEM_GUID syscall.GUID = syscall.GUID{0x57434f53, 0xe3e3, 0x4631, 
	[8]byte{0xa5, 0xc5, 0x26, 0xd2, 0x24, 0x38, 0x73, 0xaa}}
	CLSID_DiskQuotaControl syscall.GUID = syscall.GUID{0x7988b571, 0xec89, 0x11cf, 
	[8]byte{0x9c, 0x00, 0x00, 0xaa, 0x00, 0xa1, 0x4f, 0x56}}
)

// enums

// enum FIND_FIRST_EX_FLAGS
// flags
type FIND_FIRST_EX_FLAGS uint32
const (
	FIND_FIRST_EX_CASE_SENSITIVE FIND_FIRST_EX_FLAGS = 1
	FIND_FIRST_EX_LARGE_FETCH FIND_FIRST_EX_FLAGS = 2
	FIND_FIRST_EX_ON_DISK_ENTRIES_ONLY FIND_FIRST_EX_FLAGS = 4
)

// enum DEFINE_DOS_DEVICE_FLAGS
// flags
type DEFINE_DOS_DEVICE_FLAGS uint32
const (
	DDD_RAW_TARGET_PATH DEFINE_DOS_DEVICE_FLAGS = 1
	DDD_REMOVE_DEFINITION DEFINE_DOS_DEVICE_FLAGS = 2
	DDD_EXACT_MATCH_ON_REMOVE DEFINE_DOS_DEVICE_FLAGS = 4
	DDD_NO_BROADCAST_SYSTEM DEFINE_DOS_DEVICE_FLAGS = 8
	DDD_LUID_BROADCAST_DRIVE DEFINE_DOS_DEVICE_FLAGS = 16
)

// enum FILE_FLAGS_AND_ATTRIBUTES
// flags
type FILE_FLAGS_AND_ATTRIBUTES uint32
const (
	FILE_ATTRIBUTE_READONLY FILE_FLAGS_AND_ATTRIBUTES = 1
	FILE_ATTRIBUTE_HIDDEN FILE_FLAGS_AND_ATTRIBUTES = 2
	FILE_ATTRIBUTE_SYSTEM FILE_FLAGS_AND_ATTRIBUTES = 4
	FILE_ATTRIBUTE_DIRECTORY FILE_FLAGS_AND_ATTRIBUTES = 16
	FILE_ATTRIBUTE_ARCHIVE FILE_FLAGS_AND_ATTRIBUTES = 32
	FILE_ATTRIBUTE_DEVICE FILE_FLAGS_AND_ATTRIBUTES = 64
	FILE_ATTRIBUTE_NORMAL FILE_FLAGS_AND_ATTRIBUTES = 128
	FILE_ATTRIBUTE_TEMPORARY FILE_FLAGS_AND_ATTRIBUTES = 256
	FILE_ATTRIBUTE_SPARSE_FILE FILE_FLAGS_AND_ATTRIBUTES = 512
	FILE_ATTRIBUTE_REPARSE_POINT FILE_FLAGS_AND_ATTRIBUTES = 1024
	FILE_ATTRIBUTE_COMPRESSED FILE_FLAGS_AND_ATTRIBUTES = 2048
	FILE_ATTRIBUTE_OFFLINE FILE_FLAGS_AND_ATTRIBUTES = 4096
	FILE_ATTRIBUTE_NOT_CONTENT_INDEXED FILE_FLAGS_AND_ATTRIBUTES = 8192
	FILE_ATTRIBUTE_ENCRYPTED FILE_FLAGS_AND_ATTRIBUTES = 16384
	FILE_ATTRIBUTE_INTEGRITY_STREAM FILE_FLAGS_AND_ATTRIBUTES = 32768
	FILE_ATTRIBUTE_VIRTUAL FILE_FLAGS_AND_ATTRIBUTES = 65536
	FILE_ATTRIBUTE_NO_SCRUB_DATA FILE_FLAGS_AND_ATTRIBUTES = 131072
	FILE_ATTRIBUTE_EA FILE_FLAGS_AND_ATTRIBUTES = 262144
	FILE_ATTRIBUTE_PINNED FILE_FLAGS_AND_ATTRIBUTES = 524288
	FILE_ATTRIBUTE_UNPINNED FILE_FLAGS_AND_ATTRIBUTES = 1048576
	FILE_ATTRIBUTE_RECALL_ON_OPEN FILE_FLAGS_AND_ATTRIBUTES = 262144
	FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS FILE_FLAGS_AND_ATTRIBUTES = 4194304
	FILE_FLAG_WRITE_THROUGH FILE_FLAGS_AND_ATTRIBUTES = 2147483648
	FILE_FLAG_OVERLAPPED FILE_FLAGS_AND_ATTRIBUTES = 1073741824
	FILE_FLAG_NO_BUFFERING FILE_FLAGS_AND_ATTRIBUTES = 536870912
	FILE_FLAG_RANDOM_ACCESS FILE_FLAGS_AND_ATTRIBUTES = 268435456
	FILE_FLAG_SEQUENTIAL_SCAN FILE_FLAGS_AND_ATTRIBUTES = 134217728
	FILE_FLAG_DELETE_ON_CLOSE FILE_FLAGS_AND_ATTRIBUTES = 67108864
	FILE_FLAG_BACKUP_SEMANTICS FILE_FLAGS_AND_ATTRIBUTES = 33554432
	FILE_FLAG_POSIX_SEMANTICS FILE_FLAGS_AND_ATTRIBUTES = 16777216
	FILE_FLAG_SESSION_AWARE FILE_FLAGS_AND_ATTRIBUTES = 8388608
	FILE_FLAG_OPEN_REPARSE_POINT FILE_FLAGS_AND_ATTRIBUTES = 2097152
	FILE_FLAG_OPEN_NO_RECALL FILE_FLAGS_AND_ATTRIBUTES = 1048576
	FILE_FLAG_FIRST_PIPE_INSTANCE FILE_FLAGS_AND_ATTRIBUTES = 524288
	PIPE_ACCESS_DUPLEX FILE_FLAGS_AND_ATTRIBUTES = 3
	PIPE_ACCESS_INBOUND FILE_FLAGS_AND_ATTRIBUTES = 1
	PIPE_ACCESS_OUTBOUND FILE_FLAGS_AND_ATTRIBUTES = 2
	SECURITY_ANONYMOUS FILE_FLAGS_AND_ATTRIBUTES = 0
	SECURITY_IDENTIFICATION FILE_FLAGS_AND_ATTRIBUTES = 65536
	SECURITY_IMPERSONATION FILE_FLAGS_AND_ATTRIBUTES = 131072
	SECURITY_DELEGATION FILE_FLAGS_AND_ATTRIBUTES = 196608
	SECURITY_CONTEXT_TRACKING FILE_FLAGS_AND_ATTRIBUTES = 262144
	SECURITY_EFFECTIVE_ONLY FILE_FLAGS_AND_ATTRIBUTES = 524288
	SECURITY_SQOS_PRESENT FILE_FLAGS_AND_ATTRIBUTES = 1048576
	SECURITY_VALID_SQOS_FLAGS FILE_FLAGS_AND_ATTRIBUTES = 2031616
)

// enum FILE_ACCESS_FLAGS
// flags
type FILE_ACCESS_FLAGS uint32
const (
	FILE_READ_DATA FILE_ACCESS_FLAGS = 1
	FILE_LIST_DIRECTORY FILE_ACCESS_FLAGS = 1
	FILE_WRITE_DATA FILE_ACCESS_FLAGS = 2
	FILE_ADD_FILE FILE_ACCESS_FLAGS = 2
	FILE_APPEND_DATA FILE_ACCESS_FLAGS = 4
	FILE_ADD_SUBDIRECTORY FILE_ACCESS_FLAGS = 4
	FILE_CREATE_PIPE_INSTANCE FILE_ACCESS_FLAGS = 4
	FILE_READ_EA FILE_ACCESS_FLAGS = 8
	FILE_WRITE_EA FILE_ACCESS_FLAGS = 16
	FILE_EXECUTE FILE_ACCESS_FLAGS = 32
	FILE_TRAVERSE FILE_ACCESS_FLAGS = 32
	FILE_DELETE_CHILD FILE_ACCESS_FLAGS = 64
	FILE_READ_ATTRIBUTES FILE_ACCESS_FLAGS = 128
	FILE_WRITE_ATTRIBUTES FILE_ACCESS_FLAGS = 256
	READ_CONTROL FILE_ACCESS_FLAGS = 131072
	SYNCHRONIZE FILE_ACCESS_FLAGS = 1048576
	STANDARD_RIGHTS_REQUIRED FILE_ACCESS_FLAGS = 983040
	STANDARD_RIGHTS_READ FILE_ACCESS_FLAGS = 131072
	STANDARD_RIGHTS_WRITE FILE_ACCESS_FLAGS = 131072
	STANDARD_RIGHTS_EXECUTE FILE_ACCESS_FLAGS = 131072
	STANDARD_RIGHTS_ALL FILE_ACCESS_FLAGS = 2031616
	SPECIFIC_RIGHTS_ALL FILE_ACCESS_FLAGS = 65535
	FILE_ALL_ACCESS FILE_ACCESS_FLAGS = 2032127
	FILE_GENERIC_READ FILE_ACCESS_FLAGS = 1179785
	FILE_GENERIC_WRITE FILE_ACCESS_FLAGS = 1179926
	FILE_GENERIC_EXECUTE FILE_ACCESS_FLAGS = 1179808
)

// enum GET_FILE_VERSION_INFO_FLAGS
// flags
type GET_FILE_VERSION_INFO_FLAGS uint32
const (
	FILE_VER_GET_LOCALISED GET_FILE_VERSION_INFO_FLAGS = 1
	FILE_VER_GET_NEUTRAL GET_FILE_VERSION_INFO_FLAGS = 2
	FILE_VER_GET_PREFETCHED GET_FILE_VERSION_INFO_FLAGS = 4
)

// enum VER_FIND_FILE_FLAGS
type VER_FIND_FILE_FLAGS uint32
const (
	VFFF_ISSHAREDFILE VER_FIND_FILE_FLAGS = 1
)

// enum VER_FIND_FILE_STATUS
// flags
type VER_FIND_FILE_STATUS uint32
const (
	VFF_CURNEDEST VER_FIND_FILE_STATUS = 1
	VFF_FILEINUSE VER_FIND_FILE_STATUS = 2
	VFF_BUFFTOOSMALL VER_FIND_FILE_STATUS = 4
)

// enum VER_INSTALL_FILE_FLAGS
type VER_INSTALL_FILE_FLAGS uint32
const (
	VIFF_FORCEINSTALL VER_INSTALL_FILE_FLAGS = 1
	VIFF_DONTDELETEOLD VER_INSTALL_FILE_FLAGS = 2
)

// enum VER_INSTALL_FILE_STATUS
// flags
type VER_INSTALL_FILE_STATUS uint32
const (
	VIF_TEMPFILE VER_INSTALL_FILE_STATUS = 1
	VIF_MISMATCH VER_INSTALL_FILE_STATUS = 2
	VIF_SRCOLD VER_INSTALL_FILE_STATUS = 4
	VIF_DIFFLANG VER_INSTALL_FILE_STATUS = 8
	VIF_DIFFCODEPG VER_INSTALL_FILE_STATUS = 16
	VIF_DIFFTYPE VER_INSTALL_FILE_STATUS = 32
	VIF_WRITEPROT VER_INSTALL_FILE_STATUS = 64
	VIF_FILEINUSE VER_INSTALL_FILE_STATUS = 128
	VIF_OUTOFSPACE VER_INSTALL_FILE_STATUS = 256
	VIF_ACCESSVIOLATION VER_INSTALL_FILE_STATUS = 512
	VIF_SHARINGVIOLATION VER_INSTALL_FILE_STATUS = 1024
	VIF_CANNOTCREATE VER_INSTALL_FILE_STATUS = 2048
	VIF_CANNOTDELETE VER_INSTALL_FILE_STATUS = 4096
	VIF_CANNOTRENAME VER_INSTALL_FILE_STATUS = 8192
	VIF_CANNOTDELETECUR VER_INSTALL_FILE_STATUS = 16384
	VIF_OUTOFMEMORY VER_INSTALL_FILE_STATUS = 32768
	VIF_CANNOTREADSRC VER_INSTALL_FILE_STATUS = 65536
	VIF_CANNOTREADDST VER_INSTALL_FILE_STATUS = 131072
	VIF_BUFFTOOSMALL VER_INSTALL_FILE_STATUS = 262144
	VIF_CANNOTLOADLZ32 VER_INSTALL_FILE_STATUS = 524288
	VIF_CANNOTLOADCABINET VER_INSTALL_FILE_STATUS = 1048576
)

// enum VS_FIXEDFILEINFO_FILE_FLAGS
// flags
type VS_FIXEDFILEINFO_FILE_FLAGS uint32
const (
	VS_FF_DEBUG VS_FIXEDFILEINFO_FILE_FLAGS = 1
	VS_FF_PRERELEASE VS_FIXEDFILEINFO_FILE_FLAGS = 2
	VS_FF_PATCHED VS_FIXEDFILEINFO_FILE_FLAGS = 4
	VS_FF_PRIVATEBUILD VS_FIXEDFILEINFO_FILE_FLAGS = 8
	VS_FF_INFOINFERRED VS_FIXEDFILEINFO_FILE_FLAGS = 16
	VS_FF_SPECIALBUILD VS_FIXEDFILEINFO_FILE_FLAGS = 32
)

// enum VS_FIXEDFILEINFO_FILE_OS
type VS_FIXEDFILEINFO_FILE_OS int32
const (
	VOS_UNKNOWN VS_FIXEDFILEINFO_FILE_OS = 0
	VOS_DOS VS_FIXEDFILEINFO_FILE_OS = 65536
	VOS_OS216 VS_FIXEDFILEINFO_FILE_OS = 131072
	VOS_OS232 VS_FIXEDFILEINFO_FILE_OS = 196608
	VOS_NT VS_FIXEDFILEINFO_FILE_OS = 262144
	VOS_WINCE VS_FIXEDFILEINFO_FILE_OS = 327680
	VOS__BASE VS_FIXEDFILEINFO_FILE_OS = 0
	VOS__WINDOWS16 VS_FIXEDFILEINFO_FILE_OS = 1
	VOS__PM16 VS_FIXEDFILEINFO_FILE_OS = 2
	VOS__PM32 VS_FIXEDFILEINFO_FILE_OS = 3
	VOS__WINDOWS32 VS_FIXEDFILEINFO_FILE_OS = 4
	VOS_DOS_WINDOWS16 VS_FIXEDFILEINFO_FILE_OS = 65537
	VOS_DOS_WINDOWS32 VS_FIXEDFILEINFO_FILE_OS = 65540
	VOS_OS216_PM16 VS_FIXEDFILEINFO_FILE_OS = 131074
	VOS_OS232_PM32 VS_FIXEDFILEINFO_FILE_OS = 196611
	VOS_NT_WINDOWS32 VS_FIXEDFILEINFO_FILE_OS = 262148
)

// enum VS_FIXEDFILEINFO_FILE_TYPE
type VS_FIXEDFILEINFO_FILE_TYPE int32
const (
	VFT_UNKNOWN VS_FIXEDFILEINFO_FILE_TYPE = 0
	VFT_APP VS_FIXEDFILEINFO_FILE_TYPE = 1
	VFT_DLL VS_FIXEDFILEINFO_FILE_TYPE = 2
	VFT_DRV VS_FIXEDFILEINFO_FILE_TYPE = 3
	VFT_FONT VS_FIXEDFILEINFO_FILE_TYPE = 4
	VFT_VXD VS_FIXEDFILEINFO_FILE_TYPE = 5
	VFT_STATIC_LIB VS_FIXEDFILEINFO_FILE_TYPE = 7
)

// enum VS_FIXEDFILEINFO_FILE_SUBTYPE
type VS_FIXEDFILEINFO_FILE_SUBTYPE int32
const (
	VFT2_UNKNOWN VS_FIXEDFILEINFO_FILE_SUBTYPE = 0
	VFT2_DRV_PRINTER VS_FIXEDFILEINFO_FILE_SUBTYPE = 1
	VFT2_DRV_KEYBOARD VS_FIXEDFILEINFO_FILE_SUBTYPE = 2
	VFT2_DRV_LANGUAGE VS_FIXEDFILEINFO_FILE_SUBTYPE = 3
	VFT2_DRV_DISPLAY VS_FIXEDFILEINFO_FILE_SUBTYPE = 4
	VFT2_DRV_MOUSE VS_FIXEDFILEINFO_FILE_SUBTYPE = 5
	VFT2_DRV_NETWORK VS_FIXEDFILEINFO_FILE_SUBTYPE = 6
	VFT2_DRV_SYSTEM VS_FIXEDFILEINFO_FILE_SUBTYPE = 7
	VFT2_DRV_INSTALLABLE VS_FIXEDFILEINFO_FILE_SUBTYPE = 8
	VFT2_DRV_SOUND VS_FIXEDFILEINFO_FILE_SUBTYPE = 9
	VFT2_DRV_COMM VS_FIXEDFILEINFO_FILE_SUBTYPE = 10
	VFT2_DRV_INPUTMETHOD VS_FIXEDFILEINFO_FILE_SUBTYPE = 11
	VFT2_DRV_VERSIONED_PRINTER VS_FIXEDFILEINFO_FILE_SUBTYPE = 12
	VFT2_FONT_RASTER VS_FIXEDFILEINFO_FILE_SUBTYPE = 1
	VFT2_FONT_VECTOR VS_FIXEDFILEINFO_FILE_SUBTYPE = 2
	VFT2_FONT_TRUETYPE VS_FIXEDFILEINFO_FILE_SUBTYPE = 3
)

// enum FILE_CREATION_DISPOSITION
type FILE_CREATION_DISPOSITION uint32
const (
	CREATE_NEW FILE_CREATION_DISPOSITION = 1
	CREATE_ALWAYS FILE_CREATION_DISPOSITION = 2
	OPEN_EXISTING FILE_CREATION_DISPOSITION = 3
	OPEN_ALWAYS FILE_CREATION_DISPOSITION = 4
	TRUNCATE_EXISTING FILE_CREATION_DISPOSITION = 5
)

// enum FILE_SHARE_MODE
// flags
type FILE_SHARE_MODE uint32
const (
	FILE_SHARE_NONE FILE_SHARE_MODE = 0
	FILE_SHARE_DELETE FILE_SHARE_MODE = 4
	FILE_SHARE_READ FILE_SHARE_MODE = 1
	FILE_SHARE_WRITE FILE_SHARE_MODE = 2
)

// enum SHARE_TYPE
// flags
type SHARE_TYPE uint32
const (
	STYPE_DISKTREE SHARE_TYPE = 0
	STYPE_PRINTQ SHARE_TYPE = 1
	STYPE_DEVICE SHARE_TYPE = 2
	STYPE_IPC SHARE_TYPE = 3
	STYPE_SPECIAL SHARE_TYPE = 2147483648
	STYPE_TEMPORARY SHARE_TYPE = 1073741824
	STYPE_MASK SHARE_TYPE = 255
)

// enum CLFS_FLAG
// flags
type CLFS_FLAG uint32
const (
	CLFS_FLAG_FORCE_APPEND CLFS_FLAG = 1
	CLFS_FLAG_FORCE_FLUSH CLFS_FLAG = 2
	CLFS_FLAG_NO_FLAGS CLFS_FLAG = 0
	CLFS_FLAG_USE_RESERVATION CLFS_FLAG = 4
)

// enum SET_FILE_POINTER_MOVE_METHOD
type SET_FILE_POINTER_MOVE_METHOD uint32
const (
	FILE_BEGIN SET_FILE_POINTER_MOVE_METHOD = 0
	FILE_CURRENT SET_FILE_POINTER_MOVE_METHOD = 1
	FILE_END SET_FILE_POINTER_MOVE_METHOD = 2
)

// enum MOVE_FILE_FLAGS
// flags
type MOVE_FILE_FLAGS uint32
const (
	MOVEFILE_COPY_ALLOWED MOVE_FILE_FLAGS = 2
	MOVEFILE_CREATE_HARDLINK MOVE_FILE_FLAGS = 16
	MOVEFILE_DELAY_UNTIL_REBOOT MOVE_FILE_FLAGS = 4
	MOVEFILE_REPLACE_EXISTING MOVE_FILE_FLAGS = 1
	MOVEFILE_WRITE_THROUGH MOVE_FILE_FLAGS = 8
	MOVEFILE_FAIL_IF_NOT_TRACKABLE MOVE_FILE_FLAGS = 32
)

// enum FILE_NAME
type FILE_NAME uint32
const (
	FILE_NAME_NORMALIZED FILE_NAME = 0
	FILE_NAME_OPENED FILE_NAME = 8
)

// enum LZOPENFILE_STYLE
// flags
type LZOPENFILE_STYLE uint32
const (
	OF_CANCEL LZOPENFILE_STYLE = 2048
	OF_CREATE LZOPENFILE_STYLE = 4096
	OF_DELETE LZOPENFILE_STYLE = 512
	OF_EXIST LZOPENFILE_STYLE = 16384
	OF_PARSE LZOPENFILE_STYLE = 256
	OF_PROMPT LZOPENFILE_STYLE = 8192
	OF_READ LZOPENFILE_STYLE = 0
	OF_READWRITE LZOPENFILE_STYLE = 2
	OF_REOPEN LZOPENFILE_STYLE = 32768
	OF_SHARE_DENY_NONE LZOPENFILE_STYLE = 64
	OF_SHARE_DENY_READ LZOPENFILE_STYLE = 48
	OF_SHARE_DENY_WRITE LZOPENFILE_STYLE = 32
	OF_SHARE_EXCLUSIVE LZOPENFILE_STYLE = 16
	OF_WRITE LZOPENFILE_STYLE = 1
	OF_SHARE_COMPAT LZOPENFILE_STYLE = 0
	OF_VERIFY LZOPENFILE_STYLE = 1024
)

// enum FILE_NOTIFY_CHANGE
// flags
type FILE_NOTIFY_CHANGE uint32
const (
	FILE_NOTIFY_CHANGE_FILE_NAME FILE_NOTIFY_CHANGE = 1
	FILE_NOTIFY_CHANGE_DIR_NAME FILE_NOTIFY_CHANGE = 2
	FILE_NOTIFY_CHANGE_ATTRIBUTES FILE_NOTIFY_CHANGE = 4
	FILE_NOTIFY_CHANGE_SIZE FILE_NOTIFY_CHANGE = 8
	FILE_NOTIFY_CHANGE_LAST_WRITE FILE_NOTIFY_CHANGE = 16
	FILE_NOTIFY_CHANGE_LAST_ACCESS FILE_NOTIFY_CHANGE = 32
	FILE_NOTIFY_CHANGE_CREATION FILE_NOTIFY_CHANGE = 64
	FILE_NOTIFY_CHANGE_SECURITY FILE_NOTIFY_CHANGE = 256
)

// enum TXFS_MINIVERSION
type TXFS_MINIVERSION uint32
const (
	TXFS_MINIVERSION_COMMITTED_VIEW TXFS_MINIVERSION = 0
	TXFS_MINIVERSION_DIRTY_VIEW TXFS_MINIVERSION = 65535
	TXFS_MINIVERSION_DEFAULT_VIEW TXFS_MINIVERSION = 65534
)

// enum TAPE_POSITION_TYPE
type TAPE_POSITION_TYPE int32
const (
	TAPE_ABSOLUTE_POSITION TAPE_POSITION_TYPE = 0
	TAPE_LOGICAL_POSITION TAPE_POSITION_TYPE = 1
)

// enum CREATE_TAPE_PARTITION_METHOD
type CREATE_TAPE_PARTITION_METHOD int32
const (
	TAPE_FIXED_PARTITIONS CREATE_TAPE_PARTITION_METHOD = 0
	TAPE_INITIATOR_PARTITIONS CREATE_TAPE_PARTITION_METHOD = 2
	TAPE_SELECT_PARTITIONS CREATE_TAPE_PARTITION_METHOD = 1
)

// enum REPLACE_FILE_FLAGS
// flags
type REPLACE_FILE_FLAGS uint32
const (
	REPLACEFILE_WRITE_THROUGH REPLACE_FILE_FLAGS = 1
	REPLACEFILE_IGNORE_MERGE_ERRORS REPLACE_FILE_FLAGS = 2
	REPLACEFILE_IGNORE_ACL_ERRORS REPLACE_FILE_FLAGS = 4
)

// enum TAPEMARK_TYPE
type TAPEMARK_TYPE int32
const (
	TAPE_FILEMARKS TAPEMARK_TYPE = 1
	TAPE_LONG_FILEMARKS TAPEMARK_TYPE = 3
	TAPE_SETMARKS TAPEMARK_TYPE = 0
	TAPE_SHORT_FILEMARKS TAPEMARK_TYPE = 2
)

// enum DISKQUOTA_USERNAME_RESOLVE
type DISKQUOTA_USERNAME_RESOLVE uint32
const (
	DISKQUOTA_USERNAME_RESOLVE_ASYNC DISKQUOTA_USERNAME_RESOLVE = 2
	DISKQUOTA_USERNAME_RESOLVE_NONE DISKQUOTA_USERNAME_RESOLVE = 0
	DISKQUOTA_USERNAME_RESOLVE_SYNC DISKQUOTA_USERNAME_RESOLVE = 1
)

// enum TAPE_POSITION_METHOD
type TAPE_POSITION_METHOD int32
const (
	TAPE_ABSOLUTE_BLOCK TAPE_POSITION_METHOD = 1
	TAPE_LOGICAL_BLOCK TAPE_POSITION_METHOD = 2
	TAPE_REWIND TAPE_POSITION_METHOD = 0
	TAPE_SPACE_END_OF_DATA TAPE_POSITION_METHOD = 4
	TAPE_SPACE_FILEMARKS TAPE_POSITION_METHOD = 6
	TAPE_SPACE_RELATIVE_BLOCKS TAPE_POSITION_METHOD = 5
	TAPE_SPACE_SEQUENTIAL_FMKS TAPE_POSITION_METHOD = 7
	TAPE_SPACE_SEQUENTIAL_SMKS TAPE_POSITION_METHOD = 9
	TAPE_SPACE_SETMARKS TAPE_POSITION_METHOD = 8
)

// enum NT_CREATE_FILE_DISPOSITION
type NT_CREATE_FILE_DISPOSITION uint32
const (
	FILE_SUPERSEDE NT_CREATE_FILE_DISPOSITION = 0
	FILE_CREATE NT_CREATE_FILE_DISPOSITION = 2
	FILE_OPEN NT_CREATE_FILE_DISPOSITION = 1
	FILE_OPEN_IF NT_CREATE_FILE_DISPOSITION = 3
	FILE_OVERWRITE NT_CREATE_FILE_DISPOSITION = 4
	FILE_OVERWRITE_IF NT_CREATE_FILE_DISPOSITION = 5
)

// enum TAPE_INFORMATION_TYPE
type TAPE_INFORMATION_TYPE uint32
const (
	SET_TAPE_DRIVE_INFORMATION TAPE_INFORMATION_TYPE = 1
	SET_TAPE_MEDIA_INFORMATION TAPE_INFORMATION_TYPE = 0
)

// enum NTMS_OMID_TYPE
type NTMS_OMID_TYPE uint32
const (
	NTMS_OMID_TYPE_FILESYSTEM_INFO NTMS_OMID_TYPE = 2
	NTMS_OMID_TYPE_RAW_LABEL NTMS_OMID_TYPE = 1
)

// enum LOCK_FILE_FLAGS
// flags
type LOCK_FILE_FLAGS uint32
const (
	LOCKFILE_EXCLUSIVE_LOCK LOCK_FILE_FLAGS = 2
	LOCKFILE_FAIL_IMMEDIATELY LOCK_FILE_FLAGS = 1
)

// enum LPPROGRESS_ROUTINE_CALLBACK_REASON
type LPPROGRESS_ROUTINE_CALLBACK_REASON uint32
const (
	CALLBACK_CHUNK_FINISHED LPPROGRESS_ROUTINE_CALLBACK_REASON = 0
	CALLBACK_STREAM_SWITCH LPPROGRESS_ROUTINE_CALLBACK_REASON = 1
)

// enum PREPARE_TAPE_OPERATION
type PREPARE_TAPE_OPERATION int32
const (
	TAPE_FORMAT PREPARE_TAPE_OPERATION = 5
	TAPE_LOAD PREPARE_TAPE_OPERATION = 0
	TAPE_LOCK PREPARE_TAPE_OPERATION = 3
	TAPE_TENSION PREPARE_TAPE_OPERATION = 2
	TAPE_UNLOAD PREPARE_TAPE_OPERATION = 1
	TAPE_UNLOCK PREPARE_TAPE_OPERATION = 4
)

// enum GET_TAPE_DRIVE_PARAMETERS_OPERATION
type GET_TAPE_DRIVE_PARAMETERS_OPERATION uint32
const (
	GET_TAPE_DRIVE_INFORMATION GET_TAPE_DRIVE_PARAMETERS_OPERATION = 1
	GET_TAPE_MEDIA_INFORMATION GET_TAPE_DRIVE_PARAMETERS_OPERATION = 0
)

// enum ERASE_TAPE_TYPE
type ERASE_TAPE_TYPE int32
const (
	TAPE_ERASE_LONG ERASE_TAPE_TYPE = 1
	TAPE_ERASE_SHORT ERASE_TAPE_TYPE = 0
)

// enum FILE_ACTION
type FILE_ACTION uint32
const (
	FILE_ACTION_ADDED FILE_ACTION = 1
	FILE_ACTION_REMOVED FILE_ACTION = 2
	FILE_ACTION_MODIFIED FILE_ACTION = 3
	FILE_ACTION_RENAMED_OLD_NAME FILE_ACTION = 4
	FILE_ACTION_RENAMED_NEW_NAME FILE_ACTION = 5
)

// enum SHARE_INFO_PERMISSIONS
type SHARE_INFO_PERMISSIONS uint32
const (
	ACCESS_READ SHARE_INFO_PERMISSIONS = 1
	ACCESS_WRITE SHARE_INFO_PERMISSIONS = 2
	ACCESS_CREATE SHARE_INFO_PERMISSIONS = 4
	ACCESS_EXEC SHARE_INFO_PERMISSIONS = 8
	ACCESS_DELETE SHARE_INFO_PERMISSIONS = 16
	ACCESS_ATRIB SHARE_INFO_PERMISSIONS = 32
	ACCESS_PERM SHARE_INFO_PERMISSIONS = 64
	ACCESS_ALL SHARE_INFO_PERMISSIONS = 32768
)

// enum FILE_DEVICE_TYPE
type FILE_DEVICE_TYPE uint32
const (
	FILE_DEVICE_CD_ROM FILE_DEVICE_TYPE = 2
	FILE_DEVICE_DISK FILE_DEVICE_TYPE = 7
	FILE_DEVICE_TAPE FILE_DEVICE_TYPE = 31
	FILE_DEVICE_DVD FILE_DEVICE_TYPE = 51
)

// enum SESSION_INFO_USER_FLAGS
type SESSION_INFO_USER_FLAGS uint32
const (
	SESS_GUEST SESSION_INFO_USER_FLAGS = 1
	SESS_NOENCRYPTION SESSION_INFO_USER_FLAGS = 2
)

// enum WIN_STREAM_ID
type WIN_STREAM_ID uint32
const (
	BACKUP_ALTERNATE_DATA WIN_STREAM_ID = 4
	BACKUP_DATA WIN_STREAM_ID = 1
	BACKUP_EA_DATA WIN_STREAM_ID = 2
	BACKUP_LINK WIN_STREAM_ID = 5
	BACKUP_OBJECT_ID WIN_STREAM_ID = 7
	BACKUP_PROPERTY_DATA WIN_STREAM_ID = 6
	BACKUP_REPARSE_DATA WIN_STREAM_ID = 8
	BACKUP_SECURITY_DATA WIN_STREAM_ID = 3
	BACKUP_SPARSE_BLOCK WIN_STREAM_ID = 9
	BACKUP_TXFS_DATA WIN_STREAM_ID = 10
)

// enum TXF_LOG_RECORD_TYPE
type TXF_LOG_RECORD_TYPE uint16
const (
	TXF_LOG_RECORD_TYPE_AFFECTED_FILE TXF_LOG_RECORD_TYPE = 4
	TXF_LOG_RECORD_TYPE_TRUNCATE TXF_LOG_RECORD_TYPE = 2
	TXF_LOG_RECORD_TYPE_WRITE TXF_LOG_RECORD_TYPE = 1
)

// enum FILE_INFO_FLAGS_PERMISSIONS
// flags
type FILE_INFO_FLAGS_PERMISSIONS uint32
const (
	PERM_FILE_READ FILE_INFO_FLAGS_PERMISSIONS = 1
	PERM_FILE_WRITE FILE_INFO_FLAGS_PERMISSIONS = 2
	PERM_FILE_CREATE FILE_INFO_FLAGS_PERMISSIONS = 4
)

// enum SYMBOLIC_LINK_FLAGS
// flags
type SYMBOLIC_LINK_FLAGS uint32
const (
	SYMBOLIC_LINK_FLAG_DIRECTORY SYMBOLIC_LINK_FLAGS = 1
	SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE SYMBOLIC_LINK_FLAGS = 2
)

// enum FINDEX_INFO_LEVELS
type FINDEX_INFO_LEVELS int32
const (
	FindExInfoStandard FINDEX_INFO_LEVELS = 0
	FindExInfoBasic FINDEX_INFO_LEVELS = 1
	FindExInfoMaxInfoLevel FINDEX_INFO_LEVELS = 2
)

// enum FINDEX_SEARCH_OPS
type FINDEX_SEARCH_OPS int32
const (
	FindExSearchNameMatch FINDEX_SEARCH_OPS = 0
	FindExSearchLimitToDirectories FINDEX_SEARCH_OPS = 1
	FindExSearchLimitToDevices FINDEX_SEARCH_OPS = 2
	FindExSearchMaxSearchOp FINDEX_SEARCH_OPS = 3
)

// enum READ_DIRECTORY_NOTIFY_INFORMATION_CLASS
type READ_DIRECTORY_NOTIFY_INFORMATION_CLASS int32
const (
	ReadDirectoryNotifyInformation READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = 1
	ReadDirectoryNotifyExtendedInformation READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = 2
)

// enum GET_FILEEX_INFO_LEVELS
type GET_FILEEX_INFO_LEVELS int32
const (
	GetFileExInfoStandard GET_FILEEX_INFO_LEVELS = 0
	GetFileExMaxInfoLevel GET_FILEEX_INFO_LEVELS = 1
)

// enum FILE_INFO_BY_HANDLE_CLASS
type FILE_INFO_BY_HANDLE_CLASS int32
const (
	FileBasicInfo FILE_INFO_BY_HANDLE_CLASS = 0
	FileStandardInfo FILE_INFO_BY_HANDLE_CLASS = 1
	FileNameInfo FILE_INFO_BY_HANDLE_CLASS = 2
	FileRenameInfo FILE_INFO_BY_HANDLE_CLASS = 3
	FileDispositionInfo FILE_INFO_BY_HANDLE_CLASS = 4
	FileAllocationInfo FILE_INFO_BY_HANDLE_CLASS = 5
	FileEndOfFileInfo FILE_INFO_BY_HANDLE_CLASS = 6
	FileStreamInfo FILE_INFO_BY_HANDLE_CLASS = 7
	FileCompressionInfo FILE_INFO_BY_HANDLE_CLASS = 8
	FileAttributeTagInfo FILE_INFO_BY_HANDLE_CLASS = 9
	FileIdBothDirectoryInfo FILE_INFO_BY_HANDLE_CLASS = 10
	FileIdBothDirectoryRestartInfo FILE_INFO_BY_HANDLE_CLASS = 11
	FileIoPriorityHintInfo FILE_INFO_BY_HANDLE_CLASS = 12
	FileRemoteProtocolInfo FILE_INFO_BY_HANDLE_CLASS = 13
	FileFullDirectoryInfo FILE_INFO_BY_HANDLE_CLASS = 14
	FileFullDirectoryRestartInfo FILE_INFO_BY_HANDLE_CLASS = 15
	FileStorageInfo FILE_INFO_BY_HANDLE_CLASS = 16
	FileAlignmentInfo FILE_INFO_BY_HANDLE_CLASS = 17
	FileIdInfo FILE_INFO_BY_HANDLE_CLASS = 18
	FileIdExtdDirectoryInfo FILE_INFO_BY_HANDLE_CLASS = 19
	FileIdExtdDirectoryRestartInfo FILE_INFO_BY_HANDLE_CLASS = 20
	FileDispositionInfoEx FILE_INFO_BY_HANDLE_CLASS = 21
	FileRenameInfoEx FILE_INFO_BY_HANDLE_CLASS = 22
	FileCaseSensitiveInfo FILE_INFO_BY_HANDLE_CLASS = 23
	FileNormalizedNameInfo FILE_INFO_BY_HANDLE_CLASS = 24
	MaximumFileInfoByHandleClass FILE_INFO_BY_HANDLE_CLASS = 25
)

// enum STREAM_INFO_LEVELS
type STREAM_INFO_LEVELS int32
const (
	FindStreamInfoStandard STREAM_INFO_LEVELS = 0
	FindStreamInfoMaxInfoLevel STREAM_INFO_LEVELS = 1
)

// enum NtmsObjectsTypes
type NtmsObjectsTypes int32
const (
	NTMS_UNKNOWN NtmsObjectsTypes = 0
	NTMS_OBJECT NtmsObjectsTypes = 1
	NTMS_CHANGER NtmsObjectsTypes = 2
	NTMS_CHANGER_TYPE NtmsObjectsTypes = 3
	NTMS_COMPUTER NtmsObjectsTypes = 4
	NTMS_DRIVE NtmsObjectsTypes = 5
	NTMS_DRIVE_TYPE NtmsObjectsTypes = 6
	NTMS_IEDOOR NtmsObjectsTypes = 7
	NTMS_IEPORT NtmsObjectsTypes = 8
	NTMS_LIBRARY NtmsObjectsTypes = 9
	NTMS_LIBREQUEST NtmsObjectsTypes = 10
	NTMS_LOGICAL_MEDIA NtmsObjectsTypes = 11
	NTMS_MEDIA_POOL NtmsObjectsTypes = 12
	NTMS_MEDIA_TYPE NtmsObjectsTypes = 13
	NTMS_PARTITION NtmsObjectsTypes = 14
	NTMS_PHYSICAL_MEDIA NtmsObjectsTypes = 15
	NTMS_STORAGESLOT NtmsObjectsTypes = 16
	NTMS_OPREQUEST NtmsObjectsTypes = 17
	NTMS_UI_DESTINATION NtmsObjectsTypes = 18
	NTMS_NUMBER_OF_OBJECT_TYPES NtmsObjectsTypes = 19
)

// enum NtmsAsyncStatus
type NtmsAsyncStatus int32
const (
	NTMS_ASYNCSTATE_QUEUED NtmsAsyncStatus = 0
	NTMS_ASYNCSTATE_WAIT_RESOURCE NtmsAsyncStatus = 1
	NTMS_ASYNCSTATE_WAIT_OPERATOR NtmsAsyncStatus = 2
	NTMS_ASYNCSTATE_INPROCESS NtmsAsyncStatus = 3
	NTMS_ASYNCSTATE_COMPLETE NtmsAsyncStatus = 4
)

// enum NtmsAsyncOperations
type NtmsAsyncOperations int32
const (
	NTMS_ASYNCOP_MOUNT NtmsAsyncOperations = 1
)

// enum NtmsSessionOptions
type NtmsSessionOptions int32
const (
	NTMS_SESSION_QUERYEXPEDITE NtmsSessionOptions = 1
)

// enum NtmsMountOptions
type NtmsMountOptions int32
const (
	NTMS_MOUNT_READ NtmsMountOptions = 1
	NTMS_MOUNT_WRITE NtmsMountOptions = 2
	NTMS_MOUNT_ERROR_NOT_AVAILABLE NtmsMountOptions = 4
	NTMS_MOUNT_ERROR_IF_UNAVAILABLE NtmsMountOptions = 4
	NTMS_MOUNT_ERROR_OFFLINE NtmsMountOptions = 8
	NTMS_MOUNT_ERROR_IF_OFFLINE NtmsMountOptions = 8
	NTMS_MOUNT_SPECIFIC_DRIVE NtmsMountOptions = 16
	NTMS_MOUNT_NOWAIT NtmsMountOptions = 32
)

// enum NtmsDismountOptions
type NtmsDismountOptions int32
const (
	NTMS_DISMOUNT_DEFERRED NtmsDismountOptions = 1
	NTMS_DISMOUNT_IMMEDIATE NtmsDismountOptions = 2
)

// enum NtmsMountPriority
type NtmsMountPriority int32
const (
	NTMS_PRIORITY_DEFAULT NtmsMountPriority = 0
	NTMS_PRIORITY_HIGHEST NtmsMountPriority = 15
	NTMS_PRIORITY_HIGH NtmsMountPriority = 7
	NTMS_PRIORITY_NORMAL NtmsMountPriority = 0
	NTMS_PRIORITY_LOW NtmsMountPriority = -7
	NTMS_PRIORITY_LOWEST NtmsMountPriority = -15
)

// enum NtmsAllocateOptions
type NtmsAllocateOptions int32
const (
	NTMS_ALLOCATE_NEW NtmsAllocateOptions = 1
	NTMS_ALLOCATE_NEXT NtmsAllocateOptions = 2
	NTMS_ALLOCATE_ERROR_IF_UNAVAILABLE NtmsAllocateOptions = 4
)

// enum NtmsCreateOptions
type NtmsCreateOptions int32
const (
	NTMS_OPEN_EXISTING NtmsCreateOptions = 1
	NTMS_CREATE_NEW NtmsCreateOptions = 2
	NTMS_OPEN_ALWAYS NtmsCreateOptions = 3
)

// enum NtmsDriveState
type NtmsDriveState int32
const (
	NTMS_DRIVESTATE_DISMOUNTED NtmsDriveState = 0
	NTMS_DRIVESTATE_MOUNTED NtmsDriveState = 1
	NTMS_DRIVESTATE_LOADED NtmsDriveState = 2
	NTMS_DRIVESTATE_UNLOADED NtmsDriveState = 5
	NTMS_DRIVESTATE_BEING_CLEANED NtmsDriveState = 6
	NTMS_DRIVESTATE_DISMOUNTABLE NtmsDriveState = 7
)

// enum NtmsLibraryType
type NtmsLibraryType int32
const (
	NTMS_LIBRARYTYPE_UNKNOWN NtmsLibraryType = 0
	NTMS_LIBRARYTYPE_OFFLINE NtmsLibraryType = 1
	NTMS_LIBRARYTYPE_ONLINE NtmsLibraryType = 2
	NTMS_LIBRARYTYPE_STANDALONE NtmsLibraryType = 3
)

// enum NtmsLibraryFlags
type NtmsLibraryFlags int32
const (
	NTMS_LIBRARYFLAG_FIXEDOFFLINE NtmsLibraryFlags = 1
	NTMS_LIBRARYFLAG_CLEANERPRESENT NtmsLibraryFlags = 2
	NTMS_LIBRARYFLAG_AUTODETECTCHANGE NtmsLibraryFlags = 4
	NTMS_LIBRARYFLAG_IGNORECLEANERUSESREMAINING NtmsLibraryFlags = 8
	NTMS_LIBRARYFLAG_RECOGNIZECLEANERBARCODE NtmsLibraryFlags = 16
)

// enum NtmsInventoryMethod
type NtmsInventoryMethod int32
const (
	NTMS_INVENTORY_NONE NtmsInventoryMethod = 0
	NTMS_INVENTORY_FAST NtmsInventoryMethod = 1
	NTMS_INVENTORY_OMID NtmsInventoryMethod = 2
	NTMS_INVENTORY_DEFAULT NtmsInventoryMethod = 3
	NTMS_INVENTORY_SLOT NtmsInventoryMethod = 4
	NTMS_INVENTORY_STOP NtmsInventoryMethod = 5
	NTMS_INVENTORY_MAX NtmsInventoryMethod = 6
)

// enum NtmsSlotState
type NtmsSlotState int32
const (
	NTMS_SLOTSTATE_UNKNOWN NtmsSlotState = 0
	NTMS_SLOTSTATE_FULL NtmsSlotState = 1
	NTMS_SLOTSTATE_EMPTY NtmsSlotState = 2
	NTMS_SLOTSTATE_NOTPRESENT NtmsSlotState = 3
	NTMS_SLOTSTATE_NEEDSINVENTORY NtmsSlotState = 4
)

// enum NtmsDoorState
type NtmsDoorState int32
const (
	NTMS_DOORSTATE_UNKNOWN NtmsDoorState = 0
	NTMS_DOORSTATE_CLOSED NtmsDoorState = 1
	NTMS_DOORSTATE_OPEN NtmsDoorState = 2
)

// enum NtmsPortPosition
type NtmsPortPosition int32
const (
	NTMS_PORTPOSITION_UNKNOWN NtmsPortPosition = 0
	NTMS_PORTPOSITION_EXTENDED NtmsPortPosition = 1
	NTMS_PORTPOSITION_RETRACTED NtmsPortPosition = 2
)

// enum NtmsPortContent
type NtmsPortContent int32
const (
	NTMS_PORTCONTENT_UNKNOWN NtmsPortContent = 0
	NTMS_PORTCONTENT_FULL NtmsPortContent = 1
	NTMS_PORTCONTENT_EMPTY NtmsPortContent = 2
)

// enum NtmsBarCodeState
type NtmsBarCodeState int32
const (
	NTMS_BARCODESTATE_OK NtmsBarCodeState = 1
	NTMS_BARCODESTATE_UNREADABLE NtmsBarCodeState = 2
)

// enum NtmsMediaState
type NtmsMediaState int32
const (
	NTMS_MEDIASTATE_IDLE NtmsMediaState = 0
	NTMS_MEDIASTATE_INUSE NtmsMediaState = 1
	NTMS_MEDIASTATE_MOUNTED NtmsMediaState = 2
	NTMS_MEDIASTATE_LOADED NtmsMediaState = 3
	NTMS_MEDIASTATE_UNLOADED NtmsMediaState = 4
	NTMS_MEDIASTATE_OPERROR NtmsMediaState = 5
	NTMS_MEDIASTATE_OPREQ NtmsMediaState = 6
)

// enum NtmsPartitionState
type NtmsPartitionState int32
const (
	NTMS_PARTSTATE_UNKNOWN NtmsPartitionState = 0
	NTMS_PARTSTATE_UNPREPARED NtmsPartitionState = 1
	NTMS_PARTSTATE_INCOMPATIBLE NtmsPartitionState = 2
	NTMS_PARTSTATE_DECOMMISSIONED NtmsPartitionState = 3
	NTMS_PARTSTATE_AVAILABLE NtmsPartitionState = 4
	NTMS_PARTSTATE_ALLOCATED NtmsPartitionState = 5
	NTMS_PARTSTATE_COMPLETE NtmsPartitionState = 6
	NTMS_PARTSTATE_FOREIGN NtmsPartitionState = 7
	NTMS_PARTSTATE_IMPORT NtmsPartitionState = 8
	NTMS_PARTSTATE_RESERVED NtmsPartitionState = 9
)

// enum NtmsPoolType
type NtmsPoolType int32
const (
	NTMS_POOLTYPE_UNKNOWN NtmsPoolType = 0
	NTMS_POOLTYPE_SCRATCH NtmsPoolType = 1
	NTMS_POOLTYPE_FOREIGN NtmsPoolType = 2
	NTMS_POOLTYPE_IMPORT NtmsPoolType = 3
	NTMS_POOLTYPE_APPLICATION NtmsPoolType = 1000
)

// enum NtmsAllocationPolicy
type NtmsAllocationPolicy int32
const (
	NTMS_ALLOCATE_FROMSCRATCH NtmsAllocationPolicy = 1
)

// enum NtmsDeallocationPolicy
type NtmsDeallocationPolicy int32
const (
	NTMS_DEALLOCATE_TOSCRATCH NtmsDeallocationPolicy = 1
)

// enum NtmsReadWriteCharacteristics
type NtmsReadWriteCharacteristics int32
const (
	NTMS_MEDIARW_UNKNOWN NtmsReadWriteCharacteristics = 0
	NTMS_MEDIARW_REWRITABLE NtmsReadWriteCharacteristics = 1
	NTMS_MEDIARW_WRITEONCE NtmsReadWriteCharacteristics = 2
	NTMS_MEDIARW_READONLY NtmsReadWriteCharacteristics = 3
)

// enum NtmsLmOperation
type NtmsLmOperation int32
const (
	NTMS_LM_REMOVE NtmsLmOperation = 0
	NTMS_LM_DISABLECHANGER NtmsLmOperation = 1
	NTMS_LM_DISABLELIBRARY NtmsLmOperation = 1
	NTMS_LM_ENABLECHANGER NtmsLmOperation = 2
	NTMS_LM_ENABLELIBRARY NtmsLmOperation = 2
	NTMS_LM_DISABLEDRIVE NtmsLmOperation = 3
	NTMS_LM_ENABLEDRIVE NtmsLmOperation = 4
	NTMS_LM_DISABLEMEDIA NtmsLmOperation = 5
	NTMS_LM_ENABLEMEDIA NtmsLmOperation = 6
	NTMS_LM_UPDATEOMID NtmsLmOperation = 7
	NTMS_LM_INVENTORY NtmsLmOperation = 8
	NTMS_LM_DOORACCESS NtmsLmOperation = 9
	NTMS_LM_EJECT NtmsLmOperation = 10
	NTMS_LM_EJECTCLEANER NtmsLmOperation = 11
	NTMS_LM_INJECT NtmsLmOperation = 12
	NTMS_LM_INJECTCLEANER NtmsLmOperation = 13
	NTMS_LM_PROCESSOMID NtmsLmOperation = 14
	NTMS_LM_CLEANDRIVE NtmsLmOperation = 15
	NTMS_LM_DISMOUNT NtmsLmOperation = 16
	NTMS_LM_MOUNT NtmsLmOperation = 17
	NTMS_LM_WRITESCRATCH NtmsLmOperation = 18
	NTMS_LM_CLASSIFY NtmsLmOperation = 19
	NTMS_LM_RESERVECLEANER NtmsLmOperation = 20
	NTMS_LM_RELEASECLEANER NtmsLmOperation = 21
	NTMS_LM_MAXWORKITEM NtmsLmOperation = 22
)

// enum NtmsLmState
type NtmsLmState int32
const (
	NTMS_LM_QUEUED NtmsLmState = 0
	NTMS_LM_INPROCESS NtmsLmState = 1
	NTMS_LM_PASSED NtmsLmState = 2
	NTMS_LM_FAILED NtmsLmState = 3
	NTMS_LM_INVALID NtmsLmState = 4
	NTMS_LM_WAITING NtmsLmState = 5
	NTMS_LM_DEFERRED NtmsLmState = 6
	NTMS_LM_DEFFERED NtmsLmState = 6
	NTMS_LM_CANCELLED NtmsLmState = 7
	NTMS_LM_STOPPED NtmsLmState = 8
)

// enum NtmsOpreqCommand
type NtmsOpreqCommand int32
const (
	NTMS_OPREQ_UNKNOWN NtmsOpreqCommand = 0
	NTMS_OPREQ_NEWMEDIA NtmsOpreqCommand = 1
	NTMS_OPREQ_CLEANER NtmsOpreqCommand = 2
	NTMS_OPREQ_DEVICESERVICE NtmsOpreqCommand = 3
	NTMS_OPREQ_MOVEMEDIA NtmsOpreqCommand = 4
	NTMS_OPREQ_MESSAGE NtmsOpreqCommand = 5
)

// enum NtmsOpreqState
type NtmsOpreqState int32
const (
	NTMS_OPSTATE_UNKNOWN NtmsOpreqState = 0
	NTMS_OPSTATE_SUBMITTED NtmsOpreqState = 1
	NTMS_OPSTATE_ACTIVE NtmsOpreqState = 2
	NTMS_OPSTATE_INPROGRESS NtmsOpreqState = 3
	NTMS_OPSTATE_REFUSED NtmsOpreqState = 4
	NTMS_OPSTATE_COMPLETE NtmsOpreqState = 5
)

// enum NtmsLibRequestFlags
type NtmsLibRequestFlags int32
const (
	NTMS_LIBREQFLAGS_NOAUTOPURGE NtmsLibRequestFlags = 1
	NTMS_LIBREQFLAGS_NOFAILEDPURGE NtmsLibRequestFlags = 2
)

// enum NtmsOpRequestFlags
type NtmsOpRequestFlags int32
const (
	NTMS_OPREQFLAGS_NOAUTOPURGE NtmsOpRequestFlags = 1
	NTMS_OPREQFLAGS_NOFAILEDPURGE NtmsOpRequestFlags = 2
	NTMS_OPREQFLAGS_NOALERTS NtmsOpRequestFlags = 16
	NTMS_OPREQFLAGS_NOTRAYICON NtmsOpRequestFlags = 32
)

// enum NtmsMediaPoolPolicy
type NtmsMediaPoolPolicy int32
const (
	NTMS_POOLPOLICY_PURGEOFFLINESCRATCH NtmsMediaPoolPolicy = 1
	NTMS_POOLPOLICY_KEEPOFFLINEIMPORT NtmsMediaPoolPolicy = 2
)

// enum NtmsOperationalState
type NtmsOperationalState int32
const (
	NTMS_READY NtmsOperationalState = 0
	NTMS_INITIALIZING NtmsOperationalState = 10
	NTMS_NEEDS_SERVICE NtmsOperationalState = 20
	NTMS_NOT_PRESENT NtmsOperationalState = 21
)

// enum NtmsCreateNtmsMediaOptions
type NtmsCreateNtmsMediaOptions int32
const (
	NTMS_ERROR_ON_DUPLICATE NtmsCreateNtmsMediaOptions = 1
)

// enum NtmsEnumerateOption
type NtmsEnumerateOption int32
const (
	NTMS_ENUM_DEFAULT NtmsEnumerateOption = 0
	NTMS_ENUM_ROOTPOOL NtmsEnumerateOption = 1
)

// enum NtmsEjectOperation
type NtmsEjectOperation int32
const (
	NTMS_EJECT_START NtmsEjectOperation = 0
	NTMS_EJECT_STOP NtmsEjectOperation = 1
	NTMS_EJECT_QUEUE NtmsEjectOperation = 2
	NTMS_EJECT_FORCE NtmsEjectOperation = 3
	NTMS_EJECT_IMMEDIATE NtmsEjectOperation = 4
	NTMS_EJECT_ASK_USER NtmsEjectOperation = 5
)

// enum NtmsInjectOperation
type NtmsInjectOperation int32
const (
	NTMS_INJECT_START NtmsInjectOperation = 0
	NTMS_INJECT_STOP NtmsInjectOperation = 1
	NTMS_INJECT_RETRACT NtmsInjectOperation = 2
	NTMS_INJECT_STARTMANY NtmsInjectOperation = 3
)

// enum NtmsDriveType
type NtmsDriveType int32
const (
	NTMS_UNKNOWN_DRIVE NtmsDriveType = 0
)

// enum NtmsAccessMask
type NtmsAccessMask int32
const (
	NTMS_USE_ACCESS NtmsAccessMask = 1
	NTMS_MODIFY_ACCESS NtmsAccessMask = 2
	NTMS_CONTROL_ACCESS NtmsAccessMask = 4
)

// enum NtmsUITypes
type NtmsUITypes int32
const (
	NTMS_UITYPE_INVALID NtmsUITypes = 0
	NTMS_UITYPE_INFO NtmsUITypes = 1
	NTMS_UITYPE_REQ NtmsUITypes = 2
	NTMS_UITYPE_ERR NtmsUITypes = 3
	NTMS_UITYPE_MAX NtmsUITypes = 4
)

// enum NtmsUIOperations
type NtmsUIOperations int32
const (
	NTMS_UIDEST_ADD NtmsUIOperations = 1
	NTMS_UIDEST_DELETE NtmsUIOperations = 2
	NTMS_UIDEST_DELETEALL NtmsUIOperations = 3
	NTMS_UIOPERATION_MAX NtmsUIOperations = 4
)

// enum NtmsNotificationOperations
type NtmsNotificationOperations int32
const (
	NTMS_OBJ_UPDATE NtmsNotificationOperations = 1
	NTMS_OBJ_INSERT NtmsNotificationOperations = 2
	NTMS_OBJ_DELETE NtmsNotificationOperations = 3
	NTMS_EVENT_SIGNAL NtmsNotificationOperations = 4
	NTMS_EVENT_COMPLETE NtmsNotificationOperations = 5
)

// enum CLS_CONTEXT_MODE
type CLS_CONTEXT_MODE int32
const (
	ClsContextNone CLS_CONTEXT_MODE = 0
	ClsContextUndoNext CLS_CONTEXT_MODE = 1
	ClsContextPrevious CLS_CONTEXT_MODE = 2
	ClsContextForward CLS_CONTEXT_MODE = 3
)

// enum CLFS_CONTEXT_MODE
type CLFS_CONTEXT_MODE int32
const (
	ClfsContextNone CLFS_CONTEXT_MODE = 0
	ClfsContextUndoNext CLFS_CONTEXT_MODE = 1
	ClfsContextPrevious CLFS_CONTEXT_MODE = 2
	ClfsContextForward CLFS_CONTEXT_MODE = 3
)

// enum CLS_LOG_INFORMATION_CLASS
type CLS_LOG_INFORMATION_CLASS int32
const (
	ClfsLogBasicInformation CLS_LOG_INFORMATION_CLASS = 0
	ClfsLogBasicInformationPhysical CLS_LOG_INFORMATION_CLASS = 1
	ClfsLogPhysicalNameInformation CLS_LOG_INFORMATION_CLASS = 2
	ClfsLogStreamIdentifierInformation CLS_LOG_INFORMATION_CLASS = 3
	ClfsLogSystemMarkingInformation CLS_LOG_INFORMATION_CLASS = 4
	ClfsLogPhysicalLsnInformation CLS_LOG_INFORMATION_CLASS = 5
)

// enum CLS_IOSTATS_CLASS
type CLS_IOSTATS_CLASS int32
const (
	ClsIoStatsDefault CLS_IOSTATS_CLASS = 0
	ClsIoStatsMax CLS_IOSTATS_CLASS = 65535
)

// enum CLFS_IOSTATS_CLASS
type CLFS_IOSTATS_CLASS int32
const (
	ClfsIoStatsDefault CLFS_IOSTATS_CLASS = 0
	ClfsIoStatsMax CLFS_IOSTATS_CLASS = 65535
)

// enum CLFS_LOG_ARCHIVE_MODE
type CLFS_LOG_ARCHIVE_MODE int32
const (
	ClfsLogArchiveEnabled CLFS_LOG_ARCHIVE_MODE = 1
	ClfsLogArchiveDisabled CLFS_LOG_ARCHIVE_MODE = 2
)

// enum CLFS_MGMT_POLICY_TYPE
type CLFS_MGMT_POLICY_TYPE int32
const (
	ClfsMgmtPolicyMaximumSize CLFS_MGMT_POLICY_TYPE = 0
	ClfsMgmtPolicyMinimumSize CLFS_MGMT_POLICY_TYPE = 1
	ClfsMgmtPolicyNewContainerSize CLFS_MGMT_POLICY_TYPE = 2
	ClfsMgmtPolicyGrowthRate CLFS_MGMT_POLICY_TYPE = 3
	ClfsMgmtPolicyLogTail CLFS_MGMT_POLICY_TYPE = 4
	ClfsMgmtPolicyAutoShrink CLFS_MGMT_POLICY_TYPE = 5
	ClfsMgmtPolicyAutoGrow CLFS_MGMT_POLICY_TYPE = 6
	ClfsMgmtPolicyNewContainerPrefix CLFS_MGMT_POLICY_TYPE = 7
	ClfsMgmtPolicyNewContainerSuffix CLFS_MGMT_POLICY_TYPE = 8
	ClfsMgmtPolicyNewContainerExtension CLFS_MGMT_POLICY_TYPE = 9
	ClfsMgmtPolicyInvalid CLFS_MGMT_POLICY_TYPE = 10
)

// enum CLFS_MGMT_NOTIFICATION_TYPE
type CLFS_MGMT_NOTIFICATION_TYPE int32
const (
	ClfsMgmtAdvanceTailNotification CLFS_MGMT_NOTIFICATION_TYPE = 0
	ClfsMgmtLogFullHandlerNotification CLFS_MGMT_NOTIFICATION_TYPE = 1
	ClfsMgmtLogUnpinnedNotification CLFS_MGMT_NOTIFICATION_TYPE = 2
	ClfsMgmtLogWriteNotification CLFS_MGMT_NOTIFICATION_TYPE = 3
)

// enum SERVER_CERTIFICATE_TYPE
type SERVER_CERTIFICATE_TYPE int32
const (
	QUIC SERVER_CERTIFICATE_TYPE = 0
)

// enum IORING_VERSION
type IORING_VERSION int32
const (
	IORING_VERSION_INVALID IORING_VERSION = 0
	IORING_VERSION_1 IORING_VERSION = 1
)

// enum IORING_FEATURE_FLAGS
type IORING_FEATURE_FLAGS int32
const (
	IORING_FEATURE_FLAGS_NONE IORING_FEATURE_FLAGS = 0
	IORING_FEATURE_UM_EMULATION IORING_FEATURE_FLAGS = 1
	IORING_FEATURE_SET_COMPLETION_EVENT IORING_FEATURE_FLAGS = 2
)

// enum IORING_OP_CODE
type IORING_OP_CODE int32
const (
	IORING_OP_NOP IORING_OP_CODE = 0
	IORING_OP_READ IORING_OP_CODE = 1
	IORING_OP_REGISTER_FILES IORING_OP_CODE = 2
	IORING_OP_REGISTER_BUFFERS IORING_OP_CODE = 3
	IORING_OP_CANCEL IORING_OP_CODE = 4
)

// enum IORING_SQE_FLAGS
type IORING_SQE_FLAGS int32
const (
	IOSQE_FLAGS_NONE IORING_SQE_FLAGS = 0
)

// enum IORING_CREATE_REQUIRED_FLAGS
type IORING_CREATE_REQUIRED_FLAGS int32
const (
	IORING_CREATE_REQUIRED_FLAGS_NONE IORING_CREATE_REQUIRED_FLAGS = 0
)

// enum IORING_CREATE_ADVISORY_FLAGS
type IORING_CREATE_ADVISORY_FLAGS int32
const (
	IORING_CREATE_ADVISORY_FLAGS_NONE IORING_CREATE_ADVISORY_FLAGS = 0
)

// enum IORING_REF_KIND
type IORING_REF_KIND int32
const (
	IORING_REF_RAW IORING_REF_KIND = 0
	IORING_REF_REGISTERED IORING_REF_KIND = 1
)

// enum TRANSACTION_OUTCOME
type TRANSACTION_OUTCOME int32
const (
	TransactionOutcomeUndetermined TRANSACTION_OUTCOME = 1
	TransactionOutcomeCommitted TRANSACTION_OUTCOME = 2
	TransactionOutcomeAborted TRANSACTION_OUTCOME = 3
)

// enum STORAGE_BUS_TYPE
type STORAGE_BUS_TYPE int32
const (
	BusTypeUnknown STORAGE_BUS_TYPE = 0
	BusTypeScsi STORAGE_BUS_TYPE = 1
	BusTypeAtapi STORAGE_BUS_TYPE = 2
	BusTypeAta STORAGE_BUS_TYPE = 3
	BusType1394 STORAGE_BUS_TYPE = 4
	BusTypeSsa STORAGE_BUS_TYPE = 5
	BusTypeFibre STORAGE_BUS_TYPE = 6
	BusTypeUsb STORAGE_BUS_TYPE = 7
	BusTypeRAID STORAGE_BUS_TYPE = 8
	BusTypeiScsi STORAGE_BUS_TYPE = 9
	BusTypeSas STORAGE_BUS_TYPE = 10
	BusTypeSata STORAGE_BUS_TYPE = 11
	BusTypeSd STORAGE_BUS_TYPE = 12
	BusTypeMmc STORAGE_BUS_TYPE = 13
	BusTypeVirtual STORAGE_BUS_TYPE = 14
	BusTypeFileBackedVirtual STORAGE_BUS_TYPE = 15
	BusTypeSpaces STORAGE_BUS_TYPE = 16
	BusTypeNvme STORAGE_BUS_TYPE = 17
	BusTypeSCM STORAGE_BUS_TYPE = 18
	BusTypeUfs STORAGE_BUS_TYPE = 19
	BusTypeMax STORAGE_BUS_TYPE = 20
	BusTypeMaxReserved STORAGE_BUS_TYPE = 127
)

// enum COPYFILE2_MESSAGE_TYPE
type COPYFILE2_MESSAGE_TYPE int32
const (
	COPYFILE2_CALLBACK_NONE COPYFILE2_MESSAGE_TYPE = 0
	COPYFILE2_CALLBACK_CHUNK_STARTED COPYFILE2_MESSAGE_TYPE = 1
	COPYFILE2_CALLBACK_CHUNK_FINISHED COPYFILE2_MESSAGE_TYPE = 2
	COPYFILE2_CALLBACK_STREAM_STARTED COPYFILE2_MESSAGE_TYPE = 3
	COPYFILE2_CALLBACK_STREAM_FINISHED COPYFILE2_MESSAGE_TYPE = 4
	COPYFILE2_CALLBACK_POLL_CONTINUE COPYFILE2_MESSAGE_TYPE = 5
	COPYFILE2_CALLBACK_ERROR COPYFILE2_MESSAGE_TYPE = 6
	COPYFILE2_CALLBACK_MAX COPYFILE2_MESSAGE_TYPE = 7
)

// enum COPYFILE2_MESSAGE_ACTION
type COPYFILE2_MESSAGE_ACTION int32
const (
	COPYFILE2_PROGRESS_CONTINUE COPYFILE2_MESSAGE_ACTION = 0
	COPYFILE2_PROGRESS_CANCEL COPYFILE2_MESSAGE_ACTION = 1
	COPYFILE2_PROGRESS_STOP COPYFILE2_MESSAGE_ACTION = 2
	COPYFILE2_PROGRESS_QUIET COPYFILE2_MESSAGE_ACTION = 3
	COPYFILE2_PROGRESS_PAUSE COPYFILE2_MESSAGE_ACTION = 4
)

// enum COPYFILE2_COPY_PHASE
type COPYFILE2_COPY_PHASE int32
const (
	COPYFILE2_PHASE_NONE COPYFILE2_COPY_PHASE = 0
	COPYFILE2_PHASE_PREPARE_SOURCE COPYFILE2_COPY_PHASE = 1
	COPYFILE2_PHASE_PREPARE_DEST COPYFILE2_COPY_PHASE = 2
	COPYFILE2_PHASE_READ_SOURCE COPYFILE2_COPY_PHASE = 3
	COPYFILE2_PHASE_WRITE_DESTINATION COPYFILE2_COPY_PHASE = 4
	COPYFILE2_PHASE_SERVER_COPY COPYFILE2_COPY_PHASE = 5
	COPYFILE2_PHASE_NAMEGRAFT_COPY COPYFILE2_COPY_PHASE = 6
	COPYFILE2_PHASE_MAX COPYFILE2_COPY_PHASE = 7
)

// enum PRIORITY_HINT
type PRIORITY_HINT int32
const (
	IoPriorityHintVeryLow PRIORITY_HINT = 0
	IoPriorityHintLow PRIORITY_HINT = 1
	IoPriorityHintNormal PRIORITY_HINT = 2
	MaximumIoPriorityHintType PRIORITY_HINT = 3
)

// enum FILE_ID_TYPE
type FILE_ID_TYPE int32
const (
	FileIdType FILE_ID_TYPE = 0
	ObjectIdType FILE_ID_TYPE = 1
	ExtendedFileIdType FILE_ID_TYPE = 2
	MaximumFileIdType FILE_ID_TYPE = 3
)


// structs

type WIN32_FIND_DATAA struct {
	DwFileAttributes uint32
	FtCreationTime FILETIME
	FtLastAccessTime FILETIME
	FtLastWriteTime FILETIME
	NFileSizeHigh uint32
	NFileSizeLow uint32
	DwReserved0 uint32
	DwReserved1 uint32
	CFileName [260]CHAR
	CAlternateFileName [14]CHAR
}

type WIN32_FIND_DATA = WIN32_FIND_DATAW
type WIN32_FIND_DATAW struct {
	DwFileAttributes uint32
	FtCreationTime FILETIME
	FtLastAccessTime FILETIME
	FtLastWriteTime FILETIME
	NFileSizeHigh uint32
	NFileSizeLow uint32
	DwReserved0 uint32
	DwReserved1 uint32
	CFileName [260]uint16
	CAlternateFileName [14]uint16
}

type TRANSACTION_NOTIFICATION struct {
	TransactionKey unsafe.Pointer
	TransactionNotification uint32
	TmVirtualClock int64
	ArgumentLength uint32
}

type TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT struct {
	EnlistmentId syscall.GUID
	UOW syscall.GUID
}

type TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT struct {
	TmIdentity syscall.GUID
	Flags uint32
}

type TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT struct {
	SavepointId uint32
}

type TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT struct {
	PropagationCookie uint32
	UOW syscall.GUID
	TmIdentity syscall.GUID
	BufferLength uint32
}

type TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT struct {
	MarshalCookie uint32
	UOW syscall.GUID
}

type KCRM_MARSHAL_HEADER struct {
	VersionMajor uint32
	VersionMinor uint32
	NumProtocols uint32
	Unused uint32
}

type KCRM_TRANSACTION_BLOB struct {
	UOW syscall.GUID
	TmIdentity syscall.GUID
	IsolationLevel uint32
	IsolationFlags uint32
	Timeout uint32
	Description [64]uint16
}

type KCRM_PROTOCOL_BLOB struct {
	ProtocolId syscall.GUID
	StaticInfoLength uint32
	TransactionIdInfoLength uint32
	Unused1 uint32
	Unused2 uint32
}

type DISK_SPACE_INFORMATION struct {
	ActualTotalAllocationUnits uint64
	ActualAvailableAllocationUnits uint64
	ActualPoolUnavailableAllocationUnits uint64
	CallerTotalAllocationUnits uint64
	CallerAvailableAllocationUnits uint64
	CallerPoolUnavailableAllocationUnits uint64
	UsedAllocationUnits uint64
	TotalReservedAllocationUnits uint64
	VolumeStorageReserveAllocationUnits uint64
	AvailableCommittedAllocationUnits uint64
	PoolAvailableAllocationUnits uint64
	SectorsPerAllocationUnit uint32
	BytesPerSector uint32
}

type WIN32_FILE_ATTRIBUTE_DATA struct {
	DwFileAttributes uint32
	FtCreationTime FILETIME
	FtLastAccessTime FILETIME
	FtLastWriteTime FILETIME
	NFileSizeHigh uint32
	NFileSizeLow uint32
}

type BY_HANDLE_FILE_INFORMATION struct {
	DwFileAttributes uint32
	FtCreationTime FILETIME
	FtLastAccessTime FILETIME
	FtLastWriteTime FILETIME
	DwVolumeSerialNumber uint32
	NFileSizeHigh uint32
	NFileSizeLow uint32
	NNumberOfLinks uint32
	NFileIndexHigh uint32
	NFileIndexLow uint32
}

type CREATEFILE2_EXTENDED_PARAMETERS struct {
	DwSize uint32
	DwFileAttributes uint32
	DwFileFlags uint32
	DwSecurityQosFlags uint32
	LpSecurityAttributes *SECURITY_ATTRIBUTES
	HTemplateFile HANDLE
}

type WIN32_FIND_STREAM_DATA struct {
	StreamSize int64
	CStreamName [296]uint16
}

type VS_FIXEDFILEINFO struct {
	DwSignature uint32
	DwStrucVersion uint32
	DwFileVersionMS uint32
	DwFileVersionLS uint32
	DwProductVersionMS uint32
	DwProductVersionLS uint32
	DwFileFlagsMask uint32
	DwFileFlags VS_FIXEDFILEINFO_FILE_FLAGS
	DwFileOS VS_FIXEDFILEINFO_FILE_OS
	DwFileType VS_FIXEDFILEINFO_FILE_TYPE
	DwFileSubtype VS_FIXEDFILEINFO_FILE_SUBTYPE
	DwFileDateMS uint32
	DwFileDateLS uint32
}

type NTMS_ASYNC_IO struct {
	OperationId syscall.GUID
	EventId syscall.GUID
	DwOperationType uint32
	DwResult uint32
	DwAsyncState uint32
	HEvent HANDLE
	BOnStateChange BOOL
}

type NTMS_MOUNT_INFORMATION struct {
	DwSize uint32
	LpReserved unsafe.Pointer
}

type NTMS_ALLOCATION_INFORMATION struct {
	DwSize uint32
	LpReserved unsafe.Pointer
	AllocatedFrom syscall.GUID
}

type NTMS_DRIVEINFORMATIONA struct {
	Number uint32
	State NtmsDriveState
	DriveType syscall.GUID
	SzDeviceName [64]CHAR
	SzSerialNumber [32]CHAR
	SzRevision [32]CHAR
	ScsiPort uint16
	ScsiBus uint16
	ScsiTarget uint16
	ScsiLun uint16
	DwMountCount uint32
	LastCleanedTs SYSTEMTIME
	SavedPartitionId syscall.GUID
	Library syscall.GUID
	Reserved syscall.GUID
	DwDeferDismountDelay uint32
}

type NTMS_DRIVEINFORMATION = NTMS_DRIVEINFORMATIONW
type NTMS_DRIVEINFORMATIONW struct {
	Number uint32
	State NtmsDriveState
	DriveType syscall.GUID
	SzDeviceName [64]uint16
	SzSerialNumber [32]uint16
	SzRevision [32]uint16
	ScsiPort uint16
	ScsiBus uint16
	ScsiTarget uint16
	ScsiLun uint16
	DwMountCount uint32
	LastCleanedTs SYSTEMTIME
	SavedPartitionId syscall.GUID
	Library syscall.GUID
	Reserved syscall.GUID
	DwDeferDismountDelay uint32
}

type NTMS_LIBRARYINFORMATION struct {
	LibraryType NtmsLibraryType
	CleanerSlot syscall.GUID
	CleanerSlotDefault syscall.GUID
	LibrarySupportsDriveCleaning BOOL
	BarCodeReaderInstalled BOOL
	InventoryMethod NtmsInventoryMethod
	DwCleanerUsesRemaining uint32
	FirstDriveNumber uint32
	DwNumberOfDrives uint32
	FirstSlotNumber uint32
	DwNumberOfSlots uint32
	FirstDoorNumber uint32
	DwNumberOfDoors uint32
	FirstPortNumber uint32
	DwNumberOfPorts uint32
	FirstChangerNumber uint32
	DwNumberOfChangers uint32
	DwNumberOfMedia uint32
	DwNumberOfMediaTypes uint32
	DwNumberOfLibRequests uint32
	Reserved syscall.GUID
	AutoRecovery BOOL
	DwFlags NtmsLibraryFlags
}

type NTMS_CHANGERINFORMATIONA struct {
	Number uint32
	ChangerType syscall.GUID
	SzSerialNumber [32]CHAR
	SzRevision [32]CHAR
	SzDeviceName [64]CHAR
	ScsiPort uint16
	ScsiBus uint16
	ScsiTarget uint16
	ScsiLun uint16
	Library syscall.GUID
}

type NTMS_CHANGERINFORMATION = NTMS_CHANGERINFORMATIONW
type NTMS_CHANGERINFORMATIONW struct {
	Number uint32
	ChangerType syscall.GUID
	SzSerialNumber [32]uint16
	SzRevision [32]uint16
	SzDeviceName [64]uint16
	ScsiPort uint16
	ScsiBus uint16
	ScsiTarget uint16
	ScsiLun uint16
	Library syscall.GUID
}

type NTMS_STORAGESLOTINFORMATION struct {
	Number uint32
	State uint32
	Library syscall.GUID
}

type NTMS_IEDOORINFORMATION struct {
	Number uint32
	State NtmsDoorState
	MaxOpenSecs uint16
	Library syscall.GUID
}

type NTMS_IEPORTINFORMATION struct {
	Number uint32
	Content NtmsPortContent
	Position NtmsPortPosition
	MaxExtendSecs uint16
	Library syscall.GUID
}

type NTMS_PMIDINFORMATIONA struct {
	CurrentLibrary syscall.GUID
	MediaPool syscall.GUID
	Location syscall.GUID
	LocationType uint32
	MediaType syscall.GUID
	HomeSlot syscall.GUID
	SzBarCode [64]CHAR
	BarCodeState NtmsBarCodeState
	SzSequenceNumber [32]CHAR
	MediaState NtmsMediaState
	DwNumberOfPartitions uint32
	DwMediaTypeCode uint32
	DwDensityCode uint32
	MountedPartition syscall.GUID
}

type NTMS_PMIDINFORMATION = NTMS_PMIDINFORMATIONW
type NTMS_PMIDINFORMATIONW struct {
	CurrentLibrary syscall.GUID
	MediaPool syscall.GUID
	Location syscall.GUID
	LocationType uint32
	MediaType syscall.GUID
	HomeSlot syscall.GUID
	SzBarCode [64]uint16
	BarCodeState NtmsBarCodeState
	SzSequenceNumber [32]uint16
	MediaState NtmsMediaState
	DwNumberOfPartitions uint32
	DwMediaTypeCode uint32
	DwDensityCode uint32
	MountedPartition syscall.GUID
}

type NTMS_LMIDINFORMATION struct {
	MediaPool syscall.GUID
	DwNumberOfPartitions uint32
}

type NTMS_PARTITIONINFORMATIONA struct {
	PhysicalMedia syscall.GUID
	LogicalMedia syscall.GUID
	State NtmsPartitionState
	Side uint16
	DwOmidLabelIdLength uint32
	OmidLabelId [255]uint8
	SzOmidLabelType [64]CHAR
	SzOmidLabelInfo [256]CHAR
	DwMountCount uint32
	DwAllocateCount uint32
	Capacity int64
}

type NTMS_PARTITIONINFORMATION = NTMS_PARTITIONINFORMATIONW
type NTMS_PARTITIONINFORMATIONW struct {
	PhysicalMedia syscall.GUID
	LogicalMedia syscall.GUID
	State NtmsPartitionState
	Side uint16
	DwOmidLabelIdLength uint32
	OmidLabelId [255]uint8
	SzOmidLabelType [64]uint16
	SzOmidLabelInfo [256]uint16
	DwMountCount uint32
	DwAllocateCount uint32
	Capacity int64
}

type NTMS_MEDIAPOOLINFORMATION struct {
	PoolType uint32
	MediaType syscall.GUID
	Parent syscall.GUID
	AllocationPolicy uint32
	DeallocationPolicy uint32
	DwMaxAllocates uint32
	DwNumberOfPhysicalMedia uint32
	DwNumberOfLogicalMedia uint32
	DwNumberOfMediaPools uint32
}

type NTMS_MEDIATYPEINFORMATION struct {
	MediaType uint32
	NumberOfSides uint32
	ReadWriteCharacteristics NtmsReadWriteCharacteristics
	DeviceType FILE_DEVICE_TYPE
}

type NTMS_DRIVETYPEINFORMATIONA struct {
	SzVendor [128]CHAR
	SzProduct [128]CHAR
	NumberOfHeads uint32
	DeviceType FILE_DEVICE_TYPE
}

type NTMS_DRIVETYPEINFORMATION = NTMS_DRIVETYPEINFORMATIONW
type NTMS_DRIVETYPEINFORMATIONW struct {
	SzVendor [128]uint16
	SzProduct [128]uint16
	NumberOfHeads uint32
	DeviceType FILE_DEVICE_TYPE
}

type NTMS_CHANGERTYPEINFORMATIONA struct {
	SzVendor [128]CHAR
	SzProduct [128]CHAR
	DeviceType uint32
}

type NTMS_CHANGERTYPEINFORMATION = NTMS_CHANGERTYPEINFORMATIONW
type NTMS_CHANGERTYPEINFORMATIONW struct {
	SzVendor [128]uint16
	SzProduct [128]uint16
	DeviceType uint32
}

type NTMS_LIBREQUESTINFORMATIONA struct {
	OperationCode NtmsLmOperation
	OperationOption uint32
	State NtmsLmState
	PartitionId syscall.GUID
	DriveId syscall.GUID
	PhysMediaId syscall.GUID
	Library syscall.GUID
	SlotId syscall.GUID
	TimeQueued SYSTEMTIME
	TimeCompleted SYSTEMTIME
	SzApplication [64]CHAR
	SzUser [64]CHAR
	SzComputer [64]CHAR
	DwErrorCode uint32
	WorkItemId syscall.GUID
	DwPriority uint32
}

type NTMS_LIBREQUESTINFORMATION = NTMS_LIBREQUESTINFORMATIONW
type NTMS_LIBREQUESTINFORMATIONW struct {
	OperationCode NtmsLmOperation
	OperationOption uint32
	State NtmsLmState
	PartitionId syscall.GUID
	DriveId syscall.GUID
	PhysMediaId syscall.GUID
	Library syscall.GUID
	SlotId syscall.GUID
	TimeQueued SYSTEMTIME
	TimeCompleted SYSTEMTIME
	SzApplication [64]uint16
	SzUser [64]uint16
	SzComputer [64]uint16
	DwErrorCode uint32
	WorkItemId syscall.GUID
	DwPriority uint32
}

type NTMS_OPREQUESTINFORMATIONA struct {
	Request NtmsOpreqCommand
	Submitted SYSTEMTIME
	State NtmsOpreqState
	SzMessage [256]CHAR
	Arg1Type NtmsObjectsTypes
	Arg1 syscall.GUID
	Arg2Type NtmsObjectsTypes
	Arg2 syscall.GUID
	SzApplication [64]CHAR
	SzUser [64]CHAR
	SzComputer [64]CHAR
}

type NTMS_OPREQUESTINFORMATION = NTMS_OPREQUESTINFORMATIONW
type NTMS_OPREQUESTINFORMATIONW struct {
	Request NtmsOpreqCommand
	Submitted SYSTEMTIME
	State NtmsOpreqState
	SzMessage [256]uint16
	Arg1Type NtmsObjectsTypes
	Arg1 syscall.GUID
	Arg2Type NtmsObjectsTypes
	Arg2 syscall.GUID
	SzApplication [64]uint16
	SzUser [64]uint16
	SzComputer [64]uint16
}

type NTMS_COMPUTERINFORMATION struct {
	DwLibRequestPurgeTime uint32
	DwOpRequestPurgeTime uint32
	DwLibRequestFlags uint32
	DwOpRequestFlags uint32
	DwMediaPoolPolicy uint32
}

type NTMS_OBJECTINFORMATIONA_Info_ struct {
	Data [80]uint64
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) Drive() *NTMS_DRIVEINFORMATIONA{
	return (*NTMS_DRIVEINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) DriveVal() NTMS_DRIVEINFORMATIONA{
	return *(*NTMS_DRIVEINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) DriveType() *NTMS_DRIVETYPEINFORMATIONA{
	return (*NTMS_DRIVETYPEINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) DriveTypeVal() NTMS_DRIVETYPEINFORMATIONA{
	return *(*NTMS_DRIVETYPEINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) Library() *NTMS_LIBRARYINFORMATION{
	return (*NTMS_LIBRARYINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) LibraryVal() NTMS_LIBRARYINFORMATION{
	return *(*NTMS_LIBRARYINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) Changer() *NTMS_CHANGERINFORMATIONA{
	return (*NTMS_CHANGERINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) ChangerVal() NTMS_CHANGERINFORMATIONA{
	return *(*NTMS_CHANGERINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) ChangerType() *NTMS_CHANGERTYPEINFORMATIONA{
	return (*NTMS_CHANGERTYPEINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) ChangerTypeVal() NTMS_CHANGERTYPEINFORMATIONA{
	return *(*NTMS_CHANGERTYPEINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) StorageSlot() *NTMS_STORAGESLOTINFORMATION{
	return (*NTMS_STORAGESLOTINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) StorageSlotVal() NTMS_STORAGESLOTINFORMATION{
	return *(*NTMS_STORAGESLOTINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) IEDoor() *NTMS_IEDOORINFORMATION{
	return (*NTMS_IEDOORINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) IEDoorVal() NTMS_IEDOORINFORMATION{
	return *(*NTMS_IEDOORINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) IEPort() *NTMS_IEPORTINFORMATION{
	return (*NTMS_IEPORTINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) IEPortVal() NTMS_IEPORTINFORMATION{
	return *(*NTMS_IEPORTINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) PhysicalMedia() *NTMS_PMIDINFORMATIONA{
	return (*NTMS_PMIDINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) PhysicalMediaVal() NTMS_PMIDINFORMATIONA{
	return *(*NTMS_PMIDINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) LogicalMedia() *NTMS_LMIDINFORMATION{
	return (*NTMS_LMIDINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) LogicalMediaVal() NTMS_LMIDINFORMATION{
	return *(*NTMS_LMIDINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) Partition() *NTMS_PARTITIONINFORMATIONA{
	return (*NTMS_PARTITIONINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) PartitionVal() NTMS_PARTITIONINFORMATIONA{
	return *(*NTMS_PARTITIONINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) MediaPool() *NTMS_MEDIAPOOLINFORMATION{
	return (*NTMS_MEDIAPOOLINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) MediaPoolVal() NTMS_MEDIAPOOLINFORMATION{
	return *(*NTMS_MEDIAPOOLINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) MediaType() *NTMS_MEDIATYPEINFORMATION{
	return (*NTMS_MEDIATYPEINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) MediaTypeVal() NTMS_MEDIATYPEINFORMATION{
	return *(*NTMS_MEDIATYPEINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) LibRequest() *NTMS_LIBREQUESTINFORMATIONA{
	return (*NTMS_LIBREQUESTINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) LibRequestVal() NTMS_LIBREQUESTINFORMATIONA{
	return *(*NTMS_LIBREQUESTINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) OpRequest() *NTMS_OPREQUESTINFORMATIONA{
	return (*NTMS_OPREQUESTINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) OpRequestVal() NTMS_OPREQUESTINFORMATIONA{
	return *(*NTMS_OPREQUESTINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) Computer() *NTMS_COMPUTERINFORMATION{
	return (*NTMS_COMPUTERINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONA_Info_) ComputerVal() NTMS_COMPUTERINFORMATION{
	return *(*NTMS_COMPUTERINFORMATION)(unsafe.Pointer(this))
}

type NTMS_OBJECTINFORMATIONA struct {
	DwSize uint32
	DwType NtmsObjectsTypes
	Created SYSTEMTIME
	Modified SYSTEMTIME
	ObjectGuid syscall.GUID
	Enabled BOOL
	DwOperationalState NtmsOperationalState
	SzName [64]CHAR
	SzDescription [127]CHAR
	Info NTMS_OBJECTINFORMATIONA_Info_
}

type NTMS_OBJECTINFORMATIONW_Info_ struct {
	Data [80]uint64
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) Drive() *NTMS_DRIVEINFORMATIONW{
	return (*NTMS_DRIVEINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) DriveVal() NTMS_DRIVEINFORMATIONW{
	return *(*NTMS_DRIVEINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) DriveType() *NTMS_DRIVETYPEINFORMATIONW{
	return (*NTMS_DRIVETYPEINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) DriveTypeVal() NTMS_DRIVETYPEINFORMATIONW{
	return *(*NTMS_DRIVETYPEINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) Library() *NTMS_LIBRARYINFORMATION{
	return (*NTMS_LIBRARYINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) LibraryVal() NTMS_LIBRARYINFORMATION{
	return *(*NTMS_LIBRARYINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) Changer() *NTMS_CHANGERINFORMATIONW{
	return (*NTMS_CHANGERINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) ChangerVal() NTMS_CHANGERINFORMATIONW{
	return *(*NTMS_CHANGERINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) ChangerType() *NTMS_CHANGERTYPEINFORMATIONW{
	return (*NTMS_CHANGERTYPEINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) ChangerTypeVal() NTMS_CHANGERTYPEINFORMATIONW{
	return *(*NTMS_CHANGERTYPEINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) StorageSlot() *NTMS_STORAGESLOTINFORMATION{
	return (*NTMS_STORAGESLOTINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) StorageSlotVal() NTMS_STORAGESLOTINFORMATION{
	return *(*NTMS_STORAGESLOTINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) IEDoor() *NTMS_IEDOORINFORMATION{
	return (*NTMS_IEDOORINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) IEDoorVal() NTMS_IEDOORINFORMATION{
	return *(*NTMS_IEDOORINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) IEPort() *NTMS_IEPORTINFORMATION{
	return (*NTMS_IEPORTINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) IEPortVal() NTMS_IEPORTINFORMATION{
	return *(*NTMS_IEPORTINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) PhysicalMedia() *NTMS_PMIDINFORMATIONW{
	return (*NTMS_PMIDINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) PhysicalMediaVal() NTMS_PMIDINFORMATIONW{
	return *(*NTMS_PMIDINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) LogicalMedia() *NTMS_LMIDINFORMATION{
	return (*NTMS_LMIDINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) LogicalMediaVal() NTMS_LMIDINFORMATION{
	return *(*NTMS_LMIDINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) Partition() *NTMS_PARTITIONINFORMATIONW{
	return (*NTMS_PARTITIONINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) PartitionVal() NTMS_PARTITIONINFORMATIONW{
	return *(*NTMS_PARTITIONINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) MediaPool() *NTMS_MEDIAPOOLINFORMATION{
	return (*NTMS_MEDIAPOOLINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) MediaPoolVal() NTMS_MEDIAPOOLINFORMATION{
	return *(*NTMS_MEDIAPOOLINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) MediaType() *NTMS_MEDIATYPEINFORMATION{
	return (*NTMS_MEDIATYPEINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) MediaTypeVal() NTMS_MEDIATYPEINFORMATION{
	return *(*NTMS_MEDIATYPEINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) LibRequest() *NTMS_LIBREQUESTINFORMATIONW{
	return (*NTMS_LIBREQUESTINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) LibRequestVal() NTMS_LIBREQUESTINFORMATIONW{
	return *(*NTMS_LIBREQUESTINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) OpRequest() *NTMS_OPREQUESTINFORMATIONW{
	return (*NTMS_OPREQUESTINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) OpRequestVal() NTMS_OPREQUESTINFORMATIONW{
	return *(*NTMS_OPREQUESTINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) Computer() *NTMS_COMPUTERINFORMATION{
	return (*NTMS_COMPUTERINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_OBJECTINFORMATIONW_Info_) ComputerVal() NTMS_COMPUTERINFORMATION{
	return *(*NTMS_COMPUTERINFORMATION)(unsafe.Pointer(this))
}

type NTMS_OBJECTINFORMATION = NTMS_OBJECTINFORMATIONW
type NTMS_OBJECTINFORMATIONW struct {
	DwSize uint32
	DwType NtmsObjectsTypes
	Created SYSTEMTIME
	Modified SYSTEMTIME
	ObjectGuid syscall.GUID
	Enabled BOOL
	DwOperationalState NtmsOperationalState
	SzName [64]uint16
	SzDescription [127]uint16
	Info NTMS_OBJECTINFORMATIONW_Info_
}

type NTMS_I1_LIBRARYINFORMATION struct {
	LibraryType uint32
	CleanerSlot syscall.GUID
	CleanerSlotDefault syscall.GUID
	LibrarySupportsDriveCleaning BOOL
	BarCodeReaderInstalled BOOL
	InventoryMethod uint32
	DwCleanerUsesRemaining uint32
	FirstDriveNumber uint32
	DwNumberOfDrives uint32
	FirstSlotNumber uint32
	DwNumberOfSlots uint32
	FirstDoorNumber uint32
	DwNumberOfDoors uint32
	FirstPortNumber uint32
	DwNumberOfPorts uint32
	FirstChangerNumber uint32
	DwNumberOfChangers uint32
	DwNumberOfMedia uint32
	DwNumberOfMediaTypes uint32
	DwNumberOfLibRequests uint32
	Reserved syscall.GUID
}

type NTMS_I1_LIBREQUESTINFORMATIONA struct {
	OperationCode uint32
	OperationOption uint32
	State uint32
	PartitionId syscall.GUID
	DriveId syscall.GUID
	PhysMediaId syscall.GUID
	Library syscall.GUID
	SlotId syscall.GUID
	TimeQueued SYSTEMTIME
	TimeCompleted SYSTEMTIME
	SzApplication [64]CHAR
	SzUser [64]CHAR
	SzComputer [64]CHAR
}

type NTMS_I1_LIBREQUESTINFORMATION = NTMS_I1_LIBREQUESTINFORMATIONW
type NTMS_I1_LIBREQUESTINFORMATIONW struct {
	OperationCode uint32
	OperationOption uint32
	State uint32
	PartitionId syscall.GUID
	DriveId syscall.GUID
	PhysMediaId syscall.GUID
	Library syscall.GUID
	SlotId syscall.GUID
	TimeQueued SYSTEMTIME
	TimeCompleted SYSTEMTIME
	SzApplication [64]uint16
	SzUser [64]uint16
	SzComputer [64]uint16
}

type NTMS_I1_PMIDINFORMATIONA struct {
	CurrentLibrary syscall.GUID
	MediaPool syscall.GUID
	Location syscall.GUID
	LocationType uint32
	MediaType syscall.GUID
	HomeSlot syscall.GUID
	SzBarCode [64]CHAR
	BarCodeState uint32
	SzSequenceNumber [32]CHAR
	MediaState uint32
	DwNumberOfPartitions uint32
}

type NTMS_I1_PMIDINFORMATION = NTMS_I1_PMIDINFORMATIONW
type NTMS_I1_PMIDINFORMATIONW struct {
	CurrentLibrary syscall.GUID
	MediaPool syscall.GUID
	Location syscall.GUID
	LocationType uint32
	MediaType syscall.GUID
	HomeSlot syscall.GUID
	SzBarCode [64]uint16
	BarCodeState uint32
	SzSequenceNumber [32]uint16
	MediaState uint32
	DwNumberOfPartitions uint32
}

type NTMS_I1_PARTITIONINFORMATIONA struct {
	PhysicalMedia syscall.GUID
	LogicalMedia syscall.GUID
	State uint32
	Side uint16
	DwOmidLabelIdLength uint32
	OmidLabelId [255]uint8
	SzOmidLabelType [64]CHAR
	SzOmidLabelInfo [256]CHAR
	DwMountCount uint32
	DwAllocateCount uint32
}

type NTMS_I1_PARTITIONINFORMATION = NTMS_I1_PARTITIONINFORMATIONW
type NTMS_I1_PARTITIONINFORMATIONW struct {
	PhysicalMedia syscall.GUID
	LogicalMedia syscall.GUID
	State uint32
	Side uint16
	DwOmidLabelIdLength uint32
	OmidLabelId [255]uint8
	SzOmidLabelType [64]uint16
	SzOmidLabelInfo [256]uint16
	DwMountCount uint32
	DwAllocateCount uint32
}

type NTMS_I1_OPREQUESTINFORMATIONA struct {
	Request uint32
	Submitted SYSTEMTIME
	State uint32
	SzMessage [127]CHAR
	Arg1Type uint32
	Arg1 syscall.GUID
	Arg2Type uint32
	Arg2 syscall.GUID
	SzApplication [64]CHAR
	SzUser [64]CHAR
	SzComputer [64]CHAR
}

type NTMS_I1_OPREQUESTINFORMATION = NTMS_I1_OPREQUESTINFORMATIONW
type NTMS_I1_OPREQUESTINFORMATIONW struct {
	Request uint32
	Submitted SYSTEMTIME
	State uint32
	SzMessage [127]uint16
	Arg1Type uint32
	Arg1 syscall.GUID
	Arg2Type uint32
	Arg2 syscall.GUID
	SzApplication [64]uint16
	SzUser [64]uint16
	SzComputer [64]uint16
}

type NTMS_I1_OBJECTINFORMATIONA_Info_ struct {
	Data [157]uint32
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) Drive() *NTMS_DRIVEINFORMATIONA{
	return (*NTMS_DRIVEINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) DriveVal() NTMS_DRIVEINFORMATIONA{
	return *(*NTMS_DRIVEINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) DriveType() *NTMS_DRIVETYPEINFORMATIONA{
	return (*NTMS_DRIVETYPEINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) DriveTypeVal() NTMS_DRIVETYPEINFORMATIONA{
	return *(*NTMS_DRIVETYPEINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) Library() *NTMS_I1_LIBRARYINFORMATION{
	return (*NTMS_I1_LIBRARYINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) LibraryVal() NTMS_I1_LIBRARYINFORMATION{
	return *(*NTMS_I1_LIBRARYINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) Changer() *NTMS_CHANGERINFORMATIONA{
	return (*NTMS_CHANGERINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) ChangerVal() NTMS_CHANGERINFORMATIONA{
	return *(*NTMS_CHANGERINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) ChangerType() *NTMS_CHANGERTYPEINFORMATIONA{
	return (*NTMS_CHANGERTYPEINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) ChangerTypeVal() NTMS_CHANGERTYPEINFORMATIONA{
	return *(*NTMS_CHANGERTYPEINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) StorageSlot() *NTMS_STORAGESLOTINFORMATION{
	return (*NTMS_STORAGESLOTINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) StorageSlotVal() NTMS_STORAGESLOTINFORMATION{
	return *(*NTMS_STORAGESLOTINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) IEDoor() *NTMS_IEDOORINFORMATION{
	return (*NTMS_IEDOORINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) IEDoorVal() NTMS_IEDOORINFORMATION{
	return *(*NTMS_IEDOORINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) IEPort() *NTMS_IEPORTINFORMATION{
	return (*NTMS_IEPORTINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) IEPortVal() NTMS_IEPORTINFORMATION{
	return *(*NTMS_IEPORTINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) PhysicalMedia() *NTMS_I1_PMIDINFORMATIONA{
	return (*NTMS_I1_PMIDINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) PhysicalMediaVal() NTMS_I1_PMIDINFORMATIONA{
	return *(*NTMS_I1_PMIDINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) LogicalMedia() *NTMS_LMIDINFORMATION{
	return (*NTMS_LMIDINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) LogicalMediaVal() NTMS_LMIDINFORMATION{
	return *(*NTMS_LMIDINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) Partition() *NTMS_I1_PARTITIONINFORMATIONA{
	return (*NTMS_I1_PARTITIONINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) PartitionVal() NTMS_I1_PARTITIONINFORMATIONA{
	return *(*NTMS_I1_PARTITIONINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) MediaPool() *NTMS_MEDIAPOOLINFORMATION{
	return (*NTMS_MEDIAPOOLINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) MediaPoolVal() NTMS_MEDIAPOOLINFORMATION{
	return *(*NTMS_MEDIAPOOLINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) MediaType() *NTMS_MEDIATYPEINFORMATION{
	return (*NTMS_MEDIATYPEINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) MediaTypeVal() NTMS_MEDIATYPEINFORMATION{
	return *(*NTMS_MEDIATYPEINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) LibRequest() *NTMS_I1_LIBREQUESTINFORMATIONA{
	return (*NTMS_I1_LIBREQUESTINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) LibRequestVal() NTMS_I1_LIBREQUESTINFORMATIONA{
	return *(*NTMS_I1_LIBREQUESTINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) OpRequest() *NTMS_I1_OPREQUESTINFORMATIONA{
	return (*NTMS_I1_OPREQUESTINFORMATIONA)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONA_Info_) OpRequestVal() NTMS_I1_OPREQUESTINFORMATIONA{
	return *(*NTMS_I1_OPREQUESTINFORMATIONA)(unsafe.Pointer(this))
}

type NTMS_I1_OBJECTINFORMATIONA struct {
	DwSize uint32
	DwType uint32
	Created SYSTEMTIME
	Modified SYSTEMTIME
	ObjectGuid syscall.GUID
	Enabled BOOL
	DwOperationalState uint32
	SzName [64]CHAR
	SzDescription [127]CHAR
	Info NTMS_I1_OBJECTINFORMATIONA_Info_
}

type NTMS_I1_OBJECTINFORMATIONW_Info_ struct {
	Data [157]uint32
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) Drive() *NTMS_DRIVEINFORMATIONW{
	return (*NTMS_DRIVEINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) DriveVal() NTMS_DRIVEINFORMATIONW{
	return *(*NTMS_DRIVEINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) DriveType() *NTMS_DRIVETYPEINFORMATIONW{
	return (*NTMS_DRIVETYPEINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) DriveTypeVal() NTMS_DRIVETYPEINFORMATIONW{
	return *(*NTMS_DRIVETYPEINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) Library() *NTMS_I1_LIBRARYINFORMATION{
	return (*NTMS_I1_LIBRARYINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) LibraryVal() NTMS_I1_LIBRARYINFORMATION{
	return *(*NTMS_I1_LIBRARYINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) Changer() *NTMS_CHANGERINFORMATIONW{
	return (*NTMS_CHANGERINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) ChangerVal() NTMS_CHANGERINFORMATIONW{
	return *(*NTMS_CHANGERINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) ChangerType() *NTMS_CHANGERTYPEINFORMATIONW{
	return (*NTMS_CHANGERTYPEINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) ChangerTypeVal() NTMS_CHANGERTYPEINFORMATIONW{
	return *(*NTMS_CHANGERTYPEINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) StorageSlot() *NTMS_STORAGESLOTINFORMATION{
	return (*NTMS_STORAGESLOTINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) StorageSlotVal() NTMS_STORAGESLOTINFORMATION{
	return *(*NTMS_STORAGESLOTINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) IEDoor() *NTMS_IEDOORINFORMATION{
	return (*NTMS_IEDOORINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) IEDoorVal() NTMS_IEDOORINFORMATION{
	return *(*NTMS_IEDOORINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) IEPort() *NTMS_IEPORTINFORMATION{
	return (*NTMS_IEPORTINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) IEPortVal() NTMS_IEPORTINFORMATION{
	return *(*NTMS_IEPORTINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) PhysicalMedia() *NTMS_I1_PMIDINFORMATIONW{
	return (*NTMS_I1_PMIDINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) PhysicalMediaVal() NTMS_I1_PMIDINFORMATIONW{
	return *(*NTMS_I1_PMIDINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) LogicalMedia() *NTMS_LMIDINFORMATION{
	return (*NTMS_LMIDINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) LogicalMediaVal() NTMS_LMIDINFORMATION{
	return *(*NTMS_LMIDINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) Partition() *NTMS_I1_PARTITIONINFORMATIONW{
	return (*NTMS_I1_PARTITIONINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) PartitionVal() NTMS_I1_PARTITIONINFORMATIONW{
	return *(*NTMS_I1_PARTITIONINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) MediaPool() *NTMS_MEDIAPOOLINFORMATION{
	return (*NTMS_MEDIAPOOLINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) MediaPoolVal() NTMS_MEDIAPOOLINFORMATION{
	return *(*NTMS_MEDIAPOOLINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) MediaType() *NTMS_MEDIATYPEINFORMATION{
	return (*NTMS_MEDIATYPEINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) MediaTypeVal() NTMS_MEDIATYPEINFORMATION{
	return *(*NTMS_MEDIATYPEINFORMATION)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) LibRequest() *NTMS_I1_LIBREQUESTINFORMATIONW{
	return (*NTMS_I1_LIBREQUESTINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) LibRequestVal() NTMS_I1_LIBREQUESTINFORMATIONW{
	return *(*NTMS_I1_LIBREQUESTINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) OpRequest() *NTMS_I1_OPREQUESTINFORMATIONW{
	return (*NTMS_I1_OPREQUESTINFORMATIONW)(unsafe.Pointer(this))
}

func (this *NTMS_I1_OBJECTINFORMATIONW_Info_) OpRequestVal() NTMS_I1_OPREQUESTINFORMATIONW{
	return *(*NTMS_I1_OPREQUESTINFORMATIONW)(unsafe.Pointer(this))
}

type NTMS_I1_OBJECTINFORMATION = NTMS_I1_OBJECTINFORMATIONW
type NTMS_I1_OBJECTINFORMATIONW struct {
	DwSize uint32
	DwType uint32
	Created SYSTEMTIME
	Modified SYSTEMTIME
	ObjectGuid syscall.GUID
	Enabled BOOL
	DwOperationalState uint32
	SzName [64]uint16
	SzDescription [127]uint16
	Info NTMS_I1_OBJECTINFORMATIONW_Info_
}

type NTMS_FILESYSTEM_INFO struct {
	FileSystemType [64]uint16
	VolumeName [256]uint16
	SerialNumber uint32
}

type NTMS_NOTIFICATIONINFORMATION struct {
	DwOperation NtmsNotificationOperations
	ObjectId syscall.GUID
}

type MediaLabelInfo struct {
	LabelType [64]uint16
	LabelIDSize uint32
	LabelID [256]uint8
	LabelAppDescr [256]uint16
}

type CLS_LSN struct {
	Internal uint64
}

type CLFS_NODE_ID struct {
	CType uint32
	CbNode uint32
}

type CLS_WRITE_ENTRY struct {
	Buffer unsafe.Pointer
	ByteLength uint32
}

type CLS_INFORMATION struct {
	TotalAvailable int64
	CurrentAvailable int64
	TotalReservation int64
	BaseFileSize uint64
	ContainerSize uint64
	TotalContainers uint32
	FreeContainers uint32
	TotalClients uint32
	Attributes uint32
	FlushThreshold uint32
	SectorSize uint32
	MinArchiveTailLsn CLS_LSN
	BaseLsn CLS_LSN
	LastFlushedLsn CLS_LSN
	LastLsn CLS_LSN
	RestartLsn CLS_LSN
	Identity syscall.GUID
}

type CLFS_LOG_NAME_INFORMATION struct {
	NameLengthInBytes uint16
	Name [1]uint16
}

type CLFS_STREAM_ID_INFORMATION struct {
	StreamIdentifier uint8
}

type CLFS_PHYSICAL_LSN_INFORMATION struct {
	StreamIdentifier uint8
	VirtualLsn CLS_LSN
	PhysicalLsn CLS_LSN
}

type CLS_CONTAINER_INFORMATION struct {
	FileAttributes uint32
	CreationTime uint64
	LastAccessTime uint64
	LastWriteTime uint64
	ContainerSize int64
	FileNameActualLength uint32
	FileNameLength uint32
	FileName [256]uint16
	State uint32
	PhysicalContainerId uint32
	LogicalContainerId uint32
}

type CLS_IO_STATISTICS_HEADER struct {
	UbMajorVersion uint8
	UbMinorVersion uint8
	EStatsClass CLFS_IOSTATS_CLASS
	CbLength uint16
	CoffData uint32
}

type CLS_IO_STATISTICS struct {
	HdrIoStats CLS_IO_STATISTICS_HEADER
	CFlush uint64
	CbFlush uint64
	CMetaFlush uint64
	CbMetaFlush uint64
}

type CLS_SCAN_CONTEXT struct {
	CidNode CLFS_NODE_ID
	HLog HANDLE
	CIndex uint32
	CContainers uint32
	CContainersReturned uint32
	EScanMode uint8
	PinfoContainer *CLS_CONTAINER_INFORMATION
}

type CLS_ARCHIVE_DESCRIPTOR struct {
	CoffLow uint64
	CoffHigh uint64
	InfoContainer CLS_CONTAINER_INFORMATION
}

type CLFS_MGMT_POLICY_PolicyParameters__NewContainerExtension_ struct {
	ExtensionLengthInBytes uint16
	ExtensionString [1]uint16
}

type CLFS_MGMT_POLICY_PolicyParameters__NewContainerPrefix_ struct {
	PrefixLengthInBytes uint16
	PrefixString [1]uint16
}

type CLFS_MGMT_POLICY_PolicyParameters__AutoShrink_ struct {
	Percentage uint32
}

type CLFS_MGMT_POLICY_PolicyParameters__GrowthRate_ struct {
	AbsoluteGrowthInContainers uint32
	RelativeGrowthPercentage uint32
}

type CLFS_MGMT_POLICY_PolicyParameters__MinimumSize_ struct {
	Containers uint32
}

type CLFS_MGMT_POLICY_PolicyParameters__NewContainerSuffix_ struct {
	NextContainerSuffix uint64
}

type CLFS_MGMT_POLICY_PolicyParameters__LogTail_ struct {
	MinimumAvailablePercentage uint32
	MinimumAvailableContainers uint32
}

type CLFS_MGMT_POLICY_PolicyParameters__MaximumSize_ struct {
	Containers uint32
}

type CLFS_MGMT_POLICY_PolicyParameters__NewContainerSize_ struct {
	SizeInBytes uint32
}

type CLFS_MGMT_POLICY_PolicyParameters__AutoGrow_ struct {
	Enabled uint32
}

type CLFS_MGMT_POLICY_PolicyParameters_ struct {
	Data [1]uint64
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) MaximumSize() *CLFS_MGMT_POLICY_PolicyParameters__MaximumSize_{
	return (*CLFS_MGMT_POLICY_PolicyParameters__MaximumSize_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) MaximumSizeVal() CLFS_MGMT_POLICY_PolicyParameters__MaximumSize_{
	return *(*CLFS_MGMT_POLICY_PolicyParameters__MaximumSize_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) MinimumSize() *CLFS_MGMT_POLICY_PolicyParameters__MinimumSize_{
	return (*CLFS_MGMT_POLICY_PolicyParameters__MinimumSize_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) MinimumSizeVal() CLFS_MGMT_POLICY_PolicyParameters__MinimumSize_{
	return *(*CLFS_MGMT_POLICY_PolicyParameters__MinimumSize_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) NewContainerSize() *CLFS_MGMT_POLICY_PolicyParameters__NewContainerSize_{
	return (*CLFS_MGMT_POLICY_PolicyParameters__NewContainerSize_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) NewContainerSizeVal() CLFS_MGMT_POLICY_PolicyParameters__NewContainerSize_{
	return *(*CLFS_MGMT_POLICY_PolicyParameters__NewContainerSize_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) GrowthRate() *CLFS_MGMT_POLICY_PolicyParameters__GrowthRate_{
	return (*CLFS_MGMT_POLICY_PolicyParameters__GrowthRate_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) GrowthRateVal() CLFS_MGMT_POLICY_PolicyParameters__GrowthRate_{
	return *(*CLFS_MGMT_POLICY_PolicyParameters__GrowthRate_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) LogTail() *CLFS_MGMT_POLICY_PolicyParameters__LogTail_{
	return (*CLFS_MGMT_POLICY_PolicyParameters__LogTail_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) LogTailVal() CLFS_MGMT_POLICY_PolicyParameters__LogTail_{
	return *(*CLFS_MGMT_POLICY_PolicyParameters__LogTail_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) AutoShrink() *CLFS_MGMT_POLICY_PolicyParameters__AutoShrink_{
	return (*CLFS_MGMT_POLICY_PolicyParameters__AutoShrink_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) AutoShrinkVal() CLFS_MGMT_POLICY_PolicyParameters__AutoShrink_{
	return *(*CLFS_MGMT_POLICY_PolicyParameters__AutoShrink_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) AutoGrow() *CLFS_MGMT_POLICY_PolicyParameters__AutoGrow_{
	return (*CLFS_MGMT_POLICY_PolicyParameters__AutoGrow_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) AutoGrowVal() CLFS_MGMT_POLICY_PolicyParameters__AutoGrow_{
	return *(*CLFS_MGMT_POLICY_PolicyParameters__AutoGrow_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) NewContainerPrefix() *CLFS_MGMT_POLICY_PolicyParameters__NewContainerPrefix_{
	return (*CLFS_MGMT_POLICY_PolicyParameters__NewContainerPrefix_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) NewContainerPrefixVal() CLFS_MGMT_POLICY_PolicyParameters__NewContainerPrefix_{
	return *(*CLFS_MGMT_POLICY_PolicyParameters__NewContainerPrefix_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) NewContainerSuffix() *CLFS_MGMT_POLICY_PolicyParameters__NewContainerSuffix_{
	return (*CLFS_MGMT_POLICY_PolicyParameters__NewContainerSuffix_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) NewContainerSuffixVal() CLFS_MGMT_POLICY_PolicyParameters__NewContainerSuffix_{
	return *(*CLFS_MGMT_POLICY_PolicyParameters__NewContainerSuffix_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) NewContainerExtension() *CLFS_MGMT_POLICY_PolicyParameters__NewContainerExtension_{
	return (*CLFS_MGMT_POLICY_PolicyParameters__NewContainerExtension_)(unsafe.Pointer(this))
}

func (this *CLFS_MGMT_POLICY_PolicyParameters_) NewContainerExtensionVal() CLFS_MGMT_POLICY_PolicyParameters__NewContainerExtension_{
	return *(*CLFS_MGMT_POLICY_PolicyParameters__NewContainerExtension_)(unsafe.Pointer(this))
}

type CLFS_MGMT_POLICY struct {
	Version uint32
	LengthInBytes uint32
	PolicyFlags uint32
	PolicyType CLFS_MGMT_POLICY_TYPE
	PolicyParameters CLFS_MGMT_POLICY_PolicyParameters_
}

type CLFS_MGMT_NOTIFICATION struct {
	Notification CLFS_MGMT_NOTIFICATION_TYPE
	Lsn CLS_LSN
	LogIsPinned uint16
}

type LOG_MANAGEMENT_CALLBACKS struct {
	CallbackContext unsafe.Pointer
	AdvanceTailCallback uintptr
	LogFullHandlerCallback uintptr
	LogUnpinnedCallback uintptr
}

type DISKQUOTA_USER_INFORMATION struct {
	QuotaUsed int64
	QuotaThreshold int64
	QuotaLimit int64
}

type EFS_CERTIFICATE_BLOB struct {
	DwCertEncodingType uint32
	CbData uint32
	PbData *uint8
}

type EFS_HASH_BLOB struct {
	CbData uint32
	PbData *uint8
}

type EFS_RPC_BLOB struct {
	CbData uint32
	PbData *uint8
}

type EFS_PIN_BLOB struct {
	CbPadding uint32
	CbData uint32
	PbData *uint8
}

type EFS_KEY_INFO struct {
	DwVersion uint32
	Entropy uint32
	Algorithm uint32
	KeyLength uint32
}

type EFS_COMPATIBILITY_INFO struct {
	EfsVersion uint32
}

type EFS_VERSION_INFO struct {
	EfsVersion uint32
	SubVersion uint32
}

type EFS_DECRYPTION_STATUS_INFO struct {
	DwDecryptionError uint32
	DwHashOffset uint32
	CbHash uint32
}

type EFS_ENCRYPTION_STATUS_INFO struct {
	BHasCurrentKey BOOL
	DwEncryptionError uint32
}

type ENCRYPTION_CERTIFICATE struct {
	CbTotalLength uint32
	PUserSid *SID
	PCertBlob *EFS_CERTIFICATE_BLOB
}

type ENCRYPTION_CERTIFICATE_HASH struct {
	CbTotalLength uint32
	PUserSid *SID
	PHash *EFS_HASH_BLOB
	LpDisplayInformation PWSTR
}

type ENCRYPTION_CERTIFICATE_HASH_LIST struct {
	NCert_Hash uint32
	PUsers **ENCRYPTION_CERTIFICATE_HASH
}

type ENCRYPTION_CERTIFICATE_LIST struct {
	NUsers uint32
	PUsers **ENCRYPTION_CERTIFICATE
}

type ENCRYPTED_FILE_METADATA_SIGNATURE struct {
	DwEfsAccessType uint32
	PCertificatesAdded *ENCRYPTION_CERTIFICATE_HASH_LIST
	PEncryptionCertificate *ENCRYPTION_CERTIFICATE
	PEfsStreamSignature *EFS_RPC_BLOB
}

type ENCRYPTION_PROTECTOR struct {
	CbTotalLength uint32
	PUserSid *SID
	LpProtectorDescriptor PWSTR
}

type ENCRYPTION_PROTECTOR_LIST struct {
	NProtectors uint32
	PProtectors **ENCRYPTION_PROTECTOR
}

type WIM_ENTRY_INFO struct {
	WimEntryInfoSize uint32
	WimType uint32
	DataSourceId int64
	WimGuid syscall.GUID
	WimPath PWSTR
	WimIndex uint32
	Flags uint32
}

type WIM_EXTERNAL_FILE_INFO struct {
	DataSourceId int64
	ResourceHash [20]uint8
	Flags uint32
}

type WOF_FILE_COMPRESSION_INFO_V0 struct {
	Algorithm uint32
}

type WOF_FILE_COMPRESSION_INFO_V1 struct {
	Algorithm uint32
	Flags uint32
}

type TXF_ID_Anonymous_ struct {
	LowPart int64
	HighPart int64
}

type TXF_ID struct {
	TXF_ID_Anonymous_
}

type TXF_LOG_RECORD_BASE struct {
	Version uint16
	RecordType TXF_LOG_RECORD_TYPE
	RecordLength uint32
}

type TXF_LOG_RECORD_WRITE struct {
	Version uint16
	RecordType uint16
	RecordLength uint32
	Flags uint32
	TxfFileId TXF_ID
	KtmGuid syscall.GUID
	ByteOffsetInFile int64
	NumBytesWritten uint32
	ByteOffsetInStructure uint32
	FileNameLength uint32
	FileNameByteOffsetInStructure uint32
}

type TXF_LOG_RECORD_TRUNCATE struct {
	Version uint16
	RecordType uint16
	RecordLength uint32
	Flags uint32
	TxfFileId TXF_ID
	KtmGuid syscall.GUID
	NewFileSize int64
	FileNameLength uint32
	FileNameByteOffsetInStructure uint32
}

type TXF_LOG_RECORD_AFFECTED_FILE struct {
	Version uint16
	RecordLength uint32
	Flags uint32
	TxfFileId TXF_ID
	KtmGuid syscall.GUID
	FileNameLength uint32
	FileNameByteOffsetInStructure uint32
}

type VOLUME_FAILOVER_SET struct {
	NumberOfDisks uint32
	DiskNumbers [1]uint32
}

type VOLUME_NUMBER struct {
	VolumeNumber uint32
	VolumeManagerName [8]uint16
}

type VOLUME_LOGICAL_OFFSET struct {
	LogicalOffset int64
}

type VOLUME_PHYSICAL_OFFSET struct {
	DiskNumber uint32
	Offset int64
}

type VOLUME_PHYSICAL_OFFSETS struct {
	NumberOfPhysicalOffsets uint32
	PhysicalOffset [1]VOLUME_PHYSICAL_OFFSET
}

type VOLUME_READ_PLEX_INPUT struct {
	ByteOffset int64
	Length uint32
	PlexNumber uint32
}

type VOLUME_SET_GPT_ATTRIBUTES_INFORMATION struct {
	GptAttributes uint64
	RevertOnClose BOOLEAN
	ApplyToAllConnectedVolumes BOOLEAN
	Reserved1 uint16
	Reserved2 uint32
}

type VOLUME_GET_BC_PROPERTIES_INPUT struct {
	Version uint32
	Reserved1 uint32
	LowestByteOffset uint64
	HighestByteOffset uint64
	AccessType uint32
	AccessMode uint32
}

type VOLUME_GET_BC_PROPERTIES_OUTPUT struct {
	MaximumRequestsPerPeriod uint32
	MinimumPeriod uint32
	MaximumRequestSize uint64
	EstimatedTimePerRequest uint32
	NumOutStandingRequests uint32
	RequestSize uint64
}

type VOLUME_ALLOCATE_BC_STREAM_INPUT struct {
	Version uint32
	RequestsPerPeriod uint32
	Period uint32
	RetryFailures BOOLEAN
	Discardable BOOLEAN
	Reserved1 [2]BOOLEAN
	LowestByteOffset uint64
	HighestByteOffset uint64
	AccessType uint32
	AccessMode uint32
}

type VOLUME_ALLOCATE_BC_STREAM_OUTPUT struct {
	RequestSize uint64
	NumOutStandingRequests uint32
}

type FILE_EXTENT struct {
	VolumeOffset uint64
	ExtentLength uint64
}

type VOLUME_CRITICAL_IO struct {
	AccessType uint32
	ExtentsCount uint32
	Extents [1]FILE_EXTENT
}

type VOLUME_ALLOCATION_HINT_INPUT struct {
	ClusterSize uint32
	NumberOfClusters uint32
	StartingClusterNumber int64
}

type VOLUME_ALLOCATION_HINT_OUTPUT struct {
	Bitmap [1]uint32
}

type VOLUME_SHRINK_INFO struct {
	VolumeSize uint64
}

type SHARE_INFO_0 struct {
	Shi0_netname PWSTR
}

type SHARE_INFO_1 struct {
	Shi1_netname PWSTR
	Shi1_type SHARE_TYPE
	Shi1_remark PWSTR
}

type SHARE_INFO_2 struct {
	Shi2_netname PWSTR
	Shi2_type SHARE_TYPE
	Shi2_remark PWSTR
	Shi2_permissions SHARE_INFO_PERMISSIONS
	Shi2_max_uses uint32
	Shi2_current_uses uint32
	Shi2_path PWSTR
	Shi2_passwd PWSTR
}

type SHARE_INFO_501 struct {
	Shi501_netname PWSTR
	Shi501_type SHARE_TYPE
	Shi501_remark PWSTR
	Shi501_flags uint32
}

type SHARE_INFO_502 struct {
	Shi502_netname PWSTR
	Shi502_type SHARE_TYPE
	Shi502_remark PWSTR
	Shi502_permissions SHARE_INFO_PERMISSIONS
	Shi502_max_uses uint32
	Shi502_current_uses uint32
	Shi502_path PWSTR
	Shi502_passwd PWSTR
	Shi502_reserved uint32
	Shi502_security_descriptor PSECURITY_DESCRIPTOR
}

type SHARE_INFO_503 struct {
	Shi503_netname PWSTR
	Shi503_type SHARE_TYPE
	Shi503_remark PWSTR
	Shi503_permissions SHARE_INFO_PERMISSIONS
	Shi503_max_uses uint32
	Shi503_current_uses uint32
	Shi503_path PWSTR
	Shi503_passwd PWSTR
	Shi503_servername PWSTR
	Shi503_reserved uint32
	Shi503_security_descriptor PSECURITY_DESCRIPTOR
}

type SHARE_INFO_1004 struct {
	Shi1004_remark PWSTR
}

type SHARE_INFO_1005 struct {
	Shi1005_flags uint32
}

type SHARE_INFO_1006 struct {
	Shi1006_max_uses uint32
}

type SHARE_INFO_1501 struct {
	Shi1501_reserved uint32
	Shi1501_security_descriptor PSECURITY_DESCRIPTOR
}

type SHARE_INFO_1503 struct {
	Shi1503_sharefilter syscall.GUID
}

type SERVER_ALIAS_INFO_0 struct {
	Srvai0_alias PWSTR
	Srvai0_target PWSTR
	Srvai0_default BOOLEAN
	Srvai0_reserved uint32
}

type SESSION_INFO_0 struct {
	Sesi0_cname PWSTR
}

type SESSION_INFO_1 struct {
	Sesi1_cname PWSTR
	Sesi1_username PWSTR
	Sesi1_num_opens uint32
	Sesi1_time uint32
	Sesi1_idle_time uint32
	Sesi1_user_flags SESSION_INFO_USER_FLAGS
}

type SESSION_INFO_2 struct {
	Sesi2_cname PWSTR
	Sesi2_username PWSTR
	Sesi2_num_opens uint32
	Sesi2_time uint32
	Sesi2_idle_time uint32
	Sesi2_user_flags SESSION_INFO_USER_FLAGS
	Sesi2_cltype_name PWSTR
}

type SESSION_INFO_10 struct {
	Sesi10_cname PWSTR
	Sesi10_username PWSTR
	Sesi10_time uint32
	Sesi10_idle_time uint32
}

type SESSION_INFO_502 struct {
	Sesi502_cname PWSTR
	Sesi502_username PWSTR
	Sesi502_num_opens uint32
	Sesi502_time uint32
	Sesi502_idle_time uint32
	Sesi502_user_flags SESSION_INFO_USER_FLAGS
	Sesi502_cltype_name PWSTR
	Sesi502_transport PWSTR
}

type CONNECTION_INFO_0 struct {
	Coni0_id uint32
}

type CONNECTION_INFO_1 struct {
	Coni1_id uint32
	Coni1_type SHARE_TYPE
	Coni1_num_opens uint32
	Coni1_num_users uint32
	Coni1_time uint32
	Coni1_username PWSTR
	Coni1_netname PWSTR
}

type FILE_INFO_2 struct {
	Fi2_id uint32
}

type FILE_INFO_3 struct {
	Fi3_id uint32
	Fi3_permissions FILE_INFO_FLAGS_PERMISSIONS
	Fi3_num_locks uint32
	Fi3_pathname PWSTR
	Fi3_username PWSTR
}

type SERVER_CERTIFICATE_INFO_0 struct {
	Srvci0_name PWSTR
	Srvci0_subject PWSTR
	Srvci0_issuer PWSTR
	Srvci0_thumbprint PWSTR
	Srvci0_friendlyname PWSTR
	Srvci0_notbefore PWSTR
	Srvci0_notafter PWSTR
	Srvci0_storelocation PWSTR
	Srvci0_storename PWSTR
	Srvci0_renewalchain PWSTR
	Srvci0_type uint32
	Srvci0_flags uint32
}

type STAT_WORKSTATION_0 struct {
	StatisticsStartTime int64
	BytesReceived int64
	SmbsReceived int64
	PagingReadBytesRequested int64
	NonPagingReadBytesRequested int64
	CacheReadBytesRequested int64
	NetworkReadBytesRequested int64
	BytesTransmitted int64
	SmbsTransmitted int64
	PagingWriteBytesRequested int64
	NonPagingWriteBytesRequested int64
	CacheWriteBytesRequested int64
	NetworkWriteBytesRequested int64
	InitiallyFailedOperations uint32
	FailedCompletionOperations uint32
	ReadOperations uint32
	RandomReadOperations uint32
	ReadSmbs uint32
	LargeReadSmbs uint32
	SmallReadSmbs uint32
	WriteOperations uint32
	RandomWriteOperations uint32
	WriteSmbs uint32
	LargeWriteSmbs uint32
	SmallWriteSmbs uint32
	RawReadsDenied uint32
	RawWritesDenied uint32
	NetworkErrors uint32
	Sessions uint32
	FailedSessions uint32
	Reconnects uint32
	CoreConnects uint32
	Lanman20Connects uint32
	Lanman21Connects uint32
	LanmanNtConnects uint32
	ServerDisconnects uint32
	HungSessions uint32
	UseCount uint32
	FailedUseCount uint32
	CurrentCommands uint32
}

type STAT_SERVER_0 struct {
	Sts0_start uint32
	Sts0_fopens uint32
	Sts0_devopens uint32
	Sts0_jobsqueued uint32
	Sts0_sopens uint32
	Sts0_stimedout uint32
	Sts0_serrorout uint32
	Sts0_pwerrors uint32
	Sts0_permerrors uint32
	Sts0_syserrors uint32
	Sts0_bytessent_low uint32
	Sts0_bytessent_high uint32
	Sts0_bytesrcvd_low uint32
	Sts0_bytesrcvd_high uint32
	Sts0_avresponse uint32
	Sts0_reqbufneed uint32
	Sts0_bigbufneed uint32
}

type FH_OVERLAPPED struct {
	Internal uintptr
	InternalHigh uintptr
	Offset uint32
	OffsetHigh uint32
	HEvent HANDLE
	PfnCompletion uintptr
	Reserved1 uintptr
	Reserved2 uintptr
	Reserved3 uintptr
	Reserved4 uintptr
}

type FIO_CONTEXT struct {
	M_dwTempHack uint32
	M_dwSignature uint32
	M_hFile HANDLE
	M_dwLinesOffset uint32
	M_dwHeaderLength uint32
}

type NAME_CACHE_CONTEXT struct {
	M_dwSignature uint32
}

type IORING_BUFFER_INFO struct {
	Address unsafe.Pointer
	Length uint32
}

type IORING_REGISTERED_BUFFER struct {
	BufferIndex uint32
	Offset uint32
}

type HIORING__ struct {
	Unused int32
}

type IORING_CREATE_FLAGS struct {
	Required IORING_CREATE_REQUIRED_FLAGS
	Advisory IORING_CREATE_ADVISORY_FLAGS
}

type IORING_INFO struct {
	IoRingVersion IORING_VERSION
	Flags IORING_CREATE_FLAGS
	SubmissionQueueSize uint32
	CompletionQueueSize uint32
}

type IORING_CAPABILITIES struct {
	MaxVersion IORING_VERSION
	MaxSubmissionQueueSize uint32
	MaxCompletionQueueSize uint32
	FeatureFlags IORING_FEATURE_FLAGS
}

type IORING_HANDLE_REF_HandleUnion struct {
	Data [1]uint64
}

func (this *IORING_HANDLE_REF_HandleUnion) Handle() *HANDLE{
	return (*HANDLE)(unsafe.Pointer(this))
}

func (this *IORING_HANDLE_REF_HandleUnion) HandleVal() HANDLE{
	return *(*HANDLE)(unsafe.Pointer(this))
}

func (this *IORING_HANDLE_REF_HandleUnion) Index() *uint32{
	return (*uint32)(unsafe.Pointer(this))
}

func (this *IORING_HANDLE_REF_HandleUnion) IndexVal() uint32{
	return *(*uint32)(unsafe.Pointer(this))
}

type IORING_HANDLE_REF struct {
	Kind IORING_REF_KIND
	Handle IORING_HANDLE_REF_HandleUnion
}

type IORING_BUFFER_REF_BufferUnion struct {
	Data [1]uint64
}

func (this *IORING_BUFFER_REF_BufferUnion) Address() *unsafe.Pointer{
	return (*unsafe.Pointer)(unsafe.Pointer(this))
}

func (this *IORING_BUFFER_REF_BufferUnion) AddressVal() unsafe.Pointer{
	return *(*unsafe.Pointer)(unsafe.Pointer(this))
}

func (this *IORING_BUFFER_REF_BufferUnion) IndexAndOffset() *IORING_REGISTERED_BUFFER{
	return (*IORING_REGISTERED_BUFFER)(unsafe.Pointer(this))
}

func (this *IORING_BUFFER_REF_BufferUnion) IndexAndOffsetVal() IORING_REGISTERED_BUFFER{
	return *(*IORING_REGISTERED_BUFFER)(unsafe.Pointer(this))
}

type IORING_BUFFER_REF struct {
	Kind IORING_REF_KIND
	Buffer IORING_BUFFER_REF_BufferUnion
}

type IORING_CQE struct {
	UserData uintptr
	ResultCode HRESULT
	Information uintptr
}

type FILE_ID_128 struct {
	Identifier [16]uint8
}

type FILE_NOTIFY_INFORMATION struct {
	NextEntryOffset uint32
	Action FILE_ACTION
	FileNameLength uint32
	FileName [1]uint16
}

type FILE_NOTIFY_EXTENDED_INFORMATION struct {
	NextEntryOffset uint32
	Action FILE_ACTION
	CreationTime int64
	LastModificationTime int64
	LastChangeTime int64
	LastAccessTime int64
	AllocatedLength int64
	FileSize int64
	FileAttributes uint32
	ReparsePointTag uint32
	FileId int64
	ParentFileId int64
	FileNameLength uint32
	FileName [1]uint16
}

type FILE_SEGMENT_ELEMENT struct {
	Data [1]uint64
}

func (this *FILE_SEGMENT_ELEMENT) Buffer() *unsafe.Pointer{
	return (*unsafe.Pointer)(unsafe.Pointer(this))
}

func (this *FILE_SEGMENT_ELEMENT) BufferVal() unsafe.Pointer{
	return *(*unsafe.Pointer)(unsafe.Pointer(this))
}

func (this *FILE_SEGMENT_ELEMENT) Alignment() *uint64{
	return (*uint64)(unsafe.Pointer(this))
}

func (this *FILE_SEGMENT_ELEMENT) AlignmentVal() uint64{
	return *(*uint64)(unsafe.Pointer(this))
}

type REPARSE_GUID_DATA_BUFFER_GenericReparseBuffer_ struct {
	DataBuffer [1]uint8
}

type REPARSE_GUID_DATA_BUFFER struct {
	ReparseTag uint32
	ReparseDataLength uint16
	Reserved uint16
	ReparseGuid syscall.GUID
	GenericReparseBuffer REPARSE_GUID_DATA_BUFFER_GenericReparseBuffer_
}

type TAPE_ERASE struct {
	Type ERASE_TAPE_TYPE
	Immediate BOOLEAN
}

type TAPE_PREPARE struct {
	Operation PREPARE_TAPE_OPERATION
	Immediate BOOLEAN
}

type TAPE_WRITE_MARKS struct {
	Type TAPEMARK_TYPE
	Count uint32
	Immediate BOOLEAN
}

type TAPE_GET_POSITION struct {
	Type TAPE_POSITION_TYPE
	Partition uint32
	Offset int64
}

type TAPE_SET_POSITION struct {
	Method TAPE_POSITION_METHOD
	Partition uint32
	Offset int64
	Immediate BOOLEAN
}

type OFSTRUCT struct {
	CBytes uint8
	FFixedDisk uint8
	NErrCode uint16
	Reserved1 uint16
	Reserved2 uint16
	SzPathName [128]CHAR
}

type WIN32_STREAM_ID struct {
	DwStreamId WIN_STREAM_ID
	DwStreamAttributes uint32
	Size int64
	DwStreamNameSize uint32
	CStreamName [1]uint16
}

type COPYFILE2_MESSAGE_Info__Error_ struct {
	CopyPhase COPYFILE2_COPY_PHASE
	DwStreamNumber uint32
	HrFailure HRESULT
	DwReserved uint32
	UliChunkNumber uint64
	UliStreamSize uint64
	UliStreamBytesTransferred uint64
	UliTotalFileSize uint64
	UliTotalBytesTransferred uint64
}

type COPYFILE2_MESSAGE_Info__StreamFinished_ struct {
	DwStreamNumber uint32
	DwReserved uint32
	HSourceFile HANDLE
	HDestinationFile HANDLE
	UliStreamSize uint64
	UliStreamBytesTransferred uint64
	UliTotalFileSize uint64
	UliTotalBytesTransferred uint64
}

type COPYFILE2_MESSAGE_Info__ChunkFinished_ struct {
	DwStreamNumber uint32
	DwFlags uint32
	HSourceFile HANDLE
	HDestinationFile HANDLE
	UliChunkNumber uint64
	UliChunkSize uint64
	UliStreamSize uint64
	UliStreamBytesTransferred uint64
	UliTotalFileSize uint64
	UliTotalBytesTransferred uint64
}

type COPYFILE2_MESSAGE_Info__StreamStarted_ struct {
	DwStreamNumber uint32
	DwReserved uint32
	HSourceFile HANDLE
	HDestinationFile HANDLE
	UliStreamSize uint64
	UliTotalFileSize uint64
}

type COPYFILE2_MESSAGE_Info__PollContinue_ struct {
	DwReserved uint32
}

type COPYFILE2_MESSAGE_Info__ChunkStarted_ struct {
	DwStreamNumber uint32
	DwReserved uint32
	HSourceFile HANDLE
	HDestinationFile HANDLE
	UliChunkNumber uint64
	UliChunkSize uint64
	UliStreamSize uint64
	UliTotalFileSize uint64
}

type COPYFILE2_MESSAGE_Info_ struct {
	Data [9]uint64
}

func (this *COPYFILE2_MESSAGE_Info_) ChunkStarted() *COPYFILE2_MESSAGE_Info__ChunkStarted_{
	return (*COPYFILE2_MESSAGE_Info__ChunkStarted_)(unsafe.Pointer(this))
}

func (this *COPYFILE2_MESSAGE_Info_) ChunkStartedVal() COPYFILE2_MESSAGE_Info__ChunkStarted_{
	return *(*COPYFILE2_MESSAGE_Info__ChunkStarted_)(unsafe.Pointer(this))
}

func (this *COPYFILE2_MESSAGE_Info_) ChunkFinished() *COPYFILE2_MESSAGE_Info__ChunkFinished_{
	return (*COPYFILE2_MESSAGE_Info__ChunkFinished_)(unsafe.Pointer(this))
}

func (this *COPYFILE2_MESSAGE_Info_) ChunkFinishedVal() COPYFILE2_MESSAGE_Info__ChunkFinished_{
	return *(*COPYFILE2_MESSAGE_Info__ChunkFinished_)(unsafe.Pointer(this))
}

func (this *COPYFILE2_MESSAGE_Info_) StreamStarted() *COPYFILE2_MESSAGE_Info__StreamStarted_{
	return (*COPYFILE2_MESSAGE_Info__StreamStarted_)(unsafe.Pointer(this))
}

func (this *COPYFILE2_MESSAGE_Info_) StreamStartedVal() COPYFILE2_MESSAGE_Info__StreamStarted_{
	return *(*COPYFILE2_MESSAGE_Info__StreamStarted_)(unsafe.Pointer(this))
}

func (this *COPYFILE2_MESSAGE_Info_) StreamFinished() *COPYFILE2_MESSAGE_Info__StreamFinished_{
	return (*COPYFILE2_MESSAGE_Info__StreamFinished_)(unsafe.Pointer(this))
}

func (this *COPYFILE2_MESSAGE_Info_) StreamFinishedVal() COPYFILE2_MESSAGE_Info__StreamFinished_{
	return *(*COPYFILE2_MESSAGE_Info__StreamFinished_)(unsafe.Pointer(this))
}

func (this *COPYFILE2_MESSAGE_Info_) PollContinue() *COPYFILE2_MESSAGE_Info__PollContinue_{
	return (*COPYFILE2_MESSAGE_Info__PollContinue_)(unsafe.Pointer(this))
}

func (this *COPYFILE2_MESSAGE_Info_) PollContinueVal() COPYFILE2_MESSAGE_Info__PollContinue_{
	return *(*COPYFILE2_MESSAGE_Info__PollContinue_)(unsafe.Pointer(this))
}

func (this *COPYFILE2_MESSAGE_Info_) Error() *COPYFILE2_MESSAGE_Info__Error_{
	return (*COPYFILE2_MESSAGE_Info__Error_)(unsafe.Pointer(this))
}

func (this *COPYFILE2_MESSAGE_Info_) ErrorVal() COPYFILE2_MESSAGE_Info__Error_{
	return *(*COPYFILE2_MESSAGE_Info__Error_)(unsafe.Pointer(this))
}

type COPYFILE2_MESSAGE struct {
	Type COPYFILE2_MESSAGE_TYPE
	DwPadding uint32
	Info COPYFILE2_MESSAGE_Info_
}

type COPYFILE2_EXTENDED_PARAMETERS struct {
	DwSize uint32
	DwCopyFlags uint32
	PfCancel *BOOL
	PProgressRoutine uintptr
	PvCallbackContext unsafe.Pointer
}

type COPYFILE2_EXTENDED_PARAMETERS_V2 struct {
	DwSize uint32
	DwCopyFlags uint32
	PfCancel *BOOL
	PProgressRoutine uintptr
	PvCallbackContext unsafe.Pointer
	DwCopyFlagsV2 uint32
	IoDesiredSize uint32
	IoDesiredRate uint32
	Reserved [8]unsafe.Pointer
}

type FILE_BASIC_INFO struct {
	CreationTime int64
	LastAccessTime int64
	LastWriteTime int64
	ChangeTime int64
	FileAttributes uint32
}

type FILE_STANDARD_INFO struct {
	AllocationSize int64
	EndOfFile int64
	NumberOfLinks uint32
	DeletePending BOOLEAN
	Directory BOOLEAN
}

type FILE_NAME_INFO struct {
	FileNameLength uint32
	FileName [1]uint16
}

type FILE_RENAME_INFO_Anonymous_ struct {
	Data [1]uint32
}

func (this *FILE_RENAME_INFO_Anonymous_) ReplaceIfExists() *BOOLEAN{
	return (*BOOLEAN)(unsafe.Pointer(this))
}

func (this *FILE_RENAME_INFO_Anonymous_) ReplaceIfExistsVal() BOOLEAN{
	return *(*BOOLEAN)(unsafe.Pointer(this))
}

func (this *FILE_RENAME_INFO_Anonymous_) Flags() *uint32{
	return (*uint32)(unsafe.Pointer(this))
}

func (this *FILE_RENAME_INFO_Anonymous_) FlagsVal() uint32{
	return *(*uint32)(unsafe.Pointer(this))
}

type FILE_RENAME_INFO struct {
	FILE_RENAME_INFO_Anonymous_
	RootDirectory HANDLE
	FileNameLength uint32
	FileName [1]uint16
}

type FILE_ALLOCATION_INFO struct {
	AllocationSize int64
}

type FILE_END_OF_FILE_INFO struct {
	EndOfFile int64
}

type FILE_STREAM_INFO struct {
	NextEntryOffset uint32
	StreamNameLength uint32
	StreamSize int64
	StreamAllocationSize int64
	StreamName [1]uint16
}

type FILE_COMPRESSION_INFO struct {
	CompressedFileSize int64
	CompressionFormat uint16
	CompressionUnitShift uint8
	ChunkShift uint8
	ClusterShift uint8
	Reserved [3]uint8
}

type FILE_ATTRIBUTE_TAG_INFO struct {
	FileAttributes uint32
	ReparseTag uint32
}

type FILE_DISPOSITION_INFO struct {
	DeleteFileA BOOLEAN
}

type FILE_ID_BOTH_DIR_INFO struct {
	NextEntryOffset uint32
	FileIndex uint32
	CreationTime int64
	LastAccessTime int64
	LastWriteTime int64
	ChangeTime int64
	EndOfFile int64
	AllocationSize int64
	FileAttributes uint32
	FileNameLength uint32
	EaSize uint32
	ShortNameLength int8
	ShortName [12]uint16
	FileId int64
	FileName [1]uint16
}

type FILE_FULL_DIR_INFO struct {
	NextEntryOffset uint32
	FileIndex uint32
	CreationTime int64
	LastAccessTime int64
	LastWriteTime int64
	ChangeTime int64
	EndOfFile int64
	AllocationSize int64
	FileAttributes uint32
	FileNameLength uint32
	EaSize uint32
	FileName [1]uint16
}

type FILE_IO_PRIORITY_HINT_INFO struct {
	PriorityHint PRIORITY_HINT
}

type FILE_ALIGNMENT_INFO struct {
	AlignmentRequirement uint32
}

type FILE_STORAGE_INFO struct {
	LogicalBytesPerSector uint32
	PhysicalBytesPerSectorForAtomicity uint32
	PhysicalBytesPerSectorForPerformance uint32
	FileSystemEffectivePhysicalBytesPerSectorForAtomicity uint32
	Flags uint32
	ByteOffsetForSectorAlignment uint32
	ByteOffsetForPartitionAlignment uint32
}

type FILE_ID_INFO struct {
	VolumeSerialNumber uint64
	FileId FILE_ID_128
}

type FILE_ID_EXTD_DIR_INFO struct {
	NextEntryOffset uint32
	FileIndex uint32
	CreationTime int64
	LastAccessTime int64
	LastWriteTime int64
	ChangeTime int64
	EndOfFile int64
	AllocationSize int64
	FileAttributes uint32
	FileNameLength uint32
	EaSize uint32
	ReparsePointTag uint32
	FileId FILE_ID_128
	FileName [1]uint16
}

type FILE_REMOTE_PROTOCOL_INFO_ProtocolSpecific__Smb2__Share_ struct {
	Capabilities uint32
	CachingFlags uint32
}

type FILE_REMOTE_PROTOCOL_INFO_ProtocolSpecific__Smb2__Server_ struct {
	Capabilities uint32
}

type FILE_REMOTE_PROTOCOL_INFO_ProtocolSpecific__Smb2_ struct {
	Server FILE_REMOTE_PROTOCOL_INFO_ProtocolSpecific__Smb2__Server_
	Share FILE_REMOTE_PROTOCOL_INFO_ProtocolSpecific__Smb2__Share_
}

type FILE_REMOTE_PROTOCOL_INFO_ProtocolSpecific_ struct {
	Data [16]uint32
}

func (this *FILE_REMOTE_PROTOCOL_INFO_ProtocolSpecific_) Smb2() *FILE_REMOTE_PROTOCOL_INFO_ProtocolSpecific__Smb2_{
	return (*FILE_REMOTE_PROTOCOL_INFO_ProtocolSpecific__Smb2_)(unsafe.Pointer(this))
}

func (this *FILE_REMOTE_PROTOCOL_INFO_ProtocolSpecific_) Smb2Val() FILE_REMOTE_PROTOCOL_INFO_ProtocolSpecific__Smb2_{
	return *(*FILE_REMOTE_PROTOCOL_INFO_ProtocolSpecific__Smb2_)(unsafe.Pointer(this))
}

func (this *FILE_REMOTE_PROTOCOL_INFO_ProtocolSpecific_) Reserved() *[16]uint32{
	return (*[16]uint32)(unsafe.Pointer(this))
}

func (this *FILE_REMOTE_PROTOCOL_INFO_ProtocolSpecific_) ReservedVal() [16]uint32{
	return *(*[16]uint32)(unsafe.Pointer(this))
}

type FILE_REMOTE_PROTOCOL_INFO_GenericReserved_ struct {
	Reserved [8]uint32
}

type FILE_REMOTE_PROTOCOL_INFO struct {
	StructureVersion uint16
	StructureSize uint16
	Protocol uint32
	ProtocolMajorVersion uint16
	ProtocolMinorVersion uint16
	ProtocolRevision uint16
	Reserved uint16
	Flags uint32
	GenericReserved FILE_REMOTE_PROTOCOL_INFO_GenericReserved_
	ProtocolSpecific FILE_REMOTE_PROTOCOL_INFO_ProtocolSpecific_
}

type FILE_ID_DESCRIPTOR_Anonymous_ struct {
	Data [2]uint64
}

func (this *FILE_ID_DESCRIPTOR_Anonymous_) FileId() *int64{
	return (*int64)(unsafe.Pointer(this))
}

func (this *FILE_ID_DESCRIPTOR_Anonymous_) FileIdVal() int64{
	return *(*int64)(unsafe.Pointer(this))
}

func (this *FILE_ID_DESCRIPTOR_Anonymous_) ObjectId() *syscall.GUID{
	return (*syscall.GUID)(unsafe.Pointer(this))
}

func (this *FILE_ID_DESCRIPTOR_Anonymous_) ObjectIdVal() syscall.GUID{
	return *(*syscall.GUID)(unsafe.Pointer(this))
}

func (this *FILE_ID_DESCRIPTOR_Anonymous_) ExtendedFileId() *FILE_ID_128{
	return (*FILE_ID_128)(unsafe.Pointer(this))
}

func (this *FILE_ID_DESCRIPTOR_Anonymous_) ExtendedFileIdVal() FILE_ID_128{
	return *(*FILE_ID_128)(unsafe.Pointer(this))
}

type FILE_ID_DESCRIPTOR struct {
	DwSize uint32
	Type FILE_ID_TYPE
	FILE_ID_DESCRIPTOR_Anonymous_
}


// func types

type MAXMEDIALABEL func(pMaxSize *uint32) uint32

type CLAIMMEDIALABEL func(pBuffer *uint8, nBufferSize uint32, pLabelInfo *MediaLabelInfo) uint32

type CLAIMMEDIALABELEX func(pBuffer *uint8, nBufferSize uint32, pLabelInfo *MediaLabelInfo, LabelGuid *syscall.GUID) uint32

type CLFS_BLOCK_ALLOCATION func(cbBufferLength uint32, pvUserContext unsafe.Pointer) unsafe.Pointer

type CLFS_BLOCK_DEALLOCATION func(pvBuffer unsafe.Pointer, pvUserContext unsafe.Pointer)

type PCLFS_COMPLETION_ROUTINE func(pvOverlapped unsafe.Pointer, ulReserved uint32)

type PLOG_TAIL_ADVANCE_CALLBACK func(hLogFile HANDLE, lsnTarget CLS_LSN, pvClientContext unsafe.Pointer)

type PLOG_FULL_HANDLER_CALLBACK func(hLogFile HANDLE, dwError uint32, fLogIsPinned BOOL, pvClientContext unsafe.Pointer)

type PLOG_UNPINNED_CALLBACK func(hLogFile HANDLE, pvClientContext unsafe.Pointer)

type WofEnumEntryProc func(EntryInfo unsafe.Pointer, UserData unsafe.Pointer) BOOL

type WofEnumFilesProc func(FilePath PWSTR, ExternalFileInfo unsafe.Pointer, UserData unsafe.Pointer) BOOL

type PFN_IO_COMPLETION func(pContext *FIO_CONTEXT, lpo *FH_OVERLAPPED, cb uint32, dwCompletionStatus uint32)

type FCACHE_CREATE_CALLBACK func(lpstrName PSTR, lpvData unsafe.Pointer, cbFileSize *uint32, cbFileSizeHigh *uint32) HANDLE

type FCACHE_RICHCREATE_CALLBACK func(lpstrName PSTR, lpvData unsafe.Pointer, cbFileSize *uint32, cbFileSizeHigh *uint32, pfDidWeScanIt *BOOL, pfIsStuffed *BOOL, pfStoredWithDots *BOOL, pfStoredWithTerminatingDot *BOOL) HANDLE

type CACHE_KEY_COMPARE func(cbKey1 uint32, lpbKey1 *uint8, cbKey2 uint32, lpbKey2 *uint8) int32

type CACHE_KEY_HASH func(lpbKey *uint8, cbKey uint32) uint32

type CACHE_READ_CALLBACK func(cb uint32, lpb *uint8, lpvContext unsafe.Pointer) BOOL

type CACHE_DESTROY_CALLBACK func(cb uint32, lpb *uint8)

type CACHE_ACCESS_CHECK func(pSecurityDescriptor PSECURITY_DESCRIPTOR, hClientToken HANDLE, dwDesiredAccess uint32, GenericMapping *GENERIC_MAPPING, PrivilegeSet *PRIVILEGE_SET, PrivilegeSetLength *uint32, GrantedAccess *uint32, AccessStatus *int32) BOOL

type PFE_EXPORT_FUNC func(pbData *uint8, pvCallbackContext unsafe.Pointer, ulLength uint32) uint32

type PFE_IMPORT_FUNC func(pbData *uint8, pvCallbackContext unsafe.Pointer, ulLength *uint32) uint32

type LPPROGRESS_ROUTINE func(TotalFileSize int64, TotalBytesTransferred int64, StreamSize int64, StreamBytesTransferred int64, dwStreamNumber uint32, dwCallbackReason LPPROGRESS_ROUTINE_CALLBACK_REASON, hSourceFile HANDLE, hDestinationFile HANDLE, lpData unsafe.Pointer) uint32

type PCOPYFILE2_PROGRESS_ROUTINE func(pMessage *COPYFILE2_MESSAGE, pvCallbackContext unsafe.Pointer) COPYFILE2_MESSAGE_ACTION


// coms

// 7988b574-ec89-11cf-9c00-00aa00a14f56
var IID_IDiskQuotaUser = syscall.GUID{0x7988b574, 0xec89, 0x11cf, 
	[8]byte{0x9c, 0x00, 0x00, 0xaa, 0x00, 0xa1, 0x4f, 0x56}}

type IDiskQuotaUserInterface interface {
	IUnknownInterface
	GetID(pulID *uint32) HRESULT
	GetName(pszAccountContainer PWSTR, cchAccountContainer uint32, pszLogonName PWSTR, cchLogonName uint32, pszDisplayName PWSTR, cchDisplayName uint32) HRESULT
	GetSidLength(pdwLength *uint32) HRESULT
	GetSid(pbSidBuffer *uint8, cbSidBuffer uint32) HRESULT
	GetQuotaThreshold(pllThreshold *int64) HRESULT
	GetQuotaThresholdText(pszText PWSTR, cchText uint32) HRESULT
	GetQuotaLimit(pllLimit *int64) HRESULT
	GetQuotaLimitText(pszText PWSTR, cchText uint32) HRESULT
	GetQuotaUsed(pllUsed *int64) HRESULT
	GetQuotaUsedText(pszText PWSTR, cchText uint32) HRESULT
	GetQuotaInformation(pbQuotaInfo unsafe.Pointer, cbQuotaInfo uint32) HRESULT
	SetQuotaThreshold(llThreshold int64, fWriteThrough BOOL) HRESULT
	SetQuotaLimit(llLimit int64, fWriteThrough BOOL) HRESULT
	Invalidate() HRESULT
	GetAccountStatus(pdwStatus *uint32) HRESULT
}

type IDiskQuotaUserVtbl struct {
	IUnknownVtbl
	GetID uintptr
	GetName uintptr
	GetSidLength uintptr
	GetSid uintptr
	GetQuotaThreshold uintptr
	GetQuotaThresholdText uintptr
	GetQuotaLimit uintptr
	GetQuotaLimitText uintptr
	GetQuotaUsed uintptr
	GetQuotaUsedText uintptr
	GetQuotaInformation uintptr
	SetQuotaThreshold uintptr
	SetQuotaLimit uintptr
	Invalidate uintptr
	GetAccountStatus uintptr
}

type IDiskQuotaUser struct {
	IUnknown
}

func (this *IDiskQuotaUser) Vtbl() *IDiskQuotaUserVtbl {
	return (*IDiskQuotaUserVtbl)(unsafe.Pointer(this.IUnknown.LpVtbl))
}

func (this *IDiskQuotaUser) GetID(pulID *uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetID, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pulID)))
	return HRESULT(ret)
}

func (this *IDiskQuotaUser) GetName(pszAccountContainer PWSTR, cchAccountContainer uint32, pszLogonName PWSTR, cchLogonName uint32, pszDisplayName PWSTR, cchDisplayName uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetName, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pszAccountContainer)), uintptr(cchAccountContainer), uintptr(unsafe.Pointer(pszLogonName)), uintptr(cchLogonName), uintptr(unsafe.Pointer(pszDisplayName)), uintptr(cchDisplayName))
	return HRESULT(ret)
}

func (this *IDiskQuotaUser) GetSidLength(pdwLength *uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetSidLength, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pdwLength)))
	return HRESULT(ret)
}

func (this *IDiskQuotaUser) GetSid(pbSidBuffer *uint8, cbSidBuffer uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetSid, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pbSidBuffer)), uintptr(cbSidBuffer))
	return HRESULT(ret)
}

func (this *IDiskQuotaUser) GetQuotaThreshold(pllThreshold *int64) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetQuotaThreshold, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pllThreshold)))
	return HRESULT(ret)
}

func (this *IDiskQuotaUser) GetQuotaThresholdText(pszText PWSTR, cchText uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetQuotaThresholdText, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pszText)), uintptr(cchText))
	return HRESULT(ret)
}

func (this *IDiskQuotaUser) GetQuotaLimit(pllLimit *int64) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetQuotaLimit, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pllLimit)))
	return HRESULT(ret)
}

func (this *IDiskQuotaUser) GetQuotaLimitText(pszText PWSTR, cchText uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetQuotaLimitText, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pszText)), uintptr(cchText))
	return HRESULT(ret)
}

func (this *IDiskQuotaUser) GetQuotaUsed(pllUsed *int64) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetQuotaUsed, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pllUsed)))
	return HRESULT(ret)
}

func (this *IDiskQuotaUser) GetQuotaUsedText(pszText PWSTR, cchText uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetQuotaUsedText, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pszText)), uintptr(cchText))
	return HRESULT(ret)
}

func (this *IDiskQuotaUser) GetQuotaInformation(pbQuotaInfo unsafe.Pointer, cbQuotaInfo uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetQuotaInformation, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pbQuotaInfo)), uintptr(cbQuotaInfo))
	return HRESULT(ret)
}

func (this *IDiskQuotaUser) SetQuotaThreshold(llThreshold int64, fWriteThrough BOOL) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().SetQuotaThreshold, uintptr(unsafe.Pointer(this)), uintptr(llThreshold), uintptr(fWriteThrough))
	return HRESULT(ret)
}

func (this *IDiskQuotaUser) SetQuotaLimit(llLimit int64, fWriteThrough BOOL) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().SetQuotaLimit, uintptr(unsafe.Pointer(this)), uintptr(llLimit), uintptr(fWriteThrough))
	return HRESULT(ret)
}

func (this *IDiskQuotaUser) Invalidate() HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().Invalidate, uintptr(unsafe.Pointer(this)))
	return HRESULT(ret)
}

func (this *IDiskQuotaUser) GetAccountStatus(pdwStatus *uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetAccountStatus, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pdwStatus)))
	return HRESULT(ret)
}

// 7988b577-ec89-11cf-9c00-00aa00a14f56
var IID_IEnumDiskQuotaUsers = syscall.GUID{0x7988b577, 0xec89, 0x11cf, 
	[8]byte{0x9c, 0x00, 0x00, 0xaa, 0x00, 0xa1, 0x4f, 0x56}}

type IEnumDiskQuotaUsersInterface interface {
	IUnknownInterface
	Next(cUsers uint32, rgUsers **IDiskQuotaUser, pcUsersFetched *uint32) HRESULT
	Skip(cUsers uint32) HRESULT
	Reset() HRESULT
	Clone(ppEnum **IEnumDiskQuotaUsers) HRESULT
}

type IEnumDiskQuotaUsersVtbl struct {
	IUnknownVtbl
	Next uintptr
	Skip uintptr
	Reset uintptr
	Clone uintptr
}

type IEnumDiskQuotaUsers struct {
	IUnknown
}

func (this *IEnumDiskQuotaUsers) Vtbl() *IEnumDiskQuotaUsersVtbl {
	return (*IEnumDiskQuotaUsersVtbl)(unsafe.Pointer(this.IUnknown.LpVtbl))
}

func (this *IEnumDiskQuotaUsers) Next(cUsers uint32, rgUsers **IDiskQuotaUser, pcUsersFetched *uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().Next, uintptr(unsafe.Pointer(this)), uintptr(cUsers), uintptr(unsafe.Pointer(rgUsers)), uintptr(unsafe.Pointer(pcUsersFetched)))
	return HRESULT(ret)
}

func (this *IEnumDiskQuotaUsers) Skip(cUsers uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().Skip, uintptr(unsafe.Pointer(this)), uintptr(cUsers))
	return HRESULT(ret)
}

func (this *IEnumDiskQuotaUsers) Reset() HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().Reset, uintptr(unsafe.Pointer(this)))
	return HRESULT(ret)
}

func (this *IEnumDiskQuotaUsers) Clone(ppEnum **IEnumDiskQuotaUsers) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().Clone, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(ppEnum)))
	return HRESULT(ret)
}

// 7988b576-ec89-11cf-9c00-00aa00a14f56
var IID_IDiskQuotaUserBatch = syscall.GUID{0x7988b576, 0xec89, 0x11cf, 
	[8]byte{0x9c, 0x00, 0x00, 0xaa, 0x00, 0xa1, 0x4f, 0x56}}

type IDiskQuotaUserBatchInterface interface {
	IUnknownInterface
	Add(pUser *IDiskQuotaUser) HRESULT
	Remove(pUser *IDiskQuotaUser) HRESULT
	RemoveAll() HRESULT
	FlushToDisk() HRESULT
}

type IDiskQuotaUserBatchVtbl struct {
	IUnknownVtbl
	Add uintptr
	Remove uintptr
	RemoveAll uintptr
	FlushToDisk uintptr
}

type IDiskQuotaUserBatch struct {
	IUnknown
}

func (this *IDiskQuotaUserBatch) Vtbl() *IDiskQuotaUserBatchVtbl {
	return (*IDiskQuotaUserBatchVtbl)(unsafe.Pointer(this.IUnknown.LpVtbl))
}

func (this *IDiskQuotaUserBatch) Add(pUser *IDiskQuotaUser) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().Add, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pUser)))
	return HRESULT(ret)
}

func (this *IDiskQuotaUserBatch) Remove(pUser *IDiskQuotaUser) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().Remove, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pUser)))
	return HRESULT(ret)
}

func (this *IDiskQuotaUserBatch) RemoveAll() HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().RemoveAll, uintptr(unsafe.Pointer(this)))
	return HRESULT(ret)
}

func (this *IDiskQuotaUserBatch) FlushToDisk() HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().FlushToDisk, uintptr(unsafe.Pointer(this)))
	return HRESULT(ret)
}

// 7988b572-ec89-11cf-9c00-00aa00a14f56
var IID_IDiskQuotaControl = syscall.GUID{0x7988b572, 0xec89, 0x11cf, 
	[8]byte{0x9c, 0x00, 0x00, 0xaa, 0x00, 0xa1, 0x4f, 0x56}}

type IDiskQuotaControlInterface interface {
	IConnectionPointContainerInterface
	Initialize(pszPath PWSTR, bReadWrite BOOL) HRESULT
	SetQuotaState(dwState uint32) HRESULT
	GetQuotaState(pdwState *uint32) HRESULT
	SetQuotaLogFlags(dwFlags uint32) HRESULT
	GetQuotaLogFlags(pdwFlags *uint32) HRESULT
	SetDefaultQuotaThreshold(llThreshold int64) HRESULT
	GetDefaultQuotaThreshold(pllThreshold *int64) HRESULT
	GetDefaultQuotaThresholdText(pszText PWSTR, cchText uint32) HRESULT
	SetDefaultQuotaLimit(llLimit int64) HRESULT
	GetDefaultQuotaLimit(pllLimit *int64) HRESULT
	GetDefaultQuotaLimitText(pszText PWSTR, cchText uint32) HRESULT
	AddUserSid(pUserSid PSID, fNameResolution DISKQUOTA_USERNAME_RESOLVE, ppUser **IDiskQuotaUser) HRESULT
	AddUserName(pszLogonName PWSTR, fNameResolution DISKQUOTA_USERNAME_RESOLVE, ppUser **IDiskQuotaUser) HRESULT
	DeleteUser(pUser *IDiskQuotaUser) HRESULT
	FindUserSid(pUserSid PSID, fNameResolution DISKQUOTA_USERNAME_RESOLVE, ppUser **IDiskQuotaUser) HRESULT
	FindUserName(pszLogonName PWSTR, ppUser **IDiskQuotaUser) HRESULT
	CreateEnumUsers(rgpUserSids *PSID, cpSids uint32, fNameResolution DISKQUOTA_USERNAME_RESOLVE, ppEnum **IEnumDiskQuotaUsers) HRESULT
	CreateUserBatch(ppBatch **IDiskQuotaUserBatch) HRESULT
	InvalidateSidNameCache() HRESULT
	GiveUserNameResolutionPriority(pUser *IDiskQuotaUser) HRESULT
	ShutdownNameResolution() HRESULT
}

type IDiskQuotaControlVtbl struct {
	IConnectionPointContainerVtbl
	Initialize uintptr
	SetQuotaState uintptr
	GetQuotaState uintptr
	SetQuotaLogFlags uintptr
	GetQuotaLogFlags uintptr
	SetDefaultQuotaThreshold uintptr
	GetDefaultQuotaThreshold uintptr
	GetDefaultQuotaThresholdText uintptr
	SetDefaultQuotaLimit uintptr
	GetDefaultQuotaLimit uintptr
	GetDefaultQuotaLimitText uintptr
	AddUserSid uintptr
	AddUserName uintptr
	DeleteUser uintptr
	FindUserSid uintptr
	FindUserName uintptr
	CreateEnumUsers uintptr
	CreateUserBatch uintptr
	InvalidateSidNameCache uintptr
	GiveUserNameResolutionPriority uintptr
	ShutdownNameResolution uintptr
}

type IDiskQuotaControl struct {
	IConnectionPointContainer
}

func (this *IDiskQuotaControl) Vtbl() *IDiskQuotaControlVtbl {
	return (*IDiskQuotaControlVtbl)(unsafe.Pointer(this.IUnknown.LpVtbl))
}

func (this *IDiskQuotaControl) Initialize(pszPath PWSTR, bReadWrite BOOL) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().Initialize, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pszPath)), uintptr(bReadWrite))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) SetQuotaState(dwState uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().SetQuotaState, uintptr(unsafe.Pointer(this)), uintptr(dwState))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) GetQuotaState(pdwState *uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetQuotaState, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pdwState)))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) SetQuotaLogFlags(dwFlags uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().SetQuotaLogFlags, uintptr(unsafe.Pointer(this)), uintptr(dwFlags))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) GetQuotaLogFlags(pdwFlags *uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetQuotaLogFlags, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pdwFlags)))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) SetDefaultQuotaThreshold(llThreshold int64) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().SetDefaultQuotaThreshold, uintptr(unsafe.Pointer(this)), uintptr(llThreshold))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) GetDefaultQuotaThreshold(pllThreshold *int64) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetDefaultQuotaThreshold, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pllThreshold)))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) GetDefaultQuotaThresholdText(pszText PWSTR, cchText uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetDefaultQuotaThresholdText, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pszText)), uintptr(cchText))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) SetDefaultQuotaLimit(llLimit int64) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().SetDefaultQuotaLimit, uintptr(unsafe.Pointer(this)), uintptr(llLimit))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) GetDefaultQuotaLimit(pllLimit *int64) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetDefaultQuotaLimit, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pllLimit)))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) GetDefaultQuotaLimitText(pszText PWSTR, cchText uint32) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GetDefaultQuotaLimitText, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pszText)), uintptr(cchText))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) AddUserSid(pUserSid PSID, fNameResolution DISKQUOTA_USERNAME_RESOLVE, ppUser **IDiskQuotaUser) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().AddUserSid, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pUserSid)), uintptr(fNameResolution), uintptr(unsafe.Pointer(ppUser)))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) AddUserName(pszLogonName PWSTR, fNameResolution DISKQUOTA_USERNAME_RESOLVE, ppUser **IDiskQuotaUser) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().AddUserName, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pszLogonName)), uintptr(fNameResolution), uintptr(unsafe.Pointer(ppUser)))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) DeleteUser(pUser *IDiskQuotaUser) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().DeleteUser, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pUser)))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) FindUserSid(pUserSid PSID, fNameResolution DISKQUOTA_USERNAME_RESOLVE, ppUser **IDiskQuotaUser) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().FindUserSid, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pUserSid)), uintptr(fNameResolution), uintptr(unsafe.Pointer(ppUser)))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) FindUserName(pszLogonName PWSTR, ppUser **IDiskQuotaUser) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().FindUserName, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pszLogonName)), uintptr(unsafe.Pointer(ppUser)))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) CreateEnumUsers(rgpUserSids *PSID, cpSids uint32, fNameResolution DISKQUOTA_USERNAME_RESOLVE, ppEnum **IEnumDiskQuotaUsers) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().CreateEnumUsers, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(rgpUserSids)), uintptr(cpSids), uintptr(fNameResolution), uintptr(unsafe.Pointer(ppEnum)))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) CreateUserBatch(ppBatch **IDiskQuotaUserBatch) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().CreateUserBatch, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(ppBatch)))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) InvalidateSidNameCache() HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().InvalidateSidNameCache, uintptr(unsafe.Pointer(this)))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) GiveUserNameResolutionPriority(pUser *IDiskQuotaUser) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().GiveUserNameResolutionPriority, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pUser)))
	return HRESULT(ret)
}

func (this *IDiskQuotaControl) ShutdownNameResolution() HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().ShutdownNameResolution, uintptr(unsafe.Pointer(this)))
	return HRESULT(ret)
}

// 7988b579-ec89-11cf-9c00-00aa00a14f56
var IID_IDiskQuotaEvents = syscall.GUID{0x7988b579, 0xec89, 0x11cf, 
	[8]byte{0x9c, 0x00, 0x00, 0xaa, 0x00, 0xa1, 0x4f, 0x56}}

type IDiskQuotaEventsInterface interface {
	IUnknownInterface
	OnUserNameChanged(pUser *IDiskQuotaUser) HRESULT
}

type IDiskQuotaEventsVtbl struct {
	IUnknownVtbl
	OnUserNameChanged uintptr
}

type IDiskQuotaEvents struct {
	IUnknown
}

func (this *IDiskQuotaEvents) Vtbl() *IDiskQuotaEventsVtbl {
	return (*IDiskQuotaEventsVtbl)(unsafe.Pointer(this.IUnknown.LpVtbl))
}

func (this *IDiskQuotaEvents) OnUserNameChanged(pUser *IDiskQuotaUser) HRESULT{
	ret, _, _ := syscall.SyscallN(this.Vtbl().OnUserNameChanged, uintptr(unsafe.Pointer(this)), uintptr(unsafe.Pointer(pUser)))
	return HRESULT(ret)
}


var (
	pSearchPathW uintptr
	pSearchPathA uintptr
	pCompareFileTime uintptr
	pCreateDirectoryA uintptr
	pCreateDirectoryW uintptr
	pCreateFileA uintptr
	pCreateFileW uintptr
	pDefineDosDeviceW uintptr
	pDeleteFileA uintptr
	pDeleteFileW uintptr
	pDeleteVolumeMountPointW uintptr
	pFileTimeToLocalFileTime uintptr
	pFindClose uintptr
	pFindCloseChangeNotification uintptr
	pFindFirstChangeNotificationA uintptr
	pFindFirstChangeNotificationW uintptr
	pFindFirstFileA uintptr
	pFindFirstFileW uintptr
	pFindFirstFileExA uintptr
	pFindFirstFileExW uintptr
	pFindFirstVolumeW uintptr
	pFindNextChangeNotification uintptr
	pFindNextFileA uintptr
	pFindNextFileW uintptr
	pFindNextVolumeW uintptr
	pFindVolumeClose uintptr
	pFlushFileBuffers uintptr
	pGetDiskFreeSpaceA uintptr
	pGetDiskFreeSpaceW uintptr
	pGetDiskFreeSpaceExA uintptr
	pGetDiskFreeSpaceExW uintptr
	pGetDiskSpaceInformationA uintptr
	pGetDiskSpaceInformationW uintptr
	pGetDriveTypeA uintptr
	pGetDriveTypeW uintptr
	pGetFileAttributesA uintptr
	pGetFileAttributesW uintptr
	pGetFileAttributesExA uintptr
	pGetFileAttributesExW uintptr
	pGetFileInformationByHandle uintptr
	pGetFileSize uintptr
	pGetFileSizeEx uintptr
	pGetFileType uintptr
	pGetFinalPathNameByHandleA uintptr
	pGetFinalPathNameByHandleW uintptr
	pGetFileTime uintptr
	pGetFullPathNameW uintptr
	pGetFullPathNameA uintptr
	pGetLogicalDrives uintptr
	pGetLogicalDriveStringsW uintptr
	pGetLongPathNameA uintptr
	pGetLongPathNameW uintptr
	pAreShortNamesEnabled uintptr
	pGetShortPathNameW uintptr
	pGetTempFileNameW uintptr
	pGetVolumeInformationByHandleW uintptr
	pGetVolumeInformationW uintptr
	pGetVolumePathNameW uintptr
	pLocalFileTimeToFileTime uintptr
	pLockFile uintptr
	pLockFileEx uintptr
	pQueryDosDeviceW uintptr
	pReadFile uintptr
	pReadFileEx uintptr
	pReadFileScatter uintptr
	pRemoveDirectoryA uintptr
	pRemoveDirectoryW uintptr
	pSetEndOfFile uintptr
	pSetFileAttributesA uintptr
	pSetFileAttributesW uintptr
	pSetFileInformationByHandle uintptr
	pSetFilePointer uintptr
	pSetFilePointerEx uintptr
	pSetFileTime uintptr
	pSetFileValidData uintptr
	pUnlockFile uintptr
	pUnlockFileEx uintptr
	pWriteFile uintptr
	pWriteFileEx uintptr
	pWriteFileGather uintptr
	pGetTempPathW uintptr
	pGetVolumeNameForVolumeMountPointW uintptr
	pGetVolumePathNamesForVolumeNameW uintptr
	pCreateFile2 uintptr
	pSetFileIoOverlappedRange uintptr
	pGetCompressedFileSizeA uintptr
	pGetCompressedFileSizeW uintptr
	pFindFirstStreamW uintptr
	pFindNextStreamW uintptr
	pAreFileApisANSI uintptr
	pGetTempPathA uintptr
	pFindFirstFileNameW uintptr
	pFindNextFileNameW uintptr
	pGetVolumeInformationA uintptr
	pGetTempFileNameA uintptr
	pSetFileApisToOEM uintptr
	pSetFileApisToANSI uintptr
	pGetTempPath2W uintptr
	pGetTempPath2A uintptr
	pVerFindFileA uintptr
	pVerFindFileW uintptr
	pVerInstallFileA uintptr
	pVerInstallFileW uintptr
	pGetFileVersionInfoSizeA uintptr
	pGetFileVersionInfoSizeW uintptr
	pGetFileVersionInfoA uintptr
	pGetFileVersionInfoW uintptr
	pGetFileVersionInfoSizeExA uintptr
	pGetFileVersionInfoSizeExW uintptr
	pGetFileVersionInfoExA uintptr
	pGetFileVersionInfoExW uintptr
	pVerLanguageNameA uintptr
	pVerLanguageNameW uintptr
	pVerQueryValueA uintptr
	pVerQueryValueW uintptr
	pQueryUsersOnEncryptedFile uintptr
	pQueryRecoveryAgentsOnEncryptedFile uintptr
	pRemoveUsersFromEncryptedFile uintptr
	pAddUsersToEncryptedFile uintptr
	pSetUserFileEncryptionKey uintptr
	pSetUserFileEncryptionKeyEx uintptr
	pFreeEncryptionCertificateHashList uintptr
	pEncryptionDisable uintptr
	pDuplicateEncryptionInfoFile uintptr
	pGetEncryptedFileMetadata uintptr
	pSetEncryptedFileMetadata uintptr
	pFreeEncryptedFileMetadata uintptr
	pLZStart uintptr
	pLZDone uintptr
	pCopyLZFile uintptr
	pLZCopy uintptr
	pLZInit uintptr
	pGetExpandedNameA uintptr
	pGetExpandedNameW uintptr
	pLZOpenFileA uintptr
	pLZOpenFileW uintptr
	pLZSeek uintptr
	pLZRead uintptr
	pLZClose uintptr
	pWow64EnableWow64FsRedirection uintptr
	pWow64DisableWow64FsRedirection uintptr
	pWow64RevertWow64FsRedirection uintptr
	pGetBinaryTypeA uintptr
	pGetBinaryTypeW uintptr
	pGetShortPathNameA uintptr
	pGetLongPathNameTransactedA uintptr
	pGetLongPathNameTransactedW uintptr
	pSetFileCompletionNotificationModes uintptr
	pSetFileShortNameA uintptr
	pSetFileShortNameW uintptr
	pSetTapePosition uintptr
	pGetTapePosition uintptr
	pPrepareTape uintptr
	pEraseTape uintptr
	pCreateTapePartition uintptr
	pWriteTapemark uintptr
	pGetTapeStatus uintptr
	pGetTapeParameters uintptr
	pSetTapeParameters uintptr
	pEncryptFileA uintptr
	pEncryptFileW uintptr
	pDecryptFileA uintptr
	pDecryptFileW uintptr
	pFileEncryptionStatusA uintptr
	pFileEncryptionStatusW uintptr
	pOpenEncryptedFileRawA uintptr
	pOpenEncryptedFileRawW uintptr
	pReadEncryptedFileRaw uintptr
	pWriteEncryptedFileRaw uintptr
	pCloseEncryptedFileRaw uintptr
	pOpenFile uintptr
	pBackupRead uintptr
	pBackupSeek uintptr
	pBackupWrite uintptr
	pGetLogicalDriveStringsA uintptr
	pSetSearchPathMode uintptr
	pCreateDirectoryExA uintptr
	pCreateDirectoryExW uintptr
	pCreateDirectoryTransactedA uintptr
	pCreateDirectoryTransactedW uintptr
	pRemoveDirectoryTransactedA uintptr
	pRemoveDirectoryTransactedW uintptr
	pGetFullPathNameTransactedA uintptr
	pGetFullPathNameTransactedW uintptr
	pDefineDosDeviceA uintptr
	pQueryDosDeviceA uintptr
	pCreateFileTransactedA uintptr
	pCreateFileTransactedW uintptr
	pReOpenFile uintptr
	pSetFileAttributesTransactedA uintptr
	pSetFileAttributesTransactedW uintptr
	pGetFileAttributesTransactedA uintptr
	pGetFileAttributesTransactedW uintptr
	pGetCompressedFileSizeTransactedA uintptr
	pGetCompressedFileSizeTransactedW uintptr
	pDeleteFileTransactedA uintptr
	pDeleteFileTransactedW uintptr
	pCheckNameLegalDOS8Dot3A uintptr
	pCheckNameLegalDOS8Dot3W uintptr
	pFindFirstFileTransactedA uintptr
	pFindFirstFileTransactedW uintptr
	pCopyFileA uintptr
	pCopyFileW uintptr
	pCopyFileExA uintptr
	pCopyFileExW uintptr
	pCopyFileTransactedA uintptr
	pCopyFileTransactedW uintptr
	pCopyFile2 uintptr
	pMoveFileA uintptr
	pMoveFileW uintptr
	pMoveFileExA uintptr
	pMoveFileExW uintptr
	pMoveFileWithProgressA uintptr
	pMoveFileWithProgressW uintptr
	pMoveFileTransactedA uintptr
	pMoveFileTransactedW uintptr
	pReplaceFileA uintptr
	pReplaceFileW uintptr
	pCreateHardLinkA uintptr
	pCreateHardLinkW uintptr
	pCreateHardLinkTransactedA uintptr
	pCreateHardLinkTransactedW uintptr
	pFindFirstStreamTransactedW uintptr
	pFindFirstFileNameTransactedW uintptr
	pSetVolumeLabelA uintptr
	pSetVolumeLabelW uintptr
	pSetFileBandwidthReservation uintptr
	pGetFileBandwidthReservation uintptr
	pReadDirectoryChangesW uintptr
	pReadDirectoryChangesExW uintptr
	pFindFirstVolumeA uintptr
	pFindNextVolumeA uintptr
	pFindFirstVolumeMountPointA uintptr
	pFindFirstVolumeMountPointW uintptr
	pFindNextVolumeMountPointA uintptr
	pFindNextVolumeMountPointW uintptr
	pFindVolumeMountPointClose uintptr
	pSetVolumeMountPointA uintptr
	pSetVolumeMountPointW uintptr
	pDeleteVolumeMountPointA uintptr
	pGetVolumeNameForVolumeMountPointA uintptr
	pGetVolumePathNameA uintptr
	pGetVolumePathNamesForVolumeNameA uintptr
	pGetFileInformationByHandleEx uintptr
	pOpenFileById uintptr
	pCreateSymbolicLinkA uintptr
	pCreateSymbolicLinkW uintptr
	pCreateSymbolicLinkTransactedA uintptr
	pCreateSymbolicLinkTransactedW uintptr
)

var SearchPath = SearchPathW
func SearchPathW(lpPath PWSTR, lpFileName PWSTR, lpExtension PWSTR, nBufferLength uint32, lpBuffer *uint16, lpFilePart *PWSTR) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pSearchPathW, libKernel32, "SearchPathW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpPath)), uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpExtension)), uintptr(nBufferLength), uintptr(unsafe.Pointer(lpBuffer)), uintptr(unsafe.Pointer(lpFilePart)))
	return uint32(ret), WIN32_ERROR(err)
}

func SearchPathA(lpPath PSTR, lpFileName PSTR, lpExtension PSTR, nBufferLength uint32, lpBuffer *uint8, lpFilePart *PSTR) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pSearchPathA, libKernel32, "SearchPathA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpPath)), uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpExtension)), uintptr(nBufferLength), uintptr(unsafe.Pointer(lpBuffer)), uintptr(unsafe.Pointer(lpFilePart)))
	return uint32(ret), WIN32_ERROR(err)
}

func CompareFileTime(lpFileTime1 *FILETIME, lpFileTime2 *FILETIME) int32 {
	addr := lazyAddr(&pCompareFileTime, libKernel32, "CompareFileTime")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileTime1)), uintptr(unsafe.Pointer(lpFileTime2)))
	return int32(ret)
}

func CreateDirectoryA(lpPathName PSTR, lpSecurityAttributes *SECURITY_ATTRIBUTES) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCreateDirectoryA, libKernel32, "CreateDirectoryA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpPathName)), uintptr(unsafe.Pointer(lpSecurityAttributes)))
	return BOOL(ret), WIN32_ERROR(err)
}

var CreateDirectory = CreateDirectoryW
func CreateDirectoryW(lpPathName PWSTR, lpSecurityAttributes *SECURITY_ATTRIBUTES) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCreateDirectoryW, libKernel32, "CreateDirectoryW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpPathName)), uintptr(unsafe.Pointer(lpSecurityAttributes)))
	return BOOL(ret), WIN32_ERROR(err)
}

func CreateFileA(lpFileName PSTR, dwDesiredAccess FILE_ACCESS_FLAGS, dwShareMode FILE_SHARE_MODE, lpSecurityAttributes *SECURITY_ATTRIBUTES, dwCreationDisposition FILE_CREATION_DISPOSITION, dwFlagsAndAttributes FILE_FLAGS_AND_ATTRIBUTES, hTemplateFile HANDLE) (HANDLE, WIN32_ERROR) {
	addr := lazyAddr(&pCreateFileA, libKernel32, "CreateFileA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(dwDesiredAccess), uintptr(dwShareMode), uintptr(unsafe.Pointer(lpSecurityAttributes)), uintptr(dwCreationDisposition), uintptr(dwFlagsAndAttributes), hTemplateFile)
	return HANDLE(ret), WIN32_ERROR(err)
}

var CreateFile = CreateFileW
func CreateFileW(lpFileName PWSTR, dwDesiredAccess FILE_ACCESS_FLAGS, dwShareMode FILE_SHARE_MODE, lpSecurityAttributes *SECURITY_ATTRIBUTES, dwCreationDisposition FILE_CREATION_DISPOSITION, dwFlagsAndAttributes FILE_FLAGS_AND_ATTRIBUTES, hTemplateFile HANDLE) (HANDLE, WIN32_ERROR) {
	addr := lazyAddr(&pCreateFileW, libKernel32, "CreateFileW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(dwDesiredAccess), uintptr(dwShareMode), uintptr(unsafe.Pointer(lpSecurityAttributes)), uintptr(dwCreationDisposition), uintptr(dwFlagsAndAttributes), hTemplateFile)
	return HANDLE(ret), WIN32_ERROR(err)
}

var DefineDosDevice = DefineDosDeviceW
func DefineDosDeviceW(dwFlags DEFINE_DOS_DEVICE_FLAGS, lpDeviceName PWSTR, lpTargetPath PWSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pDefineDosDeviceW, libKernel32, "DefineDosDeviceW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(dwFlags), uintptr(unsafe.Pointer(lpDeviceName)), uintptr(unsafe.Pointer(lpTargetPath)))
	return BOOL(ret), WIN32_ERROR(err)
}

func DeleteFileA(lpFileName PSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pDeleteFileA, libKernel32, "DeleteFileA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)))
	return BOOL(ret), WIN32_ERROR(err)
}

var DeleteFile = DeleteFileW
func DeleteFileW(lpFileName PWSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pDeleteFileW, libKernel32, "DeleteFileW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)))
	return BOOL(ret), WIN32_ERROR(err)
}

var DeleteVolumeMountPoint = DeleteVolumeMountPointW
func DeleteVolumeMountPointW(lpszVolumeMountPoint PWSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pDeleteVolumeMountPointW, libKernel32, "DeleteVolumeMountPointW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszVolumeMountPoint)))
	return BOOL(ret), WIN32_ERROR(err)
}

func FileTimeToLocalFileTime(lpFileTime *FILETIME, lpLocalFileTime *FILETIME) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFileTimeToLocalFileTime, libKernel32, "FileTimeToLocalFileTime")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileTime)), uintptr(unsafe.Pointer(lpLocalFileTime)))
	return BOOL(ret), WIN32_ERROR(err)
}

func FindClose(hFindFile FindFileHandle) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFindClose, libKernel32, "FindClose")
	ret, _,  err := syscall.SyscallN(addr, hFindFile)
	return BOOL(ret), WIN32_ERROR(err)
}

func FindCloseChangeNotification(hChangeHandle FindChangeNotificationHandle) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFindCloseChangeNotification, libKernel32, "FindCloseChangeNotification")
	ret, _,  err := syscall.SyscallN(addr, hChangeHandle)
	return BOOL(ret), WIN32_ERROR(err)
}

func FindFirstChangeNotificationA(lpPathName PSTR, bWatchSubtree BOOL, dwNotifyFilter FILE_NOTIFY_CHANGE) (FindChangeNotificationHandle, WIN32_ERROR) {
	addr := lazyAddr(&pFindFirstChangeNotificationA, libKernel32, "FindFirstChangeNotificationA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpPathName)), uintptr(bWatchSubtree), uintptr(dwNotifyFilter))
	return FindChangeNotificationHandle(ret), WIN32_ERROR(err)
}

var FindFirstChangeNotification = FindFirstChangeNotificationW
func FindFirstChangeNotificationW(lpPathName PWSTR, bWatchSubtree BOOL, dwNotifyFilter FILE_NOTIFY_CHANGE) (FindChangeNotificationHandle, WIN32_ERROR) {
	addr := lazyAddr(&pFindFirstChangeNotificationW, libKernel32, "FindFirstChangeNotificationW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpPathName)), uintptr(bWatchSubtree), uintptr(dwNotifyFilter))
	return FindChangeNotificationHandle(ret), WIN32_ERROR(err)
}

func FindFirstFileA(lpFileName PSTR, lpFindFileData *WIN32_FIND_DATAA) (FindFileHandle, WIN32_ERROR) {
	addr := lazyAddr(&pFindFirstFileA, libKernel32, "FindFirstFileA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpFindFileData)))
	return FindFileHandle(ret), WIN32_ERROR(err)
}

var FindFirstFile = FindFirstFileW
func FindFirstFileW(lpFileName PWSTR, lpFindFileData *WIN32_FIND_DATAW) (FindFileHandle, WIN32_ERROR) {
	addr := lazyAddr(&pFindFirstFileW, libKernel32, "FindFirstFileW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpFindFileData)))
	return FindFileHandle(ret), WIN32_ERROR(err)
}

func FindFirstFileExA(lpFileName PSTR, fInfoLevelId FINDEX_INFO_LEVELS, lpFindFileData unsafe.Pointer, fSearchOp FINDEX_SEARCH_OPS, lpSearchFilter unsafe.Pointer, dwAdditionalFlags FIND_FIRST_EX_FLAGS) (FindFileHandle, WIN32_ERROR) {
	addr := lazyAddr(&pFindFirstFileExA, libKernel32, "FindFirstFileExA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(fInfoLevelId), uintptr(lpFindFileData), uintptr(fSearchOp), uintptr(lpSearchFilter), uintptr(dwAdditionalFlags))
	return FindFileHandle(ret), WIN32_ERROR(err)
}

var FindFirstFileEx = FindFirstFileExW
func FindFirstFileExW(lpFileName PWSTR, fInfoLevelId FINDEX_INFO_LEVELS, lpFindFileData unsafe.Pointer, fSearchOp FINDEX_SEARCH_OPS, lpSearchFilter unsafe.Pointer, dwAdditionalFlags FIND_FIRST_EX_FLAGS) (FindFileHandle, WIN32_ERROR) {
	addr := lazyAddr(&pFindFirstFileExW, libKernel32, "FindFirstFileExW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(fInfoLevelId), uintptr(lpFindFileData), uintptr(fSearchOp), uintptr(lpSearchFilter), uintptr(dwAdditionalFlags))
	return FindFileHandle(ret), WIN32_ERROR(err)
}

var FindFirstVolume = FindFirstVolumeW
func FindFirstVolumeW(lpszVolumeName *uint16, cchBufferLength uint32) (FindVolumeHandle, WIN32_ERROR) {
	addr := lazyAddr(&pFindFirstVolumeW, libKernel32, "FindFirstVolumeW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszVolumeName)), uintptr(cchBufferLength))
	return FindVolumeHandle(ret), WIN32_ERROR(err)
}

func FindNextChangeNotification(hChangeHandle FindChangeNotificationHandle) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFindNextChangeNotification, libKernel32, "FindNextChangeNotification")
	ret, _,  err := syscall.SyscallN(addr, hChangeHandle)
	return BOOL(ret), WIN32_ERROR(err)
}

func FindNextFileA(hFindFile FindFileHandle, lpFindFileData *WIN32_FIND_DATAA) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFindNextFileA, libKernel32, "FindNextFileA")
	ret, _,  err := syscall.SyscallN(addr, hFindFile, uintptr(unsafe.Pointer(lpFindFileData)))
	return BOOL(ret), WIN32_ERROR(err)
}

var FindNextFile = FindNextFileW
func FindNextFileW(hFindFile HANDLE, lpFindFileData *WIN32_FIND_DATAW) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFindNextFileW, libKernel32, "FindNextFileW")
	ret, _,  err := syscall.SyscallN(addr, hFindFile, uintptr(unsafe.Pointer(lpFindFileData)))
	return BOOL(ret), WIN32_ERROR(err)
}

var FindNextVolume = FindNextVolumeW
func FindNextVolumeW(hFindVolume FindVolumeHandle, lpszVolumeName *uint16, cchBufferLength uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFindNextVolumeW, libKernel32, "FindNextVolumeW")
	ret, _,  err := syscall.SyscallN(addr, hFindVolume, uintptr(unsafe.Pointer(lpszVolumeName)), uintptr(cchBufferLength))
	return BOOL(ret), WIN32_ERROR(err)
}

func FindVolumeClose(hFindVolume FindVolumeHandle) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFindVolumeClose, libKernel32, "FindVolumeClose")
	ret, _,  err := syscall.SyscallN(addr, hFindVolume)
	return BOOL(ret), WIN32_ERROR(err)
}

func FlushFileBuffers(hFile HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFlushFileBuffers, libKernel32, "FlushFileBuffers")
	ret, _,  err := syscall.SyscallN(addr, hFile)
	return BOOL(ret), WIN32_ERROR(err)
}

func GetDiskFreeSpaceA(lpRootPathName PSTR, lpSectorsPerCluster *uint32, lpBytesPerSector *uint32, lpNumberOfFreeClusters *uint32, lpTotalNumberOfClusters *uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetDiskFreeSpaceA, libKernel32, "GetDiskFreeSpaceA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpRootPathName)), uintptr(unsafe.Pointer(lpSectorsPerCluster)), uintptr(unsafe.Pointer(lpBytesPerSector)), uintptr(unsafe.Pointer(lpNumberOfFreeClusters)), uintptr(unsafe.Pointer(lpTotalNumberOfClusters)))
	return BOOL(ret), WIN32_ERROR(err)
}

var GetDiskFreeSpace = GetDiskFreeSpaceW
func GetDiskFreeSpaceW(lpRootPathName PWSTR, lpSectorsPerCluster *uint32, lpBytesPerSector *uint32, lpNumberOfFreeClusters *uint32, lpTotalNumberOfClusters *uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetDiskFreeSpaceW, libKernel32, "GetDiskFreeSpaceW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpRootPathName)), uintptr(unsafe.Pointer(lpSectorsPerCluster)), uintptr(unsafe.Pointer(lpBytesPerSector)), uintptr(unsafe.Pointer(lpNumberOfFreeClusters)), uintptr(unsafe.Pointer(lpTotalNumberOfClusters)))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetDiskFreeSpaceExA(lpDirectoryName PSTR, lpFreeBytesAvailableToCaller *uint64, lpTotalNumberOfBytes *uint64, lpTotalNumberOfFreeBytes *uint64) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetDiskFreeSpaceExA, libKernel32, "GetDiskFreeSpaceExA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpDirectoryName)), uintptr(unsafe.Pointer(lpFreeBytesAvailableToCaller)), uintptr(unsafe.Pointer(lpTotalNumberOfBytes)), uintptr(unsafe.Pointer(lpTotalNumberOfFreeBytes)))
	return BOOL(ret), WIN32_ERROR(err)
}

var GetDiskFreeSpaceEx = GetDiskFreeSpaceExW
func GetDiskFreeSpaceExW(lpDirectoryName PWSTR, lpFreeBytesAvailableToCaller *uint64, lpTotalNumberOfBytes *uint64, lpTotalNumberOfFreeBytes *uint64) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetDiskFreeSpaceExW, libKernel32, "GetDiskFreeSpaceExW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpDirectoryName)), uintptr(unsafe.Pointer(lpFreeBytesAvailableToCaller)), uintptr(unsafe.Pointer(lpTotalNumberOfBytes)), uintptr(unsafe.Pointer(lpTotalNumberOfFreeBytes)))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetDiskSpaceInformationA(rootPath PSTR, diskSpaceInfo *DISK_SPACE_INFORMATION) HRESULT {
	addr := lazyAddr(&pGetDiskSpaceInformationA, libKernel32, "GetDiskSpaceInformationA")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(rootPath)), uintptr(unsafe.Pointer(diskSpaceInfo)))
	return HRESULT(ret)
}

var GetDiskSpaceInformation = GetDiskSpaceInformationW
func GetDiskSpaceInformationW(rootPath PWSTR, diskSpaceInfo *DISK_SPACE_INFORMATION) HRESULT {
	addr := lazyAddr(&pGetDiskSpaceInformationW, libKernel32, "GetDiskSpaceInformationW")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(rootPath)), uintptr(unsafe.Pointer(diskSpaceInfo)))
	return HRESULT(ret)
}

func GetDriveTypeA(lpRootPathName PSTR) uint32 {
	addr := lazyAddr(&pGetDriveTypeA, libKernel32, "GetDriveTypeA")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpRootPathName)))
	return uint32(ret)
}

var GetDriveType = GetDriveTypeW
func GetDriveTypeW(lpRootPathName PWSTR) uint32 {
	addr := lazyAddr(&pGetDriveTypeW, libKernel32, "GetDriveTypeW")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpRootPathName)))
	return uint32(ret)
}

func GetFileAttributesA(lpFileName PSTR) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileAttributesA, libKernel32, "GetFileAttributesA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)))
	return uint32(ret), WIN32_ERROR(err)
}

var GetFileAttributes = GetFileAttributesW
func GetFileAttributesW(lpFileName PWSTR) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileAttributesW, libKernel32, "GetFileAttributesW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)))
	return uint32(ret), WIN32_ERROR(err)
}

func GetFileAttributesExA(lpFileName PSTR, fInfoLevelId GET_FILEEX_INFO_LEVELS, lpFileInformation unsafe.Pointer) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileAttributesExA, libKernel32, "GetFileAttributesExA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(fInfoLevelId), uintptr(lpFileInformation))
	return BOOL(ret), WIN32_ERROR(err)
}

var GetFileAttributesEx = GetFileAttributesExW
func GetFileAttributesExW(lpFileName PWSTR, fInfoLevelId GET_FILEEX_INFO_LEVELS, lpFileInformation unsafe.Pointer) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileAttributesExW, libKernel32, "GetFileAttributesExW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(fInfoLevelId), uintptr(lpFileInformation))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetFileInformationByHandle(hFile HANDLE, lpFileInformation *BY_HANDLE_FILE_INFORMATION) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileInformationByHandle, libKernel32, "GetFileInformationByHandle")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(unsafe.Pointer(lpFileInformation)))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetFileSize(hFile HANDLE, lpFileSizeHigh *uint32) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileSize, libKernel32, "GetFileSize")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(unsafe.Pointer(lpFileSizeHigh)))
	return uint32(ret), WIN32_ERROR(err)
}

func GetFileSizeEx(hFile HANDLE, lpFileSize *int64) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileSizeEx, libKernel32, "GetFileSizeEx")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(unsafe.Pointer(lpFileSize)))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetFileType(hFile HANDLE) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileType, libKernel32, "GetFileType")
	ret, _,  err := syscall.SyscallN(addr, hFile)
	return uint32(ret), WIN32_ERROR(err)
}

func GetFinalPathNameByHandleA(hFile HANDLE, lpszFilePath *uint8, cchFilePath uint32, dwFlags FILE_NAME) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetFinalPathNameByHandleA, libKernel32, "GetFinalPathNameByHandleA")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(unsafe.Pointer(lpszFilePath)), uintptr(cchFilePath), uintptr(dwFlags))
	return uint32(ret), WIN32_ERROR(err)
}

var GetFinalPathNameByHandle = GetFinalPathNameByHandleW
func GetFinalPathNameByHandleW(hFile HANDLE, lpszFilePath *uint16, cchFilePath uint32, dwFlags FILE_NAME) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetFinalPathNameByHandleW, libKernel32, "GetFinalPathNameByHandleW")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(unsafe.Pointer(lpszFilePath)), uintptr(cchFilePath), uintptr(dwFlags))
	return uint32(ret), WIN32_ERROR(err)
}

func GetFileTime(hFile HANDLE, lpCreationTime *FILETIME, lpLastAccessTime *FILETIME, lpLastWriteTime *FILETIME) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileTime, libKernel32, "GetFileTime")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(unsafe.Pointer(lpCreationTime)), uintptr(unsafe.Pointer(lpLastAccessTime)), uintptr(unsafe.Pointer(lpLastWriteTime)))
	return BOOL(ret), WIN32_ERROR(err)
}

var GetFullPathName = GetFullPathNameW
func GetFullPathNameW(lpFileName PWSTR, nBufferLength uint32, lpBuffer *uint16, lpFilePart *PWSTR) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetFullPathNameW, libKernel32, "GetFullPathNameW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(nBufferLength), uintptr(unsafe.Pointer(lpBuffer)), uintptr(unsafe.Pointer(lpFilePart)))
	return uint32(ret), WIN32_ERROR(err)
}

func GetFullPathNameA(lpFileName PSTR, nBufferLength uint32, lpBuffer *uint8, lpFilePart *PSTR) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetFullPathNameA, libKernel32, "GetFullPathNameA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(nBufferLength), uintptr(unsafe.Pointer(lpBuffer)), uintptr(unsafe.Pointer(lpFilePart)))
	return uint32(ret), WIN32_ERROR(err)
}

func GetLogicalDrives() (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetLogicalDrives, libKernel32, "GetLogicalDrives")
	ret, _,  err := syscall.SyscallN(addr)
	return uint32(ret), WIN32_ERROR(err)
}

var GetLogicalDriveStrings = GetLogicalDriveStringsW
func GetLogicalDriveStringsW(nBufferLength uint32, lpBuffer *uint16) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetLogicalDriveStringsW, libKernel32, "GetLogicalDriveStringsW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(nBufferLength), uintptr(unsafe.Pointer(lpBuffer)))
	return uint32(ret), WIN32_ERROR(err)
}

func GetLongPathNameA(lpszShortPath PSTR, lpszLongPath *uint8, cchBuffer uint32) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetLongPathNameA, libKernel32, "GetLongPathNameA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszShortPath)), uintptr(unsafe.Pointer(lpszLongPath)), uintptr(cchBuffer))
	return uint32(ret), WIN32_ERROR(err)
}

var GetLongPathName = GetLongPathNameW
func GetLongPathNameW(lpszShortPath PWSTR, lpszLongPath *uint16, cchBuffer uint32) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetLongPathNameW, libKernel32, "GetLongPathNameW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszShortPath)), uintptr(unsafe.Pointer(lpszLongPath)), uintptr(cchBuffer))
	return uint32(ret), WIN32_ERROR(err)
}

func AreShortNamesEnabled(Handle HANDLE, Enabled *BOOL) BOOL {
	addr := lazyAddr(&pAreShortNamesEnabled, libKernel32, "AreShortNamesEnabled")
	ret, _,  _ := syscall.SyscallN(addr, Handle, uintptr(unsafe.Pointer(Enabled)))
	return BOOL(ret)
}

var GetShortPathName = GetShortPathNameW
func GetShortPathNameW(lpszLongPath PWSTR, lpszShortPath *uint16, cchBuffer uint32) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetShortPathNameW, libKernel32, "GetShortPathNameW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszLongPath)), uintptr(unsafe.Pointer(lpszShortPath)), uintptr(cchBuffer))
	return uint32(ret), WIN32_ERROR(err)
}

var GetTempFileName = GetTempFileNameW
func GetTempFileNameW(lpPathName PWSTR, lpPrefixString PWSTR, uUnique uint32, lpTempFileName *uint16) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetTempFileNameW, libKernel32, "GetTempFileNameW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpPathName)), uintptr(unsafe.Pointer(lpPrefixString)), uintptr(uUnique), uintptr(unsafe.Pointer(lpTempFileName)))
	return uint32(ret), WIN32_ERROR(err)
}

func GetVolumeInformationByHandleW(hFile HANDLE, lpVolumeNameBuffer *uint16, nVolumeNameSize uint32, lpVolumeSerialNumber *uint32, lpMaximumComponentLength *uint32, lpFileSystemFlags *uint32, lpFileSystemNameBuffer *uint16, nFileSystemNameSize uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetVolumeInformationByHandleW, libKernel32, "GetVolumeInformationByHandleW")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(unsafe.Pointer(lpVolumeNameBuffer)), uintptr(nVolumeNameSize), uintptr(unsafe.Pointer(lpVolumeSerialNumber)), uintptr(unsafe.Pointer(lpMaximumComponentLength)), uintptr(unsafe.Pointer(lpFileSystemFlags)), uintptr(unsafe.Pointer(lpFileSystemNameBuffer)), uintptr(nFileSystemNameSize))
	return BOOL(ret), WIN32_ERROR(err)
}

var GetVolumeInformation = GetVolumeInformationW
func GetVolumeInformationW(lpRootPathName PWSTR, lpVolumeNameBuffer *uint16, nVolumeNameSize uint32, lpVolumeSerialNumber *uint32, lpMaximumComponentLength *uint32, lpFileSystemFlags *uint32, lpFileSystemNameBuffer *uint16, nFileSystemNameSize uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetVolumeInformationW, libKernel32, "GetVolumeInformationW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpRootPathName)), uintptr(unsafe.Pointer(lpVolumeNameBuffer)), uintptr(nVolumeNameSize), uintptr(unsafe.Pointer(lpVolumeSerialNumber)), uintptr(unsafe.Pointer(lpMaximumComponentLength)), uintptr(unsafe.Pointer(lpFileSystemFlags)), uintptr(unsafe.Pointer(lpFileSystemNameBuffer)), uintptr(nFileSystemNameSize))
	return BOOL(ret), WIN32_ERROR(err)
}

var GetVolumePathName = GetVolumePathNameW
func GetVolumePathNameW(lpszFileName PWSTR, lpszVolumePathName *uint16, cchBufferLength uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetVolumePathNameW, libKernel32, "GetVolumePathNameW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszFileName)), uintptr(unsafe.Pointer(lpszVolumePathName)), uintptr(cchBufferLength))
	return BOOL(ret), WIN32_ERROR(err)
}

func LocalFileTimeToFileTime(lpLocalFileTime *FILETIME, lpFileTime *FILETIME) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pLocalFileTimeToFileTime, libKernel32, "LocalFileTimeToFileTime")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpLocalFileTime)), uintptr(unsafe.Pointer(lpFileTime)))
	return BOOL(ret), WIN32_ERROR(err)
}

func LockFile(hFile HANDLE, dwFileOffsetLow uint32, dwFileOffsetHigh uint32, nNumberOfBytesToLockLow uint32, nNumberOfBytesToLockHigh uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pLockFile, libKernel32, "LockFile")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(dwFileOffsetLow), uintptr(dwFileOffsetHigh), uintptr(nNumberOfBytesToLockLow), uintptr(nNumberOfBytesToLockHigh))
	return BOOL(ret), WIN32_ERROR(err)
}

func LockFileEx(hFile HANDLE, dwFlags LOCK_FILE_FLAGS, dwReserved uint32, nNumberOfBytesToLockLow uint32, nNumberOfBytesToLockHigh uint32, lpOverlapped *OVERLAPPED) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pLockFileEx, libKernel32, "LockFileEx")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(dwFlags), uintptr(dwReserved), uintptr(nNumberOfBytesToLockLow), uintptr(nNumberOfBytesToLockHigh), uintptr(unsafe.Pointer(lpOverlapped)))
	return BOOL(ret), WIN32_ERROR(err)
}

var QueryDosDevice = QueryDosDeviceW
func QueryDosDeviceW(lpDeviceName PWSTR, lpTargetPath *uint16, ucchMax uint32) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pQueryDosDeviceW, libKernel32, "QueryDosDeviceW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpDeviceName)), uintptr(unsafe.Pointer(lpTargetPath)), uintptr(ucchMax))
	return uint32(ret), WIN32_ERROR(err)
}

func ReadFile(hFile HANDLE, lpBuffer unsafe.Pointer, nNumberOfBytesToRead uint32, lpNumberOfBytesRead *uint32, lpOverlapped *OVERLAPPED) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pReadFile, libKernel32, "ReadFile")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(lpBuffer), uintptr(nNumberOfBytesToRead), uintptr(unsafe.Pointer(lpNumberOfBytesRead)), uintptr(unsafe.Pointer(lpOverlapped)))
	return BOOL(ret), WIN32_ERROR(err)
}

func ReadFileEx(hFile HANDLE, lpBuffer unsafe.Pointer, nNumberOfBytesToRead uint32, lpOverlapped *OVERLAPPED, lpCompletionRoutine uintptr) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pReadFileEx, libKernel32, "ReadFileEx")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(lpBuffer), uintptr(nNumberOfBytesToRead), uintptr(unsafe.Pointer(lpOverlapped)), uintptr(lpCompletionRoutine))
	return BOOL(ret), WIN32_ERROR(err)
}

func ReadFileScatter(hFile HANDLE, aSegmentArray *FILE_SEGMENT_ELEMENT, nNumberOfBytesToRead uint32, lpReserved *uint32, lpOverlapped *OVERLAPPED) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pReadFileScatter, libKernel32, "ReadFileScatter")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(unsafe.Pointer(aSegmentArray)), uintptr(nNumberOfBytesToRead), uintptr(unsafe.Pointer(lpReserved)), uintptr(unsafe.Pointer(lpOverlapped)))
	return BOOL(ret), WIN32_ERROR(err)
}

func RemoveDirectoryA(lpPathName PSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pRemoveDirectoryA, libKernel32, "RemoveDirectoryA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpPathName)))
	return BOOL(ret), WIN32_ERROR(err)
}

var RemoveDirectory = RemoveDirectoryW
func RemoveDirectoryW(lpPathName PWSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pRemoveDirectoryW, libKernel32, "RemoveDirectoryW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpPathName)))
	return BOOL(ret), WIN32_ERROR(err)
}

func SetEndOfFile(hFile HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetEndOfFile, libKernel32, "SetEndOfFile")
	ret, _,  err := syscall.SyscallN(addr, hFile)
	return BOOL(ret), WIN32_ERROR(err)
}

func SetFileAttributesA(lpFileName PSTR, dwFileAttributes FILE_FLAGS_AND_ATTRIBUTES) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetFileAttributesA, libKernel32, "SetFileAttributesA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(dwFileAttributes))
	return BOOL(ret), WIN32_ERROR(err)
}

var SetFileAttributes = SetFileAttributesW
func SetFileAttributesW(lpFileName PWSTR, dwFileAttributes FILE_FLAGS_AND_ATTRIBUTES) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetFileAttributesW, libKernel32, "SetFileAttributesW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(dwFileAttributes))
	return BOOL(ret), WIN32_ERROR(err)
}

func SetFileInformationByHandle(hFile HANDLE, FileInformationClass FILE_INFO_BY_HANDLE_CLASS, lpFileInformation unsafe.Pointer, dwBufferSize uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetFileInformationByHandle, libKernel32, "SetFileInformationByHandle")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(FileInformationClass), uintptr(lpFileInformation), uintptr(dwBufferSize))
	return BOOL(ret), WIN32_ERROR(err)
}

func SetFilePointer(hFile HANDLE, lDistanceToMove int32, lpDistanceToMoveHigh *int32, dwMoveMethod SET_FILE_POINTER_MOVE_METHOD) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pSetFilePointer, libKernel32, "SetFilePointer")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(lDistanceToMove), uintptr(unsafe.Pointer(lpDistanceToMoveHigh)), uintptr(dwMoveMethod))
	return uint32(ret), WIN32_ERROR(err)
}

func SetFilePointerEx(hFile HANDLE, liDistanceToMove int64, lpNewFilePointer *int64, dwMoveMethod SET_FILE_POINTER_MOVE_METHOD) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetFilePointerEx, libKernel32, "SetFilePointerEx")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(liDistanceToMove), uintptr(unsafe.Pointer(lpNewFilePointer)), uintptr(dwMoveMethod))
	return BOOL(ret), WIN32_ERROR(err)
}

func SetFileTime(hFile HANDLE, lpCreationTime *FILETIME, lpLastAccessTime *FILETIME, lpLastWriteTime *FILETIME) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetFileTime, libKernel32, "SetFileTime")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(unsafe.Pointer(lpCreationTime)), uintptr(unsafe.Pointer(lpLastAccessTime)), uintptr(unsafe.Pointer(lpLastWriteTime)))
	return BOOL(ret), WIN32_ERROR(err)
}

func SetFileValidData(hFile HANDLE, ValidDataLength int64) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetFileValidData, libKernel32, "SetFileValidData")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(ValidDataLength))
	return BOOL(ret), WIN32_ERROR(err)
}

func UnlockFile(hFile HANDLE, dwFileOffsetLow uint32, dwFileOffsetHigh uint32, nNumberOfBytesToUnlockLow uint32, nNumberOfBytesToUnlockHigh uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pUnlockFile, libKernel32, "UnlockFile")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(dwFileOffsetLow), uintptr(dwFileOffsetHigh), uintptr(nNumberOfBytesToUnlockLow), uintptr(nNumberOfBytesToUnlockHigh))
	return BOOL(ret), WIN32_ERROR(err)
}

func UnlockFileEx(hFile HANDLE, dwReserved uint32, nNumberOfBytesToUnlockLow uint32, nNumberOfBytesToUnlockHigh uint32, lpOverlapped *OVERLAPPED) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pUnlockFileEx, libKernel32, "UnlockFileEx")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(dwReserved), uintptr(nNumberOfBytesToUnlockLow), uintptr(nNumberOfBytesToUnlockHigh), uintptr(unsafe.Pointer(lpOverlapped)))
	return BOOL(ret), WIN32_ERROR(err)
}

func WriteFile(hFile HANDLE, lpBuffer unsafe.Pointer, nNumberOfBytesToWrite uint32, lpNumberOfBytesWritten *uint32, lpOverlapped *OVERLAPPED) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pWriteFile, libKernel32, "WriteFile")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(lpBuffer), uintptr(nNumberOfBytesToWrite), uintptr(unsafe.Pointer(lpNumberOfBytesWritten)), uintptr(unsafe.Pointer(lpOverlapped)))
	return BOOL(ret), WIN32_ERROR(err)
}

func WriteFileEx(hFile HANDLE, lpBuffer unsafe.Pointer, nNumberOfBytesToWrite uint32, lpOverlapped *OVERLAPPED, lpCompletionRoutine uintptr) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pWriteFileEx, libKernel32, "WriteFileEx")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(lpBuffer), uintptr(nNumberOfBytesToWrite), uintptr(unsafe.Pointer(lpOverlapped)), uintptr(lpCompletionRoutine))
	return BOOL(ret), WIN32_ERROR(err)
}

func WriteFileGather(hFile HANDLE, aSegmentArray *FILE_SEGMENT_ELEMENT, nNumberOfBytesToWrite uint32, lpReserved *uint32, lpOverlapped *OVERLAPPED) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pWriteFileGather, libKernel32, "WriteFileGather")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(unsafe.Pointer(aSegmentArray)), uintptr(nNumberOfBytesToWrite), uintptr(unsafe.Pointer(lpReserved)), uintptr(unsafe.Pointer(lpOverlapped)))
	return BOOL(ret), WIN32_ERROR(err)
}

var GetTempPath = GetTempPathW
func GetTempPathW(nBufferLength uint32, lpBuffer *uint16) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetTempPathW, libKernel32, "GetTempPathW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(nBufferLength), uintptr(unsafe.Pointer(lpBuffer)))
	return uint32(ret), WIN32_ERROR(err)
}

var GetVolumeNameForVolumeMountPoint = GetVolumeNameForVolumeMountPointW
func GetVolumeNameForVolumeMountPointW(lpszVolumeMountPoint PWSTR, lpszVolumeName *uint16, cchBufferLength uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetVolumeNameForVolumeMountPointW, libKernel32, "GetVolumeNameForVolumeMountPointW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszVolumeMountPoint)), uintptr(unsafe.Pointer(lpszVolumeName)), uintptr(cchBufferLength))
	return BOOL(ret), WIN32_ERROR(err)
}

var GetVolumePathNamesForVolumeName = GetVolumePathNamesForVolumeNameW
func GetVolumePathNamesForVolumeNameW(lpszVolumeName PWSTR, lpszVolumePathNames *uint16, cchBufferLength uint32, lpcchReturnLength *uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetVolumePathNamesForVolumeNameW, libKernel32, "GetVolumePathNamesForVolumeNameW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszVolumeName)), uintptr(unsafe.Pointer(lpszVolumePathNames)), uintptr(cchBufferLength), uintptr(unsafe.Pointer(lpcchReturnLength)))
	return BOOL(ret), WIN32_ERROR(err)
}

func CreateFile2(lpFileName PWSTR, dwDesiredAccess FILE_ACCESS_FLAGS, dwShareMode FILE_SHARE_MODE, dwCreationDisposition FILE_CREATION_DISPOSITION, pCreateExParams *CREATEFILE2_EXTENDED_PARAMETERS) (HANDLE, WIN32_ERROR) {
	addr := lazyAddr(&pCreateFile2, libKernel32, "CreateFile2")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(dwDesiredAccess), uintptr(dwShareMode), uintptr(dwCreationDisposition), uintptr(unsafe.Pointer(pCreateExParams)))
	return HANDLE(ret), WIN32_ERROR(err)
}

func SetFileIoOverlappedRange(FileHandle HANDLE, OverlappedRangeStart *uint8, Length uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetFileIoOverlappedRange, libKernel32, "SetFileIoOverlappedRange")
	ret, _,  err := syscall.SyscallN(addr, FileHandle, uintptr(unsafe.Pointer(OverlappedRangeStart)), uintptr(Length))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetCompressedFileSizeA(lpFileName PSTR, lpFileSizeHigh *uint32) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetCompressedFileSizeA, libKernel32, "GetCompressedFileSizeA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpFileSizeHigh)))
	return uint32(ret), WIN32_ERROR(err)
}

var GetCompressedFileSize = GetCompressedFileSizeW
func GetCompressedFileSizeW(lpFileName PWSTR, lpFileSizeHigh *uint32) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetCompressedFileSizeW, libKernel32, "GetCompressedFileSizeW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpFileSizeHigh)))
	return uint32(ret), WIN32_ERROR(err)
}

func FindFirstStreamW(lpFileName PWSTR, InfoLevel STREAM_INFO_LEVELS, lpFindStreamData unsafe.Pointer, dwFlags uint32) (FindStreamHandle, WIN32_ERROR) {
	addr := lazyAddr(&pFindFirstStreamW, libKernel32, "FindFirstStreamW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(InfoLevel), uintptr(lpFindStreamData), uintptr(dwFlags))
	return FindStreamHandle(ret), WIN32_ERROR(err)
}

func FindNextStreamW(hFindStream FindStreamHandle, lpFindStreamData unsafe.Pointer) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFindNextStreamW, libKernel32, "FindNextStreamW")
	ret, _,  err := syscall.SyscallN(addr, hFindStream, uintptr(lpFindStreamData))
	return BOOL(ret), WIN32_ERROR(err)
}

func AreFileApisANSI() BOOL {
	addr := lazyAddr(&pAreFileApisANSI, libKernel32, "AreFileApisANSI")
	ret, _,  _ := syscall.SyscallN(addr)
	return BOOL(ret)
}

func GetTempPathA(nBufferLength uint32, lpBuffer *uint8) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetTempPathA, libKernel32, "GetTempPathA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(nBufferLength), uintptr(unsafe.Pointer(lpBuffer)))
	return uint32(ret), WIN32_ERROR(err)
}

func FindFirstFileNameW(lpFileName PWSTR, dwFlags uint32, StringLength *uint32, LinkName *uint16) (FindFileNameHandle, WIN32_ERROR) {
	addr := lazyAddr(&pFindFirstFileNameW, libKernel32, "FindFirstFileNameW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(dwFlags), uintptr(unsafe.Pointer(StringLength)), uintptr(unsafe.Pointer(LinkName)))
	return FindFileNameHandle(ret), WIN32_ERROR(err)
}

func FindNextFileNameW(hFindStream FindFileNameHandle, StringLength *uint32, LinkName *uint16) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFindNextFileNameW, libKernel32, "FindNextFileNameW")
	ret, _,  err := syscall.SyscallN(addr, hFindStream, uintptr(unsafe.Pointer(StringLength)), uintptr(unsafe.Pointer(LinkName)))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetVolumeInformationA(lpRootPathName PSTR, lpVolumeNameBuffer *uint8, nVolumeNameSize uint32, lpVolumeSerialNumber *uint32, lpMaximumComponentLength *uint32, lpFileSystemFlags *uint32, lpFileSystemNameBuffer *uint8, nFileSystemNameSize uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetVolumeInformationA, libKernel32, "GetVolumeInformationA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpRootPathName)), uintptr(unsafe.Pointer(lpVolumeNameBuffer)), uintptr(nVolumeNameSize), uintptr(unsafe.Pointer(lpVolumeSerialNumber)), uintptr(unsafe.Pointer(lpMaximumComponentLength)), uintptr(unsafe.Pointer(lpFileSystemFlags)), uintptr(unsafe.Pointer(lpFileSystemNameBuffer)), uintptr(nFileSystemNameSize))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetTempFileNameA(lpPathName PSTR, lpPrefixString PSTR, uUnique uint32, lpTempFileName *uint8) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetTempFileNameA, libKernel32, "GetTempFileNameA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpPathName)), uintptr(unsafe.Pointer(lpPrefixString)), uintptr(uUnique), uintptr(unsafe.Pointer(lpTempFileName)))
	return uint32(ret), WIN32_ERROR(err)
}

func SetFileApisToOEM() {
	addr := lazyAddr(&pSetFileApisToOEM, libKernel32, "SetFileApisToOEM")
	_, _,  _ = syscall.SyscallN(addr)
}

func SetFileApisToANSI() {
	addr := lazyAddr(&pSetFileApisToANSI, libKernel32, "SetFileApisToANSI")
	_, _,  _ = syscall.SyscallN(addr)
}

var GetTempPath2 = GetTempPath2W
func GetTempPath2W(BufferLength uint32, Buffer *uint16) uint32 {
	addr := lazyAddr(&pGetTempPath2W, libKernel32, "GetTempPath2W")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(BufferLength), uintptr(unsafe.Pointer(Buffer)))
	return uint32(ret)
}

func GetTempPath2A(BufferLength uint32, Buffer *uint8) uint32 {
	addr := lazyAddr(&pGetTempPath2A, libKernel32, "GetTempPath2A")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(BufferLength), uintptr(unsafe.Pointer(Buffer)))
	return uint32(ret)
}

func VerFindFileA(uFlags VER_FIND_FILE_FLAGS, szFileName PSTR, szWinDir PSTR, szAppDir PSTR, szCurDir *uint8, puCurDirLen *uint32, szDestDir *uint8, puDestDirLen *uint32) VER_FIND_FILE_STATUS {
	addr := lazyAddr(&pVerFindFileA, libVersion, "VerFindFileA")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(uFlags), uintptr(unsafe.Pointer(szFileName)), uintptr(unsafe.Pointer(szWinDir)), uintptr(unsafe.Pointer(szAppDir)), uintptr(unsafe.Pointer(szCurDir)), uintptr(unsafe.Pointer(puCurDirLen)), uintptr(unsafe.Pointer(szDestDir)), uintptr(unsafe.Pointer(puDestDirLen)))
	return VER_FIND_FILE_STATUS(ret)
}

var VerFindFile = VerFindFileW
func VerFindFileW(uFlags VER_FIND_FILE_FLAGS, szFileName PWSTR, szWinDir PWSTR, szAppDir PWSTR, szCurDir *uint16, puCurDirLen *uint32, szDestDir *uint16, puDestDirLen *uint32) VER_FIND_FILE_STATUS {
	addr := lazyAddr(&pVerFindFileW, libVersion, "VerFindFileW")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(uFlags), uintptr(unsafe.Pointer(szFileName)), uintptr(unsafe.Pointer(szWinDir)), uintptr(unsafe.Pointer(szAppDir)), uintptr(unsafe.Pointer(szCurDir)), uintptr(unsafe.Pointer(puCurDirLen)), uintptr(unsafe.Pointer(szDestDir)), uintptr(unsafe.Pointer(puDestDirLen)))
	return VER_FIND_FILE_STATUS(ret)
}

func VerInstallFileA(uFlags VER_INSTALL_FILE_FLAGS, szSrcFileName PSTR, szDestFileName PSTR, szSrcDir PSTR, szDestDir PSTR, szCurDir PSTR, szTmpFile *uint8, puTmpFileLen *uint32) VER_INSTALL_FILE_STATUS {
	addr := lazyAddr(&pVerInstallFileA, libVersion, "VerInstallFileA")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(uFlags), uintptr(unsafe.Pointer(szSrcFileName)), uintptr(unsafe.Pointer(szDestFileName)), uintptr(unsafe.Pointer(szSrcDir)), uintptr(unsafe.Pointer(szDestDir)), uintptr(unsafe.Pointer(szCurDir)), uintptr(unsafe.Pointer(szTmpFile)), uintptr(unsafe.Pointer(puTmpFileLen)))
	return VER_INSTALL_FILE_STATUS(ret)
}

var VerInstallFile = VerInstallFileW
func VerInstallFileW(uFlags VER_INSTALL_FILE_FLAGS, szSrcFileName PWSTR, szDestFileName PWSTR, szSrcDir PWSTR, szDestDir PWSTR, szCurDir PWSTR, szTmpFile *uint16, puTmpFileLen *uint32) VER_INSTALL_FILE_STATUS {
	addr := lazyAddr(&pVerInstallFileW, libVersion, "VerInstallFileW")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(uFlags), uintptr(unsafe.Pointer(szSrcFileName)), uintptr(unsafe.Pointer(szDestFileName)), uintptr(unsafe.Pointer(szSrcDir)), uintptr(unsafe.Pointer(szDestDir)), uintptr(unsafe.Pointer(szCurDir)), uintptr(unsafe.Pointer(szTmpFile)), uintptr(unsafe.Pointer(puTmpFileLen)))
	return VER_INSTALL_FILE_STATUS(ret)
}

func GetFileVersionInfoSizeA(lptstrFilename PSTR, lpdwHandle *uint32) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileVersionInfoSizeA, libVersion, "GetFileVersionInfoSizeA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lptstrFilename)), uintptr(unsafe.Pointer(lpdwHandle)))
	return uint32(ret), WIN32_ERROR(err)
}

var GetFileVersionInfoSize = GetFileVersionInfoSizeW
func GetFileVersionInfoSizeW(lptstrFilename PWSTR, lpdwHandle *uint32) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileVersionInfoSizeW, libVersion, "GetFileVersionInfoSizeW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lptstrFilename)), uintptr(unsafe.Pointer(lpdwHandle)))
	return uint32(ret), WIN32_ERROR(err)
}

func GetFileVersionInfoA(lptstrFilename PSTR, dwHandle uint32, dwLen uint32, lpData unsafe.Pointer) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileVersionInfoA, libVersion, "GetFileVersionInfoA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lptstrFilename)), uintptr(dwHandle), uintptr(dwLen), uintptr(lpData))
	return BOOL(ret), WIN32_ERROR(err)
}

var GetFileVersionInfo = GetFileVersionInfoW
func GetFileVersionInfoW(lptstrFilename PWSTR, dwHandle uint32, dwLen uint32, lpData unsafe.Pointer) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileVersionInfoW, libVersion, "GetFileVersionInfoW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lptstrFilename)), uintptr(dwHandle), uintptr(dwLen), uintptr(lpData))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetFileVersionInfoSizeExA(dwFlags GET_FILE_VERSION_INFO_FLAGS, lpwstrFilename PSTR, lpdwHandle *uint32) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileVersionInfoSizeExA, libVersion, "GetFileVersionInfoSizeExA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(dwFlags), uintptr(unsafe.Pointer(lpwstrFilename)), uintptr(unsafe.Pointer(lpdwHandle)))
	return uint32(ret), WIN32_ERROR(err)
}

var GetFileVersionInfoSizeEx = GetFileVersionInfoSizeExW
func GetFileVersionInfoSizeExW(dwFlags GET_FILE_VERSION_INFO_FLAGS, lpwstrFilename PWSTR, lpdwHandle *uint32) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileVersionInfoSizeExW, libVersion, "GetFileVersionInfoSizeExW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(dwFlags), uintptr(unsafe.Pointer(lpwstrFilename)), uintptr(unsafe.Pointer(lpdwHandle)))
	return uint32(ret), WIN32_ERROR(err)
}

func GetFileVersionInfoExA(dwFlags GET_FILE_VERSION_INFO_FLAGS, lpwstrFilename PSTR, dwHandle uint32, dwLen uint32, lpData unsafe.Pointer) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileVersionInfoExA, libVersion, "GetFileVersionInfoExA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(dwFlags), uintptr(unsafe.Pointer(lpwstrFilename)), uintptr(dwHandle), uintptr(dwLen), uintptr(lpData))
	return BOOL(ret), WIN32_ERROR(err)
}

var GetFileVersionInfoEx = GetFileVersionInfoExW
func GetFileVersionInfoExW(dwFlags GET_FILE_VERSION_INFO_FLAGS, lpwstrFilename PWSTR, dwHandle uint32, dwLen uint32, lpData unsafe.Pointer) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileVersionInfoExW, libVersion, "GetFileVersionInfoExW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(dwFlags), uintptr(unsafe.Pointer(lpwstrFilename)), uintptr(dwHandle), uintptr(dwLen), uintptr(lpData))
	return BOOL(ret), WIN32_ERROR(err)
}

func VerLanguageNameA(wLang uint32, szLang *uint8, cchLang uint32) uint32 {
	addr := lazyAddr(&pVerLanguageNameA, libKernel32, "VerLanguageNameA")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(wLang), uintptr(unsafe.Pointer(szLang)), uintptr(cchLang))
	return uint32(ret)
}

var VerLanguageName = VerLanguageNameW
func VerLanguageNameW(wLang uint32, szLang *uint16, cchLang uint32) uint32 {
	addr := lazyAddr(&pVerLanguageNameW, libKernel32, "VerLanguageNameW")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(wLang), uintptr(unsafe.Pointer(szLang)), uintptr(cchLang))
	return uint32(ret)
}

func VerQueryValueA(pBlock unsafe.Pointer, lpSubBlock PSTR, lplpBuffer unsafe.Pointer, puLen *uint32) BOOL {
	addr := lazyAddr(&pVerQueryValueA, libVersion, "VerQueryValueA")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(pBlock), uintptr(unsafe.Pointer(lpSubBlock)), uintptr(lplpBuffer), uintptr(unsafe.Pointer(puLen)))
	return BOOL(ret)
}

var VerQueryValue = VerQueryValueW
func VerQueryValueW(pBlock unsafe.Pointer, lpSubBlock PWSTR, lplpBuffer unsafe.Pointer, puLen *uint32) BOOL {
	addr := lazyAddr(&pVerQueryValueW, libVersion, "VerQueryValueW")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(pBlock), uintptr(unsafe.Pointer(lpSubBlock)), uintptr(lplpBuffer), uintptr(unsafe.Pointer(puLen)))
	return BOOL(ret)
}

func QueryUsersOnEncryptedFile(lpFileName PWSTR, pUsers **ENCRYPTION_CERTIFICATE_HASH_LIST) uint32 {
	addr := lazyAddr(&pQueryUsersOnEncryptedFile, libAdvapi32, "QueryUsersOnEncryptedFile")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(pUsers)))
	return uint32(ret)
}

func QueryRecoveryAgentsOnEncryptedFile(lpFileName PWSTR, pRecoveryAgents **ENCRYPTION_CERTIFICATE_HASH_LIST) uint32 {
	addr := lazyAddr(&pQueryRecoveryAgentsOnEncryptedFile, libAdvapi32, "QueryRecoveryAgentsOnEncryptedFile")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(pRecoveryAgents)))
	return uint32(ret)
}

func RemoveUsersFromEncryptedFile(lpFileName PWSTR, pHashes *ENCRYPTION_CERTIFICATE_HASH_LIST) uint32 {
	addr := lazyAddr(&pRemoveUsersFromEncryptedFile, libAdvapi32, "RemoveUsersFromEncryptedFile")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(pHashes)))
	return uint32(ret)
}

func AddUsersToEncryptedFile(lpFileName PWSTR, pEncryptionCertificates *ENCRYPTION_CERTIFICATE_LIST) uint32 {
	addr := lazyAddr(&pAddUsersToEncryptedFile, libAdvapi32, "AddUsersToEncryptedFile")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(pEncryptionCertificates)))
	return uint32(ret)
}

func SetUserFileEncryptionKey(pEncryptionCertificate *ENCRYPTION_CERTIFICATE) uint32 {
	addr := lazyAddr(&pSetUserFileEncryptionKey, libAdvapi32, "SetUserFileEncryptionKey")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(pEncryptionCertificate)))
	return uint32(ret)
}

func SetUserFileEncryptionKeyEx(pEncryptionCertificate *ENCRYPTION_CERTIFICATE, dwCapabilities uint32, dwFlags uint32, pvReserved unsafe.Pointer) uint32 {
	addr := lazyAddr(&pSetUserFileEncryptionKeyEx, libAdvapi32, "SetUserFileEncryptionKeyEx")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(pEncryptionCertificate)), uintptr(dwCapabilities), uintptr(dwFlags), uintptr(pvReserved))
	return uint32(ret)
}

func FreeEncryptionCertificateHashList(pUsers *ENCRYPTION_CERTIFICATE_HASH_LIST) {
	addr := lazyAddr(&pFreeEncryptionCertificateHashList, libAdvapi32, "FreeEncryptionCertificateHashList")
	_, _,  _ = syscall.SyscallN(addr, uintptr(unsafe.Pointer(pUsers)))
}

func EncryptionDisable(DirPath PWSTR, Disable BOOL) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pEncryptionDisable, libAdvapi32, "EncryptionDisable")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(DirPath)), uintptr(Disable))
	return BOOL(ret), WIN32_ERROR(err)
}

func DuplicateEncryptionInfoFile(SrcFileName PWSTR, DstFileName PWSTR, dwCreationDistribution uint32, dwAttributes uint32, lpSecurityAttributes *SECURITY_ATTRIBUTES) uint32 {
	addr := lazyAddr(&pDuplicateEncryptionInfoFile, libAdvapi32, "DuplicateEncryptionInfoFile")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(SrcFileName)), uintptr(unsafe.Pointer(DstFileName)), uintptr(dwCreationDistribution), uintptr(dwAttributes), uintptr(unsafe.Pointer(lpSecurityAttributes)))
	return uint32(ret)
}

func GetEncryptedFileMetadata(lpFileName PWSTR, pcbMetadata *uint32, ppbMetadata **uint8) uint32 {
	addr := lazyAddr(&pGetEncryptedFileMetadata, libAdvapi32, "GetEncryptedFileMetadata")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(pcbMetadata)), uintptr(unsafe.Pointer(ppbMetadata)))
	return uint32(ret)
}

func SetEncryptedFileMetadata(lpFileName PWSTR, pbOldMetadata *uint8, pbNewMetadata *uint8, pOwnerHash *ENCRYPTION_CERTIFICATE_HASH, dwOperation uint32, pCertificatesAdded *ENCRYPTION_CERTIFICATE_HASH_LIST) uint32 {
	addr := lazyAddr(&pSetEncryptedFileMetadata, libAdvapi32, "SetEncryptedFileMetadata")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(pbOldMetadata)), uintptr(unsafe.Pointer(pbNewMetadata)), uintptr(unsafe.Pointer(pOwnerHash)), uintptr(dwOperation), uintptr(unsafe.Pointer(pCertificatesAdded)))
	return uint32(ret)
}

func FreeEncryptedFileMetadata(pbMetadata *uint8) {
	addr := lazyAddr(&pFreeEncryptedFileMetadata, libAdvapi32, "FreeEncryptedFileMetadata")
	_, _,  _ = syscall.SyscallN(addr, uintptr(unsafe.Pointer(pbMetadata)))
}

func LZStart() int32 {
	addr := lazyAddr(&pLZStart, libKernel32, "LZStart")
	ret, _,  _ := syscall.SyscallN(addr)
	return int32(ret)
}

func LZDone() {
	addr := lazyAddr(&pLZDone, libKernel32, "LZDone")
	_, _,  _ = syscall.SyscallN(addr)
}

func CopyLZFile(hfSource int32, hfDest int32) int32 {
	addr := lazyAddr(&pCopyLZFile, libKernel32, "CopyLZFile")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(hfSource), uintptr(hfDest))
	return int32(ret)
}

func LZCopy(hfSource int32, hfDest int32) int32 {
	addr := lazyAddr(&pLZCopy, libKernel32, "LZCopy")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(hfSource), uintptr(hfDest))
	return int32(ret)
}

func LZInit(hfSource int32) int32 {
	addr := lazyAddr(&pLZInit, libKernel32, "LZInit")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(hfSource))
	return int32(ret)
}

func GetExpandedNameA(lpszSource PSTR, lpszBuffer *uint8) (int32, WIN32_ERROR) {
	addr := lazyAddr(&pGetExpandedNameA, libKernel32, "GetExpandedNameA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszSource)), uintptr(unsafe.Pointer(lpszBuffer)))
	return int32(ret), WIN32_ERROR(err)
}

var GetExpandedName = GetExpandedNameW
func GetExpandedNameW(lpszSource PWSTR, lpszBuffer *uint16) (int32, WIN32_ERROR) {
	addr := lazyAddr(&pGetExpandedNameW, libKernel32, "GetExpandedNameW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszSource)), uintptr(unsafe.Pointer(lpszBuffer)))
	return int32(ret), WIN32_ERROR(err)
}

func LZOpenFileA(lpFileName PSTR, lpReOpenBuf *OFSTRUCT, wStyle LZOPENFILE_STYLE) int32 {
	addr := lazyAddr(&pLZOpenFileA, libKernel32, "LZOpenFileA")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpReOpenBuf)), uintptr(wStyle))
	return int32(ret)
}

var LZOpenFile = LZOpenFileW
func LZOpenFileW(lpFileName PWSTR, lpReOpenBuf *OFSTRUCT, wStyle LZOPENFILE_STYLE) int32 {
	addr := lazyAddr(&pLZOpenFileW, libKernel32, "LZOpenFileW")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpReOpenBuf)), uintptr(wStyle))
	return int32(ret)
}

func LZSeek(hFile int32, lOffset int32, iOrigin int32) int32 {
	addr := lazyAddr(&pLZSeek, libKernel32, "LZSeek")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(hFile), uintptr(lOffset), uintptr(iOrigin))
	return int32(ret)
}

func LZRead(hFile int32, lpBuffer PSTR, cbRead int32) int32 {
	addr := lazyAddr(&pLZRead, libKernel32, "LZRead")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(hFile), uintptr(unsafe.Pointer(lpBuffer)), uintptr(cbRead))
	return int32(ret)
}

func LZClose(hFile int32) {
	addr := lazyAddr(&pLZClose, libKernel32, "LZClose")
	_, _,  _ = syscall.SyscallN(addr, uintptr(hFile))
}

func Wow64EnableWow64FsRedirection(Wow64FsEnableRedirection BOOLEAN) BOOLEAN {
	addr := lazyAddr(&pWow64EnableWow64FsRedirection, libKernel32, "Wow64EnableWow64FsRedirection")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(Wow64FsEnableRedirection))
	return BOOLEAN(ret)
}

func Wow64DisableWow64FsRedirection(OldValue unsafe.Pointer) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pWow64DisableWow64FsRedirection, libKernel32, "Wow64DisableWow64FsRedirection")
	ret, _,  err := syscall.SyscallN(addr, uintptr(OldValue))
	return BOOL(ret), WIN32_ERROR(err)
}

func Wow64RevertWow64FsRedirection(OlValue unsafe.Pointer) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pWow64RevertWow64FsRedirection, libKernel32, "Wow64RevertWow64FsRedirection")
	ret, _,  err := syscall.SyscallN(addr, uintptr(OlValue))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetBinaryTypeA(lpApplicationName PSTR, lpBinaryType *uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetBinaryTypeA, libKernel32, "GetBinaryTypeA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpApplicationName)), uintptr(unsafe.Pointer(lpBinaryType)))
	return BOOL(ret), WIN32_ERROR(err)
}

var GetBinaryType = GetBinaryTypeW
func GetBinaryTypeW(lpApplicationName PWSTR, lpBinaryType *uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetBinaryTypeW, libKernel32, "GetBinaryTypeW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpApplicationName)), uintptr(unsafe.Pointer(lpBinaryType)))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetShortPathNameA(lpszLongPath PSTR, lpszShortPath *uint8, cchBuffer uint32) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetShortPathNameA, libKernel32, "GetShortPathNameA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszLongPath)), uintptr(unsafe.Pointer(lpszShortPath)), uintptr(cchBuffer))
	return uint32(ret), WIN32_ERROR(err)
}

func GetLongPathNameTransactedA(lpszShortPath PSTR, lpszLongPath *uint8, cchBuffer uint32, hTransaction HANDLE) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetLongPathNameTransactedA, libKernel32, "GetLongPathNameTransactedA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszShortPath)), uintptr(unsafe.Pointer(lpszLongPath)), uintptr(cchBuffer), hTransaction)
	return uint32(ret), WIN32_ERROR(err)
}

var GetLongPathNameTransacted = GetLongPathNameTransactedW
func GetLongPathNameTransactedW(lpszShortPath PWSTR, lpszLongPath *uint16, cchBuffer uint32, hTransaction HANDLE) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetLongPathNameTransactedW, libKernel32, "GetLongPathNameTransactedW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszShortPath)), uintptr(unsafe.Pointer(lpszLongPath)), uintptr(cchBuffer), hTransaction)
	return uint32(ret), WIN32_ERROR(err)
}

func SetFileCompletionNotificationModes(FileHandle HANDLE, Flags uint8) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetFileCompletionNotificationModes, libKernel32, "SetFileCompletionNotificationModes")
	ret, _,  err := syscall.SyscallN(addr, FileHandle, uintptr(Flags))
	return BOOL(ret), WIN32_ERROR(err)
}

func SetFileShortNameA(hFile HANDLE, lpShortName PSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetFileShortNameA, libKernel32, "SetFileShortNameA")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(unsafe.Pointer(lpShortName)))
	return BOOL(ret), WIN32_ERROR(err)
}

var SetFileShortName = SetFileShortNameW
func SetFileShortNameW(hFile HANDLE, lpShortName PWSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetFileShortNameW, libKernel32, "SetFileShortNameW")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(unsafe.Pointer(lpShortName)))
	return BOOL(ret), WIN32_ERROR(err)
}

func SetTapePosition(hDevice HANDLE, dwPositionMethod TAPE_POSITION_METHOD, dwPartition uint32, dwOffsetLow uint32, dwOffsetHigh uint32, bImmediate BOOL) uint32 {
	addr := lazyAddr(&pSetTapePosition, libKernel32, "SetTapePosition")
	ret, _,  _ := syscall.SyscallN(addr, hDevice, uintptr(dwPositionMethod), uintptr(dwPartition), uintptr(dwOffsetLow), uintptr(dwOffsetHigh), uintptr(bImmediate))
	return uint32(ret)
}

func GetTapePosition(hDevice HANDLE, dwPositionType TAPE_POSITION_TYPE, lpdwPartition *uint32, lpdwOffsetLow *uint32, lpdwOffsetHigh *uint32) uint32 {
	addr := lazyAddr(&pGetTapePosition, libKernel32, "GetTapePosition")
	ret, _,  _ := syscall.SyscallN(addr, hDevice, uintptr(dwPositionType), uintptr(unsafe.Pointer(lpdwPartition)), uintptr(unsafe.Pointer(lpdwOffsetLow)), uintptr(unsafe.Pointer(lpdwOffsetHigh)))
	return uint32(ret)
}

func PrepareTape(hDevice HANDLE, dwOperation PREPARE_TAPE_OPERATION, bImmediate BOOL) uint32 {
	addr := lazyAddr(&pPrepareTape, libKernel32, "PrepareTape")
	ret, _,  _ := syscall.SyscallN(addr, hDevice, uintptr(dwOperation), uintptr(bImmediate))
	return uint32(ret)
}

func EraseTape(hDevice HANDLE, dwEraseType ERASE_TAPE_TYPE, bImmediate BOOL) uint32 {
	addr := lazyAddr(&pEraseTape, libKernel32, "EraseTape")
	ret, _,  _ := syscall.SyscallN(addr, hDevice, uintptr(dwEraseType), uintptr(bImmediate))
	return uint32(ret)
}

func CreateTapePartition(hDevice HANDLE, dwPartitionMethod CREATE_TAPE_PARTITION_METHOD, dwCount uint32, dwSize uint32) uint32 {
	addr := lazyAddr(&pCreateTapePartition, libKernel32, "CreateTapePartition")
	ret, _,  _ := syscall.SyscallN(addr, hDevice, uintptr(dwPartitionMethod), uintptr(dwCount), uintptr(dwSize))
	return uint32(ret)
}

func WriteTapemark(hDevice HANDLE, dwTapemarkType TAPEMARK_TYPE, dwTapemarkCount uint32, bImmediate BOOL) uint32 {
	addr := lazyAddr(&pWriteTapemark, libKernel32, "WriteTapemark")
	ret, _,  _ := syscall.SyscallN(addr, hDevice, uintptr(dwTapemarkType), uintptr(dwTapemarkCount), uintptr(bImmediate))
	return uint32(ret)
}

func GetTapeStatus(hDevice HANDLE) uint32 {
	addr := lazyAddr(&pGetTapeStatus, libKernel32, "GetTapeStatus")
	ret, _,  _ := syscall.SyscallN(addr, hDevice)
	return uint32(ret)
}

func GetTapeParameters(hDevice HANDLE, dwOperation GET_TAPE_DRIVE_PARAMETERS_OPERATION, lpdwSize *uint32, lpTapeInformation unsafe.Pointer) uint32 {
	addr := lazyAddr(&pGetTapeParameters, libKernel32, "GetTapeParameters")
	ret, _,  _ := syscall.SyscallN(addr, hDevice, uintptr(dwOperation), uintptr(unsafe.Pointer(lpdwSize)), uintptr(lpTapeInformation))
	return uint32(ret)
}

func SetTapeParameters(hDevice HANDLE, dwOperation TAPE_INFORMATION_TYPE, lpTapeInformation unsafe.Pointer) uint32 {
	addr := lazyAddr(&pSetTapeParameters, libKernel32, "SetTapeParameters")
	ret, _,  _ := syscall.SyscallN(addr, hDevice, uintptr(dwOperation), uintptr(lpTapeInformation))
	return uint32(ret)
}

func EncryptFileA(lpFileName PSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pEncryptFileA, libAdvapi32, "EncryptFileA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)))
	return BOOL(ret), WIN32_ERROR(err)
}

var EncryptFile = EncryptFileW
func EncryptFileW(lpFileName PWSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pEncryptFileW, libAdvapi32, "EncryptFileW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)))
	return BOOL(ret), WIN32_ERROR(err)
}

func DecryptFileA(lpFileName PSTR, dwReserved uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pDecryptFileA, libAdvapi32, "DecryptFileA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(dwReserved))
	return BOOL(ret), WIN32_ERROR(err)
}

var DecryptFile = DecryptFileW
func DecryptFileW(lpFileName PWSTR, dwReserved uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pDecryptFileW, libAdvapi32, "DecryptFileW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(dwReserved))
	return BOOL(ret), WIN32_ERROR(err)
}

func FileEncryptionStatusA(lpFileName PSTR, lpStatus *uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFileEncryptionStatusA, libAdvapi32, "FileEncryptionStatusA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpStatus)))
	return BOOL(ret), WIN32_ERROR(err)
}

var FileEncryptionStatus = FileEncryptionStatusW
func FileEncryptionStatusW(lpFileName PWSTR, lpStatus *uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFileEncryptionStatusW, libAdvapi32, "FileEncryptionStatusW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpStatus)))
	return BOOL(ret), WIN32_ERROR(err)
}

func OpenEncryptedFileRawA(lpFileName PSTR, ulFlags uint32, pvContext unsafe.Pointer) uint32 {
	addr := lazyAddr(&pOpenEncryptedFileRawA, libAdvapi32, "OpenEncryptedFileRawA")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(ulFlags), uintptr(pvContext))
	return uint32(ret)
}

var OpenEncryptedFileRaw = OpenEncryptedFileRawW
func OpenEncryptedFileRawW(lpFileName PWSTR, ulFlags uint32, pvContext unsafe.Pointer) uint32 {
	addr := lazyAddr(&pOpenEncryptedFileRawW, libAdvapi32, "OpenEncryptedFileRawW")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(ulFlags), uintptr(pvContext))
	return uint32(ret)
}

func ReadEncryptedFileRaw(pfExportCallback uintptr, pvCallbackContext unsafe.Pointer, pvContext unsafe.Pointer) uint32 {
	addr := lazyAddr(&pReadEncryptedFileRaw, libAdvapi32, "ReadEncryptedFileRaw")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(pfExportCallback), uintptr(pvCallbackContext), uintptr(pvContext))
	return uint32(ret)
}

func WriteEncryptedFileRaw(pfImportCallback uintptr, pvCallbackContext unsafe.Pointer, pvContext unsafe.Pointer) uint32 {
	addr := lazyAddr(&pWriteEncryptedFileRaw, libAdvapi32, "WriteEncryptedFileRaw")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(pfImportCallback), uintptr(pvCallbackContext), uintptr(pvContext))
	return uint32(ret)
}

func CloseEncryptedFileRaw(pvContext unsafe.Pointer) {
	addr := lazyAddr(&pCloseEncryptedFileRaw, libAdvapi32, "CloseEncryptedFileRaw")
	_, _,  _ = syscall.SyscallN(addr, uintptr(pvContext))
}

func OpenFile(lpFileName PSTR, lpReOpenBuff *OFSTRUCT, uStyle LZOPENFILE_STYLE) (int32, WIN32_ERROR) {
	addr := lazyAddr(&pOpenFile, libKernel32, "OpenFile")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpReOpenBuff)), uintptr(uStyle))
	return int32(ret), WIN32_ERROR(err)
}

func BackupRead(hFile HANDLE, lpBuffer *uint8, nNumberOfBytesToRead uint32, lpNumberOfBytesRead *uint32, bAbort BOOL, bProcessSecurity BOOL, lpContext unsafe.Pointer) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pBackupRead, libKernel32, "BackupRead")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(unsafe.Pointer(lpBuffer)), uintptr(nNumberOfBytesToRead), uintptr(unsafe.Pointer(lpNumberOfBytesRead)), uintptr(bAbort), uintptr(bProcessSecurity), uintptr(lpContext))
	return BOOL(ret), WIN32_ERROR(err)
}

func BackupSeek(hFile HANDLE, dwLowBytesToSeek uint32, dwHighBytesToSeek uint32, lpdwLowByteSeeked *uint32, lpdwHighByteSeeked *uint32, lpContext unsafe.Pointer) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pBackupSeek, libKernel32, "BackupSeek")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(dwLowBytesToSeek), uintptr(dwHighBytesToSeek), uintptr(unsafe.Pointer(lpdwLowByteSeeked)), uintptr(unsafe.Pointer(lpdwHighByteSeeked)), uintptr(lpContext))
	return BOOL(ret), WIN32_ERROR(err)
}

func BackupWrite(hFile HANDLE, lpBuffer *uint8, nNumberOfBytesToWrite uint32, lpNumberOfBytesWritten *uint32, bAbort BOOL, bProcessSecurity BOOL, lpContext unsafe.Pointer) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pBackupWrite, libKernel32, "BackupWrite")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(unsafe.Pointer(lpBuffer)), uintptr(nNumberOfBytesToWrite), uintptr(unsafe.Pointer(lpNumberOfBytesWritten)), uintptr(bAbort), uintptr(bProcessSecurity), uintptr(lpContext))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetLogicalDriveStringsA(nBufferLength uint32, lpBuffer *uint8) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetLogicalDriveStringsA, libKernel32, "GetLogicalDriveStringsA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(nBufferLength), uintptr(unsafe.Pointer(lpBuffer)))
	return uint32(ret), WIN32_ERROR(err)
}

func SetSearchPathMode(Flags uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetSearchPathMode, libKernel32, "SetSearchPathMode")
	ret, _,  err := syscall.SyscallN(addr, uintptr(Flags))
	return BOOL(ret), WIN32_ERROR(err)
}

func CreateDirectoryExA(lpTemplateDirectory PSTR, lpNewDirectory PSTR, lpSecurityAttributes *SECURITY_ATTRIBUTES) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCreateDirectoryExA, libKernel32, "CreateDirectoryExA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpTemplateDirectory)), uintptr(unsafe.Pointer(lpNewDirectory)), uintptr(unsafe.Pointer(lpSecurityAttributes)))
	return BOOL(ret), WIN32_ERROR(err)
}

var CreateDirectoryEx = CreateDirectoryExW
func CreateDirectoryExW(lpTemplateDirectory PWSTR, lpNewDirectory PWSTR, lpSecurityAttributes *SECURITY_ATTRIBUTES) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCreateDirectoryExW, libKernel32, "CreateDirectoryExW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpTemplateDirectory)), uintptr(unsafe.Pointer(lpNewDirectory)), uintptr(unsafe.Pointer(lpSecurityAttributes)))
	return BOOL(ret), WIN32_ERROR(err)
}

func CreateDirectoryTransactedA(lpTemplateDirectory PSTR, lpNewDirectory PSTR, lpSecurityAttributes *SECURITY_ATTRIBUTES, hTransaction HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCreateDirectoryTransactedA, libKernel32, "CreateDirectoryTransactedA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpTemplateDirectory)), uintptr(unsafe.Pointer(lpNewDirectory)), uintptr(unsafe.Pointer(lpSecurityAttributes)), hTransaction)
	return BOOL(ret), WIN32_ERROR(err)
}

var CreateDirectoryTransacted = CreateDirectoryTransactedW
func CreateDirectoryTransactedW(lpTemplateDirectory PWSTR, lpNewDirectory PWSTR, lpSecurityAttributes *SECURITY_ATTRIBUTES, hTransaction HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCreateDirectoryTransactedW, libKernel32, "CreateDirectoryTransactedW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpTemplateDirectory)), uintptr(unsafe.Pointer(lpNewDirectory)), uintptr(unsafe.Pointer(lpSecurityAttributes)), hTransaction)
	return BOOL(ret), WIN32_ERROR(err)
}

func RemoveDirectoryTransactedA(lpPathName PSTR, hTransaction HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pRemoveDirectoryTransactedA, libKernel32, "RemoveDirectoryTransactedA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpPathName)), hTransaction)
	return BOOL(ret), WIN32_ERROR(err)
}

var RemoveDirectoryTransacted = RemoveDirectoryTransactedW
func RemoveDirectoryTransactedW(lpPathName PWSTR, hTransaction HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pRemoveDirectoryTransactedW, libKernel32, "RemoveDirectoryTransactedW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpPathName)), hTransaction)
	return BOOL(ret), WIN32_ERROR(err)
}

func GetFullPathNameTransactedA(lpFileName PSTR, nBufferLength uint32, lpBuffer *uint8, lpFilePart *PSTR, hTransaction HANDLE) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetFullPathNameTransactedA, libKernel32, "GetFullPathNameTransactedA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(nBufferLength), uintptr(unsafe.Pointer(lpBuffer)), uintptr(unsafe.Pointer(lpFilePart)), hTransaction)
	return uint32(ret), WIN32_ERROR(err)
}

var GetFullPathNameTransacted = GetFullPathNameTransactedW
func GetFullPathNameTransactedW(lpFileName PWSTR, nBufferLength uint32, lpBuffer *uint16, lpFilePart *PWSTR, hTransaction HANDLE) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetFullPathNameTransactedW, libKernel32, "GetFullPathNameTransactedW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(nBufferLength), uintptr(unsafe.Pointer(lpBuffer)), uintptr(unsafe.Pointer(lpFilePart)), hTransaction)
	return uint32(ret), WIN32_ERROR(err)
}

func DefineDosDeviceA(dwFlags DEFINE_DOS_DEVICE_FLAGS, lpDeviceName PSTR, lpTargetPath PSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pDefineDosDeviceA, libKernel32, "DefineDosDeviceA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(dwFlags), uintptr(unsafe.Pointer(lpDeviceName)), uintptr(unsafe.Pointer(lpTargetPath)))
	return BOOL(ret), WIN32_ERROR(err)
}

func QueryDosDeviceA(lpDeviceName PSTR, lpTargetPath *uint8, ucchMax uint32) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pQueryDosDeviceA, libKernel32, "QueryDosDeviceA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpDeviceName)), uintptr(unsafe.Pointer(lpTargetPath)), uintptr(ucchMax))
	return uint32(ret), WIN32_ERROR(err)
}

func CreateFileTransactedA(lpFileName PSTR, dwDesiredAccess uint32, dwShareMode FILE_SHARE_MODE, lpSecurityAttributes *SECURITY_ATTRIBUTES, dwCreationDisposition FILE_CREATION_DISPOSITION, dwFlagsAndAttributes FILE_FLAGS_AND_ATTRIBUTES, hTemplateFile HANDLE, hTransaction HANDLE, pusMiniVersion *TXFS_MINIVERSION, lpExtendedParameter unsafe.Pointer) (HANDLE, WIN32_ERROR) {
	addr := lazyAddr(&pCreateFileTransactedA, libKernel32, "CreateFileTransactedA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(dwDesiredAccess), uintptr(dwShareMode), uintptr(unsafe.Pointer(lpSecurityAttributes)), uintptr(dwCreationDisposition), uintptr(dwFlagsAndAttributes), hTemplateFile, hTransaction, uintptr(unsafe.Pointer(pusMiniVersion)), uintptr(lpExtendedParameter))
	return HANDLE(ret), WIN32_ERROR(err)
}

var CreateFileTransacted = CreateFileTransactedW
func CreateFileTransactedW(lpFileName PWSTR, dwDesiredAccess uint32, dwShareMode FILE_SHARE_MODE, lpSecurityAttributes *SECURITY_ATTRIBUTES, dwCreationDisposition FILE_CREATION_DISPOSITION, dwFlagsAndAttributes FILE_FLAGS_AND_ATTRIBUTES, hTemplateFile HANDLE, hTransaction HANDLE, pusMiniVersion *TXFS_MINIVERSION, lpExtendedParameter unsafe.Pointer) (HANDLE, WIN32_ERROR) {
	addr := lazyAddr(&pCreateFileTransactedW, libKernel32, "CreateFileTransactedW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(dwDesiredAccess), uintptr(dwShareMode), uintptr(unsafe.Pointer(lpSecurityAttributes)), uintptr(dwCreationDisposition), uintptr(dwFlagsAndAttributes), hTemplateFile, hTransaction, uintptr(unsafe.Pointer(pusMiniVersion)), uintptr(lpExtendedParameter))
	return HANDLE(ret), WIN32_ERROR(err)
}

func ReOpenFile(hOriginalFile HANDLE, dwDesiredAccess FILE_ACCESS_FLAGS, dwShareMode FILE_SHARE_MODE, dwFlagsAndAttributes FILE_FLAGS_AND_ATTRIBUTES) (HANDLE, WIN32_ERROR) {
	addr := lazyAddr(&pReOpenFile, libKernel32, "ReOpenFile")
	ret, _,  err := syscall.SyscallN(addr, hOriginalFile, uintptr(dwDesiredAccess), uintptr(dwShareMode), uintptr(dwFlagsAndAttributes))
	return HANDLE(ret), WIN32_ERROR(err)
}

func SetFileAttributesTransactedA(lpFileName PSTR, dwFileAttributes uint32, hTransaction HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetFileAttributesTransactedA, libKernel32, "SetFileAttributesTransactedA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(dwFileAttributes), hTransaction)
	return BOOL(ret), WIN32_ERROR(err)
}

var SetFileAttributesTransacted = SetFileAttributesTransactedW
func SetFileAttributesTransactedW(lpFileName PWSTR, dwFileAttributes uint32, hTransaction HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetFileAttributesTransactedW, libKernel32, "SetFileAttributesTransactedW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(dwFileAttributes), hTransaction)
	return BOOL(ret), WIN32_ERROR(err)
}

func GetFileAttributesTransactedA(lpFileName PSTR, fInfoLevelId GET_FILEEX_INFO_LEVELS, lpFileInformation unsafe.Pointer, hTransaction HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileAttributesTransactedA, libKernel32, "GetFileAttributesTransactedA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(fInfoLevelId), uintptr(lpFileInformation), hTransaction)
	return BOOL(ret), WIN32_ERROR(err)
}

var GetFileAttributesTransacted = GetFileAttributesTransactedW
func GetFileAttributesTransactedW(lpFileName PWSTR, fInfoLevelId GET_FILEEX_INFO_LEVELS, lpFileInformation unsafe.Pointer, hTransaction HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileAttributesTransactedW, libKernel32, "GetFileAttributesTransactedW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(fInfoLevelId), uintptr(lpFileInformation), hTransaction)
	return BOOL(ret), WIN32_ERROR(err)
}

func GetCompressedFileSizeTransactedA(lpFileName PSTR, lpFileSizeHigh *uint32, hTransaction HANDLE) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetCompressedFileSizeTransactedA, libKernel32, "GetCompressedFileSizeTransactedA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpFileSizeHigh)), hTransaction)
	return uint32(ret), WIN32_ERROR(err)
}

var GetCompressedFileSizeTransacted = GetCompressedFileSizeTransactedW
func GetCompressedFileSizeTransactedW(lpFileName PWSTR, lpFileSizeHigh *uint32, hTransaction HANDLE) (uint32, WIN32_ERROR) {
	addr := lazyAddr(&pGetCompressedFileSizeTransactedW, libKernel32, "GetCompressedFileSizeTransactedW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpFileSizeHigh)), hTransaction)
	return uint32(ret), WIN32_ERROR(err)
}

func DeleteFileTransactedA(lpFileName PSTR, hTransaction HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pDeleteFileTransactedA, libKernel32, "DeleteFileTransactedA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), hTransaction)
	return BOOL(ret), WIN32_ERROR(err)
}

var DeleteFileTransacted = DeleteFileTransactedW
func DeleteFileTransactedW(lpFileName PWSTR, hTransaction HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pDeleteFileTransactedW, libKernel32, "DeleteFileTransactedW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), hTransaction)
	return BOOL(ret), WIN32_ERROR(err)
}

func CheckNameLegalDOS8Dot3A(lpName PSTR, lpOemName *uint8, OemNameSize uint32, pbNameContainsSpaces *BOOL, pbNameLegal *BOOL) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCheckNameLegalDOS8Dot3A, libKernel32, "CheckNameLegalDOS8Dot3A")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpName)), uintptr(unsafe.Pointer(lpOemName)), uintptr(OemNameSize), uintptr(unsafe.Pointer(pbNameContainsSpaces)), uintptr(unsafe.Pointer(pbNameLegal)))
	return BOOL(ret), WIN32_ERROR(err)
}

var CheckNameLegalDOS8Dot3 = CheckNameLegalDOS8Dot3W
func CheckNameLegalDOS8Dot3W(lpName PWSTR, lpOemName *uint8, OemNameSize uint32, pbNameContainsSpaces *BOOL, pbNameLegal *BOOL) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCheckNameLegalDOS8Dot3W, libKernel32, "CheckNameLegalDOS8Dot3W")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpName)), uintptr(unsafe.Pointer(lpOemName)), uintptr(OemNameSize), uintptr(unsafe.Pointer(pbNameContainsSpaces)), uintptr(unsafe.Pointer(pbNameLegal)))
	return BOOL(ret), WIN32_ERROR(err)
}

func FindFirstFileTransactedA(lpFileName PSTR, fInfoLevelId FINDEX_INFO_LEVELS, lpFindFileData unsafe.Pointer, fSearchOp FINDEX_SEARCH_OPS, lpSearchFilter unsafe.Pointer, dwAdditionalFlags uint32, hTransaction HANDLE) (FindFileHandle, WIN32_ERROR) {
	addr := lazyAddr(&pFindFirstFileTransactedA, libKernel32, "FindFirstFileTransactedA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(fInfoLevelId), uintptr(lpFindFileData), uintptr(fSearchOp), uintptr(lpSearchFilter), uintptr(dwAdditionalFlags), hTransaction)
	return FindFileHandle(ret), WIN32_ERROR(err)
}

var FindFirstFileTransacted = FindFirstFileTransactedW
func FindFirstFileTransactedW(lpFileName PWSTR, fInfoLevelId FINDEX_INFO_LEVELS, lpFindFileData unsafe.Pointer, fSearchOp FINDEX_SEARCH_OPS, lpSearchFilter unsafe.Pointer, dwAdditionalFlags uint32, hTransaction HANDLE) (FindFileHandle, WIN32_ERROR) {
	addr := lazyAddr(&pFindFirstFileTransactedW, libKernel32, "FindFirstFileTransactedW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(fInfoLevelId), uintptr(lpFindFileData), uintptr(fSearchOp), uintptr(lpSearchFilter), uintptr(dwAdditionalFlags), hTransaction)
	return FindFileHandle(ret), WIN32_ERROR(err)
}

func CopyFileA(lpExistingFileName PSTR, lpNewFileName PSTR, bFailIfExists BOOL) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCopyFileA, libKernel32, "CopyFileA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpNewFileName)), uintptr(bFailIfExists))
	return BOOL(ret), WIN32_ERROR(err)
}

var CopyFile = CopyFileW
func CopyFileW(lpExistingFileName PWSTR, lpNewFileName PWSTR, bFailIfExists BOOL) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCopyFileW, libKernel32, "CopyFileW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpNewFileName)), uintptr(bFailIfExists))
	return BOOL(ret), WIN32_ERROR(err)
}

func CopyFileExA(lpExistingFileName PSTR, lpNewFileName PSTR, lpProgressRoutine uintptr, lpData unsafe.Pointer, pbCancel *int32, dwCopyFlags uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCopyFileExA, libKernel32, "CopyFileExA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpNewFileName)), uintptr(lpProgressRoutine), uintptr(lpData), uintptr(unsafe.Pointer(pbCancel)), uintptr(dwCopyFlags))
	return BOOL(ret), WIN32_ERROR(err)
}

var CopyFileEx = CopyFileExW
func CopyFileExW(lpExistingFileName PWSTR, lpNewFileName PWSTR, lpProgressRoutine uintptr, lpData unsafe.Pointer, pbCancel *int32, dwCopyFlags uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCopyFileExW, libKernel32, "CopyFileExW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpNewFileName)), uintptr(lpProgressRoutine), uintptr(lpData), uintptr(unsafe.Pointer(pbCancel)), uintptr(dwCopyFlags))
	return BOOL(ret), WIN32_ERROR(err)
}

func CopyFileTransactedA(lpExistingFileName PSTR, lpNewFileName PSTR, lpProgressRoutine uintptr, lpData unsafe.Pointer, pbCancel *int32, dwCopyFlags uint32, hTransaction HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCopyFileTransactedA, libKernel32, "CopyFileTransactedA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpNewFileName)), uintptr(lpProgressRoutine), uintptr(lpData), uintptr(unsafe.Pointer(pbCancel)), uintptr(dwCopyFlags), hTransaction)
	return BOOL(ret), WIN32_ERROR(err)
}

var CopyFileTransacted = CopyFileTransactedW
func CopyFileTransactedW(lpExistingFileName PWSTR, lpNewFileName PWSTR, lpProgressRoutine uintptr, lpData unsafe.Pointer, pbCancel *int32, dwCopyFlags uint32, hTransaction HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCopyFileTransactedW, libKernel32, "CopyFileTransactedW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpNewFileName)), uintptr(lpProgressRoutine), uintptr(lpData), uintptr(unsafe.Pointer(pbCancel)), uintptr(dwCopyFlags), hTransaction)
	return BOOL(ret), WIN32_ERROR(err)
}

func CopyFile2(pwszExistingFileName PWSTR, pwszNewFileName PWSTR, pExtendedParameters *COPYFILE2_EXTENDED_PARAMETERS) HRESULT {
	addr := lazyAddr(&pCopyFile2, libKernel32, "CopyFile2")
	ret, _,  _ := syscall.SyscallN(addr, uintptr(unsafe.Pointer(pwszExistingFileName)), uintptr(unsafe.Pointer(pwszNewFileName)), uintptr(unsafe.Pointer(pExtendedParameters)))
	return HRESULT(ret)
}

func MoveFileA(lpExistingFileName PSTR, lpNewFileName PSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pMoveFileA, libKernel32, "MoveFileA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpNewFileName)))
	return BOOL(ret), WIN32_ERROR(err)
}

var MoveFile = MoveFileW
func MoveFileW(lpExistingFileName PWSTR, lpNewFileName PWSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pMoveFileW, libKernel32, "MoveFileW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpNewFileName)))
	return BOOL(ret), WIN32_ERROR(err)
}

func MoveFileExA(lpExistingFileName PSTR, lpNewFileName PSTR, dwFlags MOVE_FILE_FLAGS) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pMoveFileExA, libKernel32, "MoveFileExA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpNewFileName)), uintptr(dwFlags))
	return BOOL(ret), WIN32_ERROR(err)
}

var MoveFileEx = MoveFileExW
func MoveFileExW(lpExistingFileName PWSTR, lpNewFileName PWSTR, dwFlags MOVE_FILE_FLAGS) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pMoveFileExW, libKernel32, "MoveFileExW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpNewFileName)), uintptr(dwFlags))
	return BOOL(ret), WIN32_ERROR(err)
}

func MoveFileWithProgressA(lpExistingFileName PSTR, lpNewFileName PSTR, lpProgressRoutine uintptr, lpData unsafe.Pointer, dwFlags MOVE_FILE_FLAGS) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pMoveFileWithProgressA, libKernel32, "MoveFileWithProgressA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpNewFileName)), uintptr(lpProgressRoutine), uintptr(lpData), uintptr(dwFlags))
	return BOOL(ret), WIN32_ERROR(err)
}

var MoveFileWithProgress = MoveFileWithProgressW
func MoveFileWithProgressW(lpExistingFileName PWSTR, lpNewFileName PWSTR, lpProgressRoutine uintptr, lpData unsafe.Pointer, dwFlags MOVE_FILE_FLAGS) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pMoveFileWithProgressW, libKernel32, "MoveFileWithProgressW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpNewFileName)), uintptr(lpProgressRoutine), uintptr(lpData), uintptr(dwFlags))
	return BOOL(ret), WIN32_ERROR(err)
}

func MoveFileTransactedA(lpExistingFileName PSTR, lpNewFileName PSTR, lpProgressRoutine uintptr, lpData unsafe.Pointer, dwFlags MOVE_FILE_FLAGS, hTransaction HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pMoveFileTransactedA, libKernel32, "MoveFileTransactedA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpNewFileName)), uintptr(lpProgressRoutine), uintptr(lpData), uintptr(dwFlags), hTransaction)
	return BOOL(ret), WIN32_ERROR(err)
}

var MoveFileTransacted = MoveFileTransactedW
func MoveFileTransactedW(lpExistingFileName PWSTR, lpNewFileName PWSTR, lpProgressRoutine uintptr, lpData unsafe.Pointer, dwFlags MOVE_FILE_FLAGS, hTransaction HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pMoveFileTransactedW, libKernel32, "MoveFileTransactedW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpNewFileName)), uintptr(lpProgressRoutine), uintptr(lpData), uintptr(dwFlags), hTransaction)
	return BOOL(ret), WIN32_ERROR(err)
}

func ReplaceFileA(lpReplacedFileName PSTR, lpReplacementFileName PSTR, lpBackupFileName PSTR, dwReplaceFlags REPLACE_FILE_FLAGS, lpExclude unsafe.Pointer, lpReserved unsafe.Pointer) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pReplaceFileA, libKernel32, "ReplaceFileA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpReplacedFileName)), uintptr(unsafe.Pointer(lpReplacementFileName)), uintptr(unsafe.Pointer(lpBackupFileName)), uintptr(dwReplaceFlags), uintptr(lpExclude), uintptr(lpReserved))
	return BOOL(ret), WIN32_ERROR(err)
}

var ReplaceFile = ReplaceFileW
func ReplaceFileW(lpReplacedFileName PWSTR, lpReplacementFileName PWSTR, lpBackupFileName PWSTR, dwReplaceFlags REPLACE_FILE_FLAGS, lpExclude unsafe.Pointer, lpReserved unsafe.Pointer) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pReplaceFileW, libKernel32, "ReplaceFileW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpReplacedFileName)), uintptr(unsafe.Pointer(lpReplacementFileName)), uintptr(unsafe.Pointer(lpBackupFileName)), uintptr(dwReplaceFlags), uintptr(lpExclude), uintptr(lpReserved))
	return BOOL(ret), WIN32_ERROR(err)
}

func CreateHardLinkA(lpFileName PSTR, lpExistingFileName PSTR, lpSecurityAttributes *SECURITY_ATTRIBUTES) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCreateHardLinkA, libKernel32, "CreateHardLinkA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpSecurityAttributes)))
	return BOOL(ret), WIN32_ERROR(err)
}

var CreateHardLink = CreateHardLinkW
func CreateHardLinkW(lpFileName PWSTR, lpExistingFileName PWSTR, lpSecurityAttributes *SECURITY_ATTRIBUTES) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCreateHardLinkW, libKernel32, "CreateHardLinkW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpSecurityAttributes)))
	return BOOL(ret), WIN32_ERROR(err)
}

func CreateHardLinkTransactedA(lpFileName PSTR, lpExistingFileName PSTR, lpSecurityAttributes *SECURITY_ATTRIBUTES, hTransaction HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCreateHardLinkTransactedA, libKernel32, "CreateHardLinkTransactedA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpSecurityAttributes)), hTransaction)
	return BOOL(ret), WIN32_ERROR(err)
}

var CreateHardLinkTransacted = CreateHardLinkTransactedW
func CreateHardLinkTransactedW(lpFileName PWSTR, lpExistingFileName PWSTR, lpSecurityAttributes *SECURITY_ATTRIBUTES, hTransaction HANDLE) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pCreateHardLinkTransactedW, libKernel32, "CreateHardLinkTransactedW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(unsafe.Pointer(lpExistingFileName)), uintptr(unsafe.Pointer(lpSecurityAttributes)), hTransaction)
	return BOOL(ret), WIN32_ERROR(err)
}

func FindFirstStreamTransactedW(lpFileName PWSTR, InfoLevel STREAM_INFO_LEVELS, lpFindStreamData unsafe.Pointer, dwFlags uint32, hTransaction HANDLE) (FindStreamHandle, WIN32_ERROR) {
	addr := lazyAddr(&pFindFirstStreamTransactedW, libKernel32, "FindFirstStreamTransactedW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(InfoLevel), uintptr(lpFindStreamData), uintptr(dwFlags), hTransaction)
	return FindStreamHandle(ret), WIN32_ERROR(err)
}

func FindFirstFileNameTransactedW(lpFileName PWSTR, dwFlags uint32, StringLength *uint32, LinkName *uint16, hTransaction HANDLE) (FindFileNameHandle, WIN32_ERROR) {
	addr := lazyAddr(&pFindFirstFileNameTransactedW, libKernel32, "FindFirstFileNameTransactedW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpFileName)), uintptr(dwFlags), uintptr(unsafe.Pointer(StringLength)), uintptr(unsafe.Pointer(LinkName)), hTransaction)
	return FindFileNameHandle(ret), WIN32_ERROR(err)
}

func SetVolumeLabelA(lpRootPathName PSTR, lpVolumeName PSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetVolumeLabelA, libKernel32, "SetVolumeLabelA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpRootPathName)), uintptr(unsafe.Pointer(lpVolumeName)))
	return BOOL(ret), WIN32_ERROR(err)
}

var SetVolumeLabel = SetVolumeLabelW
func SetVolumeLabelW(lpRootPathName PWSTR, lpVolumeName PWSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetVolumeLabelW, libKernel32, "SetVolumeLabelW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpRootPathName)), uintptr(unsafe.Pointer(lpVolumeName)))
	return BOOL(ret), WIN32_ERROR(err)
}

func SetFileBandwidthReservation(hFile HANDLE, nPeriodMilliseconds uint32, nBytesPerPeriod uint32, bDiscardable BOOL, lpTransferSize *uint32, lpNumOutstandingRequests *uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetFileBandwidthReservation, libKernel32, "SetFileBandwidthReservation")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(nPeriodMilliseconds), uintptr(nBytesPerPeriod), uintptr(bDiscardable), uintptr(unsafe.Pointer(lpTransferSize)), uintptr(unsafe.Pointer(lpNumOutstandingRequests)))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetFileBandwidthReservation(hFile HANDLE, lpPeriodMilliseconds *uint32, lpBytesPerPeriod *uint32, pDiscardable *int32, lpTransferSize *uint32, lpNumOutstandingRequests *uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileBandwidthReservation, libKernel32, "GetFileBandwidthReservation")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(unsafe.Pointer(lpPeriodMilliseconds)), uintptr(unsafe.Pointer(lpBytesPerPeriod)), uintptr(unsafe.Pointer(pDiscardable)), uintptr(unsafe.Pointer(lpTransferSize)), uintptr(unsafe.Pointer(lpNumOutstandingRequests)))
	return BOOL(ret), WIN32_ERROR(err)
}

func ReadDirectoryChangesW(hDirectory HANDLE, lpBuffer unsafe.Pointer, nBufferLength uint32, bWatchSubtree BOOL, dwNotifyFilter FILE_NOTIFY_CHANGE, lpBytesReturned *uint32, lpOverlapped *OVERLAPPED, lpCompletionRoutine uintptr) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pReadDirectoryChangesW, libKernel32, "ReadDirectoryChangesW")
	ret, _,  err := syscall.SyscallN(addr, hDirectory, uintptr(lpBuffer), uintptr(nBufferLength), uintptr(bWatchSubtree), uintptr(dwNotifyFilter), uintptr(unsafe.Pointer(lpBytesReturned)), uintptr(unsafe.Pointer(lpOverlapped)), uintptr(lpCompletionRoutine))
	return BOOL(ret), WIN32_ERROR(err)
}

func ReadDirectoryChangesExW(hDirectory HANDLE, lpBuffer unsafe.Pointer, nBufferLength uint32, bWatchSubtree BOOL, dwNotifyFilter FILE_NOTIFY_CHANGE, lpBytesReturned *uint32, lpOverlapped *OVERLAPPED, lpCompletionRoutine uintptr, ReadDirectoryNotifyInformationClass READ_DIRECTORY_NOTIFY_INFORMATION_CLASS) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pReadDirectoryChangesExW, libKernel32, "ReadDirectoryChangesExW")
	ret, _,  err := syscall.SyscallN(addr, hDirectory, uintptr(lpBuffer), uintptr(nBufferLength), uintptr(bWatchSubtree), uintptr(dwNotifyFilter), uintptr(unsafe.Pointer(lpBytesReturned)), uintptr(unsafe.Pointer(lpOverlapped)), uintptr(lpCompletionRoutine), uintptr(ReadDirectoryNotifyInformationClass))
	return BOOL(ret), WIN32_ERROR(err)
}

func FindFirstVolumeA(lpszVolumeName *uint8, cchBufferLength uint32) (FindVolumeHandle, WIN32_ERROR) {
	addr := lazyAddr(&pFindFirstVolumeA, libKernel32, "FindFirstVolumeA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszVolumeName)), uintptr(cchBufferLength))
	return FindVolumeHandle(ret), WIN32_ERROR(err)
}

func FindNextVolumeA(hFindVolume FindVolumeHandle, lpszVolumeName *uint8, cchBufferLength uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFindNextVolumeA, libKernel32, "FindNextVolumeA")
	ret, _,  err := syscall.SyscallN(addr, hFindVolume, uintptr(unsafe.Pointer(lpszVolumeName)), uintptr(cchBufferLength))
	return BOOL(ret), WIN32_ERROR(err)
}

func FindFirstVolumeMountPointA(lpszRootPathName PSTR, lpszVolumeMountPoint *uint8, cchBufferLength uint32) (FindVolumeMointPointHandle, WIN32_ERROR) {
	addr := lazyAddr(&pFindFirstVolumeMountPointA, libKernel32, "FindFirstVolumeMountPointA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszRootPathName)), uintptr(unsafe.Pointer(lpszVolumeMountPoint)), uintptr(cchBufferLength))
	return FindVolumeMointPointHandle(ret), WIN32_ERROR(err)
}

var FindFirstVolumeMountPoint = FindFirstVolumeMountPointW
func FindFirstVolumeMountPointW(lpszRootPathName PWSTR, lpszVolumeMountPoint *uint16, cchBufferLength uint32) (FindVolumeMointPointHandle, WIN32_ERROR) {
	addr := lazyAddr(&pFindFirstVolumeMountPointW, libKernel32, "FindFirstVolumeMountPointW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszRootPathName)), uintptr(unsafe.Pointer(lpszVolumeMountPoint)), uintptr(cchBufferLength))
	return FindVolumeMointPointHandle(ret), WIN32_ERROR(err)
}

func FindNextVolumeMountPointA(hFindVolumeMountPoint FindVolumeMointPointHandle, lpszVolumeMountPoint *uint8, cchBufferLength uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFindNextVolumeMountPointA, libKernel32, "FindNextVolumeMountPointA")
	ret, _,  err := syscall.SyscallN(addr, hFindVolumeMountPoint, uintptr(unsafe.Pointer(lpszVolumeMountPoint)), uintptr(cchBufferLength))
	return BOOL(ret), WIN32_ERROR(err)
}

var FindNextVolumeMountPoint = FindNextVolumeMountPointW
func FindNextVolumeMountPointW(hFindVolumeMountPoint FindVolumeMointPointHandle, lpszVolumeMountPoint *uint16, cchBufferLength uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFindNextVolumeMountPointW, libKernel32, "FindNextVolumeMountPointW")
	ret, _,  err := syscall.SyscallN(addr, hFindVolumeMountPoint, uintptr(unsafe.Pointer(lpszVolumeMountPoint)), uintptr(cchBufferLength))
	return BOOL(ret), WIN32_ERROR(err)
}

func FindVolumeMountPointClose(hFindVolumeMountPoint FindVolumeMointPointHandle) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pFindVolumeMountPointClose, libKernel32, "FindVolumeMountPointClose")
	ret, _,  err := syscall.SyscallN(addr, hFindVolumeMountPoint)
	return BOOL(ret), WIN32_ERROR(err)
}

func SetVolumeMountPointA(lpszVolumeMountPoint PSTR, lpszVolumeName PSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetVolumeMountPointA, libKernel32, "SetVolumeMountPointA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszVolumeMountPoint)), uintptr(unsafe.Pointer(lpszVolumeName)))
	return BOOL(ret), WIN32_ERROR(err)
}

var SetVolumeMountPoint = SetVolumeMountPointW
func SetVolumeMountPointW(lpszVolumeMountPoint PWSTR, lpszVolumeName PWSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pSetVolumeMountPointW, libKernel32, "SetVolumeMountPointW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszVolumeMountPoint)), uintptr(unsafe.Pointer(lpszVolumeName)))
	return BOOL(ret), WIN32_ERROR(err)
}

func DeleteVolumeMountPointA(lpszVolumeMountPoint PSTR) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pDeleteVolumeMountPointA, libKernel32, "DeleteVolumeMountPointA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszVolumeMountPoint)))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetVolumeNameForVolumeMountPointA(lpszVolumeMountPoint PSTR, lpszVolumeName *uint8, cchBufferLength uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetVolumeNameForVolumeMountPointA, libKernel32, "GetVolumeNameForVolumeMountPointA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszVolumeMountPoint)), uintptr(unsafe.Pointer(lpszVolumeName)), uintptr(cchBufferLength))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetVolumePathNameA(lpszFileName PSTR, lpszVolumePathName *uint8, cchBufferLength uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetVolumePathNameA, libKernel32, "GetVolumePathNameA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszFileName)), uintptr(unsafe.Pointer(lpszVolumePathName)), uintptr(cchBufferLength))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetVolumePathNamesForVolumeNameA(lpszVolumeName PSTR, lpszVolumePathNames *uint8, cchBufferLength uint32, lpcchReturnLength *uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetVolumePathNamesForVolumeNameA, libKernel32, "GetVolumePathNamesForVolumeNameA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpszVolumeName)), uintptr(unsafe.Pointer(lpszVolumePathNames)), uintptr(cchBufferLength), uintptr(unsafe.Pointer(lpcchReturnLength)))
	return BOOL(ret), WIN32_ERROR(err)
}

func GetFileInformationByHandleEx(hFile HANDLE, FileInformationClass FILE_INFO_BY_HANDLE_CLASS, lpFileInformation unsafe.Pointer, dwBufferSize uint32) (BOOL, WIN32_ERROR) {
	addr := lazyAddr(&pGetFileInformationByHandleEx, libKernel32, "GetFileInformationByHandleEx")
	ret, _,  err := syscall.SyscallN(addr, hFile, uintptr(FileInformationClass), uintptr(lpFileInformation), uintptr(dwBufferSize))
	return BOOL(ret), WIN32_ERROR(err)
}

func OpenFileById(hVolumeHint HANDLE, lpFileId *FILE_ID_DESCRIPTOR, dwDesiredAccess FILE_ACCESS_FLAGS, dwShareMode FILE_SHARE_MODE, lpSecurityAttributes *SECURITY_ATTRIBUTES, dwFlagsAndAttributes FILE_FLAGS_AND_ATTRIBUTES) (HANDLE, WIN32_ERROR) {
	addr := lazyAddr(&pOpenFileById, libKernel32, "OpenFileById")
	ret, _,  err := syscall.SyscallN(addr, hVolumeHint, uintptr(unsafe.Pointer(lpFileId)), uintptr(dwDesiredAccess), uintptr(dwShareMode), uintptr(unsafe.Pointer(lpSecurityAttributes)), uintptr(dwFlagsAndAttributes))
	return HANDLE(ret), WIN32_ERROR(err)
}

func CreateSymbolicLinkA(lpSymlinkFileName PSTR, lpTargetFileName PSTR, dwFlags SYMBOLIC_LINK_FLAGS) (BOOLEAN, WIN32_ERROR) {
	addr := lazyAddr(&pCreateSymbolicLinkA, libKernel32, "CreateSymbolicLinkA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpSymlinkFileName)), uintptr(unsafe.Pointer(lpTargetFileName)), uintptr(dwFlags))
	return BOOLEAN(ret), WIN32_ERROR(err)
}

var CreateSymbolicLink = CreateSymbolicLinkW
func CreateSymbolicLinkW(lpSymlinkFileName PWSTR, lpTargetFileName PWSTR, dwFlags SYMBOLIC_LINK_FLAGS) (BOOLEAN, WIN32_ERROR) {
	addr := lazyAddr(&pCreateSymbolicLinkW, libKernel32, "CreateSymbolicLinkW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpSymlinkFileName)), uintptr(unsafe.Pointer(lpTargetFileName)), uintptr(dwFlags))
	return BOOLEAN(ret), WIN32_ERROR(err)
}

func CreateSymbolicLinkTransactedA(lpSymlinkFileName PSTR, lpTargetFileName PSTR, dwFlags SYMBOLIC_LINK_FLAGS, hTransaction HANDLE) (BOOLEAN, WIN32_ERROR) {
	addr := lazyAddr(&pCreateSymbolicLinkTransactedA, libKernel32, "CreateSymbolicLinkTransactedA")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpSymlinkFileName)), uintptr(unsafe.Pointer(lpTargetFileName)), uintptr(dwFlags), hTransaction)
	return BOOLEAN(ret), WIN32_ERROR(err)
}

var CreateSymbolicLinkTransacted = CreateSymbolicLinkTransactedW
func CreateSymbolicLinkTransactedW(lpSymlinkFileName PWSTR, lpTargetFileName PWSTR, dwFlags SYMBOLIC_LINK_FLAGS, hTransaction HANDLE) (BOOLEAN, WIN32_ERROR) {
	addr := lazyAddr(&pCreateSymbolicLinkTransactedW, libKernel32, "CreateSymbolicLinkTransactedW")
	ret, _,  err := syscall.SyscallN(addr, uintptr(unsafe.Pointer(lpSymlinkFileName)), uintptr(unsafe.Pointer(lpTargetFileName)), uintptr(dwFlags), hTransaction)
	return BOOLEAN(ret), WIN32_ERROR(err)
}


